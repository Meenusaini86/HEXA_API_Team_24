{
	"info": {
		"_postman_id": "728bae78-c577-4140-b254-dc5f4dfc4124",
		"name": "API_HEXA_Team24",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Program  Controller EndToEnd",
			"item": [
				{
					"name": "Login_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30864f3c-3ae3-4af7-9118-30a17ee1da45",
								"exec": [
									"var responseData = pm.response.json();",
									"pm.collectionVariables.set(\"access-token-DD\", responseData.token);",
									"",
									"",
									"// Status Code Validation ",
									"",
									"",
									"",
									"pm.test(\"Status Code String Assertion\", ()=>{",
									"    pm.expect(pm.response.status).to.equal('OK');",
									"})",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Response Time Validation ",
									"",
									"pm.test(\"Response Time is lower than 1000ms\", ()=>{",
									"     pm.expect(pm.response.responseTime).to.be.below(1000);",
									"})",
									"",
									"",
									"",
									"// Header Validation ",
									"",
									"pm.test(\"Content-Type header validation\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Server header validation\", () => {",
									"  pm.response.to.have.header(\"Server\");",
									"});",
									"",
									"",
									"",
									"postman.setNextRequest(\"C1_Create_NewProgram\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ab205640-fa88-4b92-a33d-05853217d7f5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/login"
					},
					"response": []
				},
				{
					"name": "C1_Create_NewProgram",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});",
									"",
									"pm.environment.set('program_Name_D', responseJson.programName)",
									"",
									"",
									"pm.test('Status Code', function () {",
									"    pm.expect(pm.response.to.have.status(201));",
									"})",
									"",
									"",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"programId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"programDescription\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"programStatus\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"creationTime\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"lastModTime\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"programId\",",
									"    \"programName\",",
									"    \"programDescription\",",
									"    \"programStatus\",",
									"    \"creationTime\",",
									"    \"lastModTime\"",
									"  ]",
									"}",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    ",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;",
									"})",
									"",
									"pm.test(\"Test the data type\", () => {",
									"    pm.expect(responseJson).to.be.an('object');",
									"   ",
									"})",
									"",
									"",
									"console.log(responseJson);",
									"postman.setNextRequest(\"Delete_By_Invalid_ProgramName Negative\");",
									""
								],
								"type": "text/javascript",
								"id": "3068c7b0-e030-4eb9-a38f-e17babb7bd05"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"program_description\", data.program_description );\r",
									"\r",
									"var data_csv = pm.iterationData.toObject(); \r",
									"var c1_nm = data_csv.c1_program_nm;\r",
									"var randomInt = Math.floor(Math.random()*991);\r",
									"\r",
									"var conct_name = c1_nm+ randomInt;\r",
									"pm.environment.set(\"cx1_program_nm\",conct_name );\r",
									"\r",
									"\r",
									"console.log(conct_name);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "b2935e9b-219e-4c67-aca4-aa1d2b70fcdf"
							}
						}
					],
					"id": "68bb3b1c-2a6d-47be-90f0-757a01efa75c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{cx1_program_nm}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Delete_By_Invalid_ProgramName Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2532cd8b-d0bc-477f-9c52-d197be6d32d0",
								"exec": [
									"pm.environment.set(\"invalid_programId\", data.invalid_programId );\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "667f789b-f890-4bf5-a9cb-308f770fe9c0",
								"exec": [
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Not Found');\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"// Response Time Validation \r",
									"\r",
									"pm.test(\"Response Time is lower than 1000ms\", ()=>{\r",
									"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"postman.setNextRequest(\"Delete_By_ProgramName_Positive\"); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "49142e08-8c09-4a87-bf5a-d2faf3cd00cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/deletebyprogname/{{invalid_programId}}"
					},
					"response": []
				},
				{
					"name": "Delete_By_ProgramName_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('OK');\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Response Time Validation \r",
									"\r",
									"pm.test(\"Response Time is lower than 200ms\", ()=>{\r",
									"     pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"postman.setNextRequest(\"C2_Create_NewProgram\"); "
								],
								"type": "text/javascript",
								"id": "1a235c76-d649-4117-971e-03a889805356"
							}
						}
					],
					"id": "2cf53ddf-eedb-4ce5-add8-883e7fe2b14d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/deletebyprogname/{{program_Name_D}}"
					},
					"response": []
				},
				{
					"name": "C2_Create_NewProgram",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});",
									"",
									"pm.environment.set('program_id_D', responseJson.programId)",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"programId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"programDescription\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"programStatus\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"creationTime\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"lastModTime\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"programId\",",
									"    \"programName\",",
									"    \"programDescription\",",
									"    \"programStatus\",",
									"    \"creationTime\",",
									"    \"lastModTime\"",
									"  ]",
									"}",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    ",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;",
									"})",
									"",
									"pm.test(\"Test the data type\", () => {",
									"    pm.expect(responseJson).to.be.an('object');",
									"   ",
									"})",
									"",
									"",
									"console.log(responseJson);",
									"postman.setNextRequest(\"Delete_By-InvalidProgramID_Negative\");",
									""
								],
								"type": "text/javascript",
								"id": "3213e51f-10c6-44af-88d3-7c1f0a8b4d72"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"program_description\", data.program_description );\r",
									"\r",
									"var data_csv = pm.iterationData.toObject(); \r",
									"var c2_nm = data_csv.c2_program_nm;\r",
									"var randomInt = Math.floor(Math.random()*991);\r",
									"\r",
									"var conct_name = c2_nm+ randomInt;\r",
									"pm.environment.set(\"cx2_program_nm\",conct_name );\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "07e46d9a-437b-4228-b8a4-0fb3787bed68"
							}
						}
					],
					"id": "e82f835a-4f49-431d-a562-9a63d51c8b12",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{cx2_program_nm}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Delete_By-InvalidProgramID_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0fbb5a93-818d-4aa4-af73-d79cbf674179",
								"exec": [
									"pm.environment.set(\"invalid_programId\", data.invalid_programId );\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "613d48a6-7706-47a3-b9bf-faf562891b97",
								"exec": [
									"\r",
									"pm.test(\"Unscessful \", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        400,\r",
									"        401,\r",
									"        404,408\r",
									"    ]);\r",
									"});\r",
									"\r",
									"// Response Time Validation \r",
									"\r",
									"pm.test(\"Response Time is lower than 1000ms\", ()=>{\r",
									"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Delete_By-ProgramID_positive\"); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "384942a0-a487-407e-be75-9d1e1a1d9433",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/deletebyprogid/{{invalid_programId}}"
					},
					"response": []
				},
				{
					"name": "Delete_By-ProgramID_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('OK');\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Response Time Validation \r",
									" \r",
									"\r",
									"pm.test(\"Response Time is lower than 1000ms\", ()=>{\r",
									"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"postman.setNextRequest(\"create_NewProgram\"); "
								],
								"type": "text/javascript",
								"id": "7aa5ed6a-fa59-4b82-8cd2-498ead8d5c90"
							}
						}
					],
					"id": "d3bff1fa-1ea9-4ede-9dd2-d51a72e15854",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/deletebyprogid/{{program_id_D}}"
					},
					"response": []
				},
				{
					"name": "create_NewProgram",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});",
									"",
									"pm.environment.set('program_id', responseJson.programId)",
									"",
									"pm.environment.set('program_Name', responseJson.programName)",
									"",
									"pm.environment.set('program_status', responseJson.programStatus)",
									"",
									"pm.environment.set('program_descp', responseJson.programDescription)",
									"",
									"pm.test('Status Code', function () {",
									"    pm.expect(pm.response.to.have.status(201));",
									"})",
									"",
									"",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"programId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"programDescription\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"programStatus\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"creationTime\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"lastModTime\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"programId\",",
									"    \"programName\",",
									"    \"programDescription\",",
									"    \"programStatus\",",
									"    \"creationTime\",",
									"    \"lastModTime\"",
									"  ]",
									"};",
									"",
									"",
									"console.log(responseJson);",
									"postman.setNextRequest(\"Missing_ProgramName_Negative\");",
									""
								],
								"type": "text/javascript",
								"id": "3007aabc-52d1-4f5b-bbc4-0ac44f554d73"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"program_description\", data.program_description );\r",
									"\r",
									"var data_csv = pm.iterationData.toObject(); \r",
									"var c2_nm = data_csv.program_nm;\r",
									"var randomInt = Math.floor(Math.random()*991);\r",
									"\r",
									"var conct_name = c2_nm+ randomInt;\r",
									"pm.collectionVariables.set(\"cx3_program_nm\",conct_name );\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.collectionVariables.set(\"total_records\", list); \r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.collectionVariables.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "785307cc-96db-4e39-b696-c427b788de69"
							}
						}
					],
					"id": "5b0e79e9-a411-4473-baea-0898b9e67ee0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{cx3_program_nm}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Missing_ProgramName_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dc79a257-1895-4a3f-867c-624e7abd698d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome5\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome5\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome5\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"EmptyString_ProgramName_Negative\");"
								],
								"type": "text/javascript",
								"id": "05fb179e-b1dd-491f-8ecb-447a510f1692"
							}
						}
					],
					"id": "9d667930-c99b-45c0-8fe7-06bb639d7621",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"\",\r\n\"programStatus\":\"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "EmptyString_ProgramName_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "94f5da1e-09bc-46e5-92c3-f49113dac119"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome10\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"const jsonData =  pm.response.json(); \r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Missing_ProgramStatus_Negative\");"
								],
								"type": "text/javascript",
								"id": "2bd96ade-2320-4fd6-a933-94b06470410f"
							}
						}
					],
					"id": "81f2ea95-9a2f-4f0c-9059-995522d2ef8e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":    ,\r\n\"programStatus\":\"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Missing_ProgramStatus_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "85589abd-9e64-4276-8bbe-cdd0ac860e5b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"EmptyString_ProgramStatus_Negative\");\r",
									""
								],
								"type": "text/javascript",
								"id": "2aa3eb6a-309d-4c87-b645-4b53118b56fe"
							}
						}
					],
					"id": "cdb29401-f004-45f4-9923-bdf59b2020a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{program_nm}}\",\r\n\"programStatus\":\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "EmptyString_ProgramStatus_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "cdd966de-2162-40fe-9b75-9920fca39196"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"const jsonData =  pm.response.json(); \r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"Existing_ProgramName_Negative\");"
								],
								"type": "text/javascript",
								"id": "c266a2dc-c22a-4be1-9100-1a4cac45b24f"
							}
						}
					],
					"id": "9fd9a5a3-4f96-474a-a3a0-1886394d7e65",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{program_nm}}\",\r\n\"programStatus\":\"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Existing_ProgramName_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ea6c6eaa-14d3-4e1d-871c-ad5267abf37c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome3\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome3\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome3\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"const jsonData =  pm.response.json(); \r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"// Status Code Validation \r",
									"\r",
									"pm.test(\"Status code is Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Bad Request');\r",
									"})\r",
									"\r",
									"// Response Time Validation \r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"Program_Name_Int_Negative\");"
								],
								"type": "text/javascript",
								"id": "b574a104-0742-4dbe-900c-1f83e4c0c6ea"
							}
						}
					],
					"id": "4f07e8c0-d288-4cd3-aec1-f52533e08a8f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{program_nm}}\",\r\n\"programStatus\":\"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Program_Name_Int_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3bbf83eb-ed75-4adf-9c68-d67870c426ce"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome5\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome5\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome5\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									";\r",
									"\r",
									"var responseData = pm.response.json(); \r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"// Status Code Validation \r",
									"\r",
									"pm.test(\"Status code is Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Bad Request');\r",
									"})\r",
									"\r",
									"// Response Time Validation \r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"postman.setNextRequest(\"Program_Description_InvalidData_Negative\");\r",
									""
								],
								"type": "text/javascript",
								"id": "d91eaf56-d072-4d37-be56-3c81efc8e547"
							}
						}
					],
					"id": "9fbbb259-714b-418e-99ec-57434f077ccf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{int}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Program_Description_InvalidData_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9692c07b-355c-418f-91bb-090f4c31c171",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2f77135a-020c-4f2e-bfd5-23e8b98f4dc2",
								"exec": [
									"// Status Code Validation \r",
									"\r",
									"pm.test(\"Status code is Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Bad Request');\r",
									"})\r",
									"\r",
									"// Response Time Validation \r",
									"pm.test(\"Response time is less than 1200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
									"});\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"var schema ={\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome8\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome8\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome8\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"const jsonData =  pm.response.json(); \r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"postman.setNextRequest(\"All Programs\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "45731d9c-bf06-47a7-8b1b-99b898944101",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{int}}\",\r\n\"programName\":\"{{program_nm}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "All Programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('OK');\r",
									"})\r",
									"\r",
									"// Response Time Validation \r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"ByProgram_ID_positive\");"
								],
								"type": "text/javascript",
								"id": "1b8a2d54-be75-4edc-89d3-bedcbd2da752"
							}
						}
					],
					"id": "43aeaf0e-4651-496e-903b-308e676e4e6d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "ByProgram_ID_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('OK');\r",
									"})\r",
									"\r",
									"// Response Time Validation \r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Invalid_ProgramID_Negative\");"
								],
								"type": "text/javascript",
								"id": "c6ba2dee-b472-4ae4-8a1f-e4adcc42bfaa"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "80e656d3-66df-4964-a056-d43f212fc8c9"
							}
						}
					],
					"id": "241bdd4b-a7d4-4d44-ba7d-b230f451dc06",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/programs/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "Invalid_ProgramID_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf97b362-cab3-43df-90d0-231be7e4f65a",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404,400])\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Not Found');\r",
									"})\r",
									"\r",
									"// Response Time Validation \r",
									"pm.test(\"Response time is less the 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"update_ProgramName_Negative\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "07a4e95a-09c3-4656-ba0b-2d4405da1495",
								"exec": [
									"pm.environment.set(\"invalid_programId\", data.invalid_programId );"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "352e282d-f389-4685-9972-c1aceff91c62",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/programs/{{invalid_programId}}"
					},
					"response": []
				},
				{
					"name": "update_ProgramName_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ec16ebe7-7722-498a-8366-e14b39942da6",
								"exec": [
									"pm.environment.set(\"program_description\", data.program_description );\r",
									"pm.environment.set(\"update_program_name\", data.update_program_name);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4ce9dcc6-0a6f-4d61-845d-422d3aa15ba2",
								"exec": [
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"var responseJson = pm.response.json(); \r",
									"pm.test(\"Test the data type\", () => {\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"   \r",
									"})\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,401,404]);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"update_ProgramDescription_ByprogramID_Positive\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fd8bad10-3afd-4135-8688-b471db8180f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_descp}}\",\r\n\"programName\":\"{{update_program_name}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/program/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "update_ProgramDescription_ByprogramID_Positive",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"update_program_description\", data.update_program_description );\r",
									"pm.environment.set(\"program_nm\", data.program_nm);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "8c7e0b66-206e-4027-9d6e-4eaa40688a97"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"update_InvalidProgramDescription_ByprogramID_Negative\");"
								],
								"type": "text/javascript",
								"id": "a7d8f2a1-953d-4c3f-a50d-7adb771fb82d"
							}
						}
					],
					"id": "375c54ed-1f6a-4d1f-b247-cb3784fb61ec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{update_program_description}}\",\r\n\"programName\":\"{{program_Name}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/putprogram/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "update_InvalidProgramDescription_ByprogramID_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"int\", data.int );\r",
									"pm.environment.set(\"program_nm\", data.program_nm);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "9cffcbef-7ffc-4510-995d-65ad2c33856a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"var responseJson = pm.response.json(); \r",
									"pm.test(\"Test the data type\", () => {\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"   \r",
									"})\r",
									"\r",
									"pm.test(\"Unsuccessful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eql(400);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"update_invalidProgramName_ByProgramID_negative\");"
								],
								"type": "text/javascript",
								"id": "2f47c2e2-67da-4d99-9492-7f9278bc475d"
							}
						}
					],
					"id": "9e9a0576-e4eb-4680-b34c-ab071d3650af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{int}}\",\r\n\"programName\":\"{{program_nm}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/putprogram/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "update_program_InvalidProgramID_negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7fb1d98b-1d30-4797-8a87-62d8746c5ffa",
								"exec": [
									"pm.environment.set(\"program_description\", data.program_description );\r",
									"pm.environment.set(\"update_program_name\", data.update_program_name);\r",
									"pm.environment.set(\"invalid_programId\", data.invalid_programId );\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aaf01abf-570d-4453-b276-b411b5430422",
								"exec": [
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome1\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome1\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome1\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Status not found\", ()=>{\r",
									"     pm.response.to.have.status(404);\r",
									"})\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Not Found');\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"update_programID_MissingName_negative\"); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5843cbe2-a613-49b7-8946-e074e1ad8200",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{program_nm}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/putprogram/{{invalid_programId}}"
					},
					"response": []
				},
				{
					"name": "update_programID_MissingStatus_negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"program_description\", data.program_description );\r",
									"pm.environment.set(\"program_nm\", data.program_nm);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "56959bd1-41fe-41cd-b500-ea8f87452657"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema= {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome3\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome3\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome3\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Status Bad Request\", ()=>{\r",
									"     pm.response.to.have.status(400);\r",
									"})\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Bad Request');\r",
									"});\r",
									"postman.setNextRequest(\"update_programID_MissingName_negative\");"
								],
								"type": "text/javascript",
								"id": "115430cd-db50-46f1-809f-393fe5f6e86d"
							}
						}
					],
					"id": "24f4d561-032c-471b-a801-a647dddb085f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{program_nm}}\",\r\n\"programStatus\":\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/putprogram/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "update_programID_MissingName_negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"program_description\", data.program_description );\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "cde7bdbe-652c-4674-a6df-d011e60f8784"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome3\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome3\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome3\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"pm.test(\"Status Bad Request\", ()=>{\r",
									"     pm.response.to.have.status(400);\r",
									"})\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Bad Request');\r",
									"});\r",
									"postman.setNextRequest(\"Create_Batch_Positive\");"
								],
								"type": "text/javascript",
								"id": "92794fb7-fb04-4f04-b843-cc04d7d4c3e4"
							}
						}
					],
					"id": "5aba65f1-b281-46d3-8e1f-3100848922aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":,\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/putprogram/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "update_invalidProgramName_ByProgramID_negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"program_description\", data.program_description );\r",
									"pm.environment.set(\"int\", data.int );\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "05732451-0f58-4f9a-b6a9-267c33c81db8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"pm.test(\"Status Bad Request\", ()=>{\r",
									"     pm.response.to.have.status(400);\r",
									"})\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Bad Request');\r",
									"});\r",
									"postman.setNextRequest(\"Create_Batch1_Positive\");"
								],
								"type": "text/javascript",
								"id": "54e4f325-a77e-4d5c-9c88-fecce911274c"
							}
						}
					],
					"id": "522217e7-fe18-4c47-9094-653e6d3374e1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{int}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/putprogram/{{program_id}}"
					},
					"response": []
				}
			],
			"id": "196208ad-8606-4240-8361-701ecbf8dbf3"
		},
		{
			"name": "BatchController_EndToEnd",
			"item": [
				{
					"name": "Create_Batch1_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test('Check status code', () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
									"})",
									"",
									"var schema = ",
									"{ \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"batchId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"batchName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchDescription\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchStatus\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchNoOfClasses\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"batchId\",",
									"    \"batchName\",",
									"    \"batchDescription\",",
									"    \"batchStatus\",",
									"    \"batchNoOfClasses\",",
									"    \"programId\",",
									"    \"programName\"",
									"  ]",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"// Variable setting",
									"const responseData = pm.response.json();  ",
									"pm.environment.set(\"btch_id\", responseData.batchId);",
									"pm.environment.set(\"btch_name\", responseData.batchName);",
									"pm.environment.set(\"btch_descp\", responseData.batchDescription);",
									"pm.environment.set(\"btch_size\", responseData.batchNoOfClasses);",
									"pm.environment.set(\"btch_status\", responseData.batchStatus);",
									"",
									"postman.setNextRequest(\"Create_Batch2_Positive\");"
								],
								"type": "text/javascript",
								"id": "21d6c626-1967-40d5-9d6c-977aaff2e01c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"batch_description\", data.batch_description );\r",
									"\r",
									"var data_csv = pm.iterationData.toObject(); \r",
									"var c1_nm = data_csv.batch_name;\r",
									"var randomInt = Math.floor(Math.random()*991);\r",
									"\r",
									"var conct_name = c1_nm+ randomInt;\r",
									"pm.collectionVariables.set(\"batch1_name\",conct_name );\r",
									"\r",
									"\r",
									"var num_classes =  data_csv.Batch_num_classes\r",
									"var randomclasses = Math.floor(Math.random()*5);\r",
									"\r",
									"var concat_class =  num_classes + randomclasses\r",
									"\r",
									"pm.collectionVariables.set(\"Batch_num_classes\", concat_class);\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "0f3e0843-91d3-45d9-9441-3735a22b815c"
							}
						}
					],
					"id": "2ecdda10-6edc-4b7a-93bb-f29f38e0b031",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{batch1_name}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "Create_Batch2_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test('Check status code', () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
									"})",
									"",
									"",
									"var schema = {",
									"     \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"batchId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"batchName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchDescription\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchStatus\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchNoOfClasses\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"batchId\",",
									"    \"batchName\",",
									"    \"batchDescription\",",
									"    \"batchStatus\",",
									"    \"batchNoOfClasses\",",
									"    \"programId\",",
									"    \"programName\"",
									"  ]",
									"}",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"// Variable setting",
									"const responseData = pm.response.json();  ",
									"pm.environment.set(\"btch2_id\", responseData.batchId);",
									"pm.environment.set(\"btch2_name\", responseData.batchName);",
									"pm.environment.set(\"btch2_descp\", responseData.batchDescription);",
									"pm.environment.set(\"btch2_size\", responseData.batchNoOfClasses);",
									"pm.environment.set(\"btch2_status\", responseData.batchStatus);",
									"",
									"postman.setNextRequest(\"ExistingBatch_Creation_Negative\");"
								],
								"type": "text/javascript",
								"id": "ea5ebe7a-4238-49c2-8774-e462d454228f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"batch_description\", data.batch_description );\r",
									"\r",
									"var data_csv = pm.iterationData.toObject(); \r",
									"\r",
									"var c2_nm = data_csv.c2_batch_name;\r",
									"\r",
									"var randomInt = Math.floor(Math.random()*991);\r",
									"\r",
									"var concat_name2 = c2_nm + randomInt;\r",
									"pm.collectionVariables.set(\"c2_batch2_name\", concat_name2 );\r",
									"\r",
									"\r",
									"var num_classes =  data_csv.Batch_num_classes\r",
									"var randomclasses = Math.floor(Math.random()*5);\r",
									"var concat_class =  num_classes + randomclasses\r",
									"pm.collectionVariables.set(\"Batch_num_classes\", concat_class);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.collectionVariables.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "ff71fd19-63ad-4587-bbf2-3e312206d2d2"
							}
						}
					],
					"id": "9ebcb618-d899-48dd-83cd-63bd4f38bf14",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{c2_batch2_name}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "ExistingBatch_Creation_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test('Check status code', () => {",
									"    pm.expect(pm.response.code).to.be.eql(400);",
									"})",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"message\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"success\": {",
									"      \"type\": \"boolean\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"message\",",
									"    \"success\"",
									"  ]",
									"}",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"",
									"postman.setNextRequest(\"Create_Batch_invalid_batchName_Negative\"); "
								],
								"type": "text/javascript",
								"id": "cd27337d-cad3-4c81-8792-11986b982fbe"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description );\r",
									"pm.environment.set(\"batch_name\", data.batch_name);\r",
									"pm.environment.set(\"Batch_num_classes\", data.Batch_num_classes);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "b26ba11c-1309-4b18-a715-9ecc0bd3944a"
							}
						}
					],
					"id": "e7561aa8-d509-45d2-9abc-4a5c91642339",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{btch2_descp}}\",\r\n\t\"batchName\": \"{{btch2_name}}\",\r\n\t\"batchNoOfClasses\": \"{{btch2_size}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "Create_Batch_invalid_batchName_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5bf4fa1-c9d7-4636-bb40-9f361123280a",
								"exec": [
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"false\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"message\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"success\": {",
									"      \"type\": \"boolean\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"message\",",
									"    \"success\"",
									"  ]",
									"}",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"// data type validation ",
									"",
									"pm.test(\"batchName is capturing with invalid characters \", function(){",
									"    pm.expect(pm.response(batchName)).to.be.string",
									"})",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"postman.setNextRequest(\"Create_Batch_invalid_Int_batchName_Negative\"); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5cad3123-e0c7-4a55-8d21-d0e16525088e",
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description );\r",
									"pm.environment.set(\"invalid_batch_name\", data.invalid_batch_name);\r",
									"pm.environment.set(\"Batch_num_classes\", data.Batch_num_classes);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7924b5e3-c92e-4411-8067-3d0ca6d544ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{invalid_batch_name}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "Create_Batch_invalid_Int_batchName_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5bf4fa1-c9d7-4636-bb40-9f361123280a",
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"message\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"success\": {",
									"      \"type\": \"boolean\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"message\",",
									"    \"success\"",
									"  ]",
									"}",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"// data type validation ",
									"",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"postman.setNextRequest(\"Create_Batch_Invalid_Endpoint_negative\"); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5cad3123-e0c7-4a55-8d21-d0e16525088e",
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description );\r",
									"pm.environment.set(\"int\", data.int);\r",
									"pm.environment.set(\"Batch_num_classes\", data.Batch_num_classes);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cca0d878-52d9-456e-8422-7d6947dca826",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{int}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "Create_Batch_Invalid_Endpoint_negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecaecce9-e5a5-4fdd-9818-0c9181914d3c",
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"timestamp\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"status\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"error\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"path\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"timestamp\",",
									"    \"status\",",
									"    \"error\",",
									"    \"path\"",
									"  ]",
									"}",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"postman.setNextRequest(\"Create_Batch_Classes_String_Negative\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "53910e39-9c68-4455-998a-27cedeacbbf5",
								"exec": [
									"pm.environment.set(\"invalid_batchId\", data.invalid_batchId );\r",
									"pm.environment.set(\"batch_description\", data.batch_description );\r",
									"pm.environment.set(\"batch_name\", data.batch_name);\r",
									"pm.environment.set(\"Batch_num_classes\", data.Batch_num_classes);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e92909b1-14ec-4959-86b6-623cd29fe07d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{batch_name}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/{{invalid_batchId}}"
					},
					"response": []
				},
				{
					"name": "Create_Batch_Classes_String_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1941f95b-0dea-4285-b237-d46df3082540",
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"timestamp\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"status\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"error\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"path\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"timestamp\",",
									"    \"status\",",
									"    \"error\",",
									"    \"path\"",
									"  ]",
									"};",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"console.log(jsonData);",
									"postman.setNextRequest(\"Create_Batch_Status_Invalid _Negative\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c89f4f1-fc6c-4c82-be96-d9f54e2e4db0",
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description );\r",
									"pm.environment.set(\"batch_name\", data.batch_name);\r",
									"pm.environment.set(\"string\", data.string);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7c59bcea-0b02-4070-b8e7-efbfb800b520",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{batch_name}}\",\r\n\t\"batchNoOfClasses\": \"{{string}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "Create_Batch_Status_Invalid _Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01c76309-5c1f-4d6c-9a75-42008805d3f8",
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const schema ={",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"timestamp\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"status\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"error\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"path\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"timestamp\",",
									"    \"status\",",
									"    \"error\",",
									"    \"path\"",
									"  ]",
									"};",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"console.log(jsonData);",
									"postman.setNextRequest(\"Create_Batch_Missing_ProgramID_negative\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f246769f-9f91-440a-9a6c-12617f108309",
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description );\r",
									"pm.environment.set(\"batch_name\", data.batch_name);\r",
									"pm.environment.set(\"Batch_num_classes\", data.Batch_num_classes);\r",
									"pm.environment.set(\"batch_status_invalid\", data.batch_status_invalid);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b170e2ec-2315-4332-9a26-5dfb5d2d64cb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{batch_name}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes}}\",\r\n\t\"batchStatus\": \"{{batch_status_invalid}}\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "Create_Batch_Missing_ProgramID_negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66c06b51-5ee6-48cb-83c3-9b34234701d7",
								"exec": [
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"timestamp\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"status\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"error\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"path\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"timestamp\",",
									"    \"status\",",
									"    \"error\",",
									"    \"path\"",
									"  ]",
									"}",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"console.log(jsonData);",
									"",
									"postman.setNextRequest(\"create_Batch_BatchDisc_null _Negative\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b01f7f07-c581-4da4-9812-7461537a9270",
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description );\r",
									"pm.environment.set(\"batch_name\", data.batch_name);\r",
									"pm.environment.set(\"Batch_num_classes\", data.Batch_num_classes);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e623fca7-612d-4ee5-9ddb-09cf28a1d255",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_ds}}\",\r\n\t\"batchName\": \"{{batch_nm}}\",\r\n\t\"batchNoOfClasses\": \"{{batch_num}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\":\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "create_Batch_BatchDisc_null _Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff91690a-07b9-4b98-aff5-daeabd4788d3",
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const schema ={",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"timestamp\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"status\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"error\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"path\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"timestamp\",",
									"    \"status\",",
									"    \"error\",",
									"    \"path\"",
									"  ]",
									"}",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"console.log(responseData);",
									"postman.setNextRequest(\"GetBatch_BY Batch ID_ Postive\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4fee4939-c41d-4aa0-a755-c0f8ce188c28",
								"exec": [
									"\r",
									"pm.environment.set(\"batch_name\", data.batch_name);\r",
									"pm.environment.set(\"Batch_num_classes\", data.Batch_num_classes);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ee09c89e-4816-4a52-a144-4a78df0c19aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"\",\r\n\t\"batchName\": \"{{batch_nm}}\",\r\n\t\"batchNoOfClasses\": \"{{batch_num}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{prg_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "GetBatch_BY Batch ID_ Postive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"postman.setNextRequest(\"Get_Batch_BatchID_Negative\");"
								],
								"type": "text/javascript",
								"id": "da4215a6-a136-45cb-ac3f-d11884a5b950"
							}
						}
					],
					"id": "c0aa03ee-fce8-496a-85e7-2642e250240e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/batchId/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "Get_Batch_BatchID_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Batch not found\");",
									"});",
									"postman.setNextRequest(\"GetBatch_BatchName_Positive\");",
									""
								],
								"type": "text/javascript",
								"id": "77629187-c41c-4de3-9c17-48e24d1bd21e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"//var data_csv = pm.iterationData.toObject(); \r",
									"//pm.collectionVariables.set(\"invalid_endpoint\", data_csv.invalid_endpoint); "
								],
								"type": "text/javascript",
								"id": "7d420173-5932-4291-992f-5b92fabf7247"
							}
						}
					],
					"id": "0b2e40f6-d42b-4de1-b710-5f65b1439781",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/batchId/{{btch_id}}000"
					},
					"response": []
				},
				{
					"name": "GetBatch_BatchName_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"postman.setNextRequest(\"Get_Batch_BatchName_Negative\");"
								],
								"type": "text/javascript",
								"id": "5515f6c0-f60a-45ad-b087-12c47cb8b806"
							}
						}
					],
					"id": "e92948e3-7477-44ef-a4f4-5decbeb54fef",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/batchName/{{btch2_name}}"
					},
					"response": []
				},
				{
					"name": "Get_Batch_BatchName_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f08e2a72-0599-43cb-91f3-24766f0fbad9",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"postman.setNextRequest(\"GetBatch_ProgramID Positive\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "083bdf90-0cc4-4653-b315-e4b2622ee8c6",
								"exec": [
									"pm.environment.set(\"invalid_endpoint\", data.invalid_endpoint);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "81ad1ac5-f428-4d07-8580-579e46ea8947",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/batchName/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "GetBatch_ProgramID Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"postman.setNextRequest(\"GetBatch_ProgramID_Negative\");"
								],
								"type": "text/javascript",
								"id": "db6f363f-7d8d-4f05-884a-0abab12adec4"
							}
						}
					],
					"id": "53ccb1c6-2c22-4f3b-a133-fe6596480f3a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/program/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "GetBatch_ProgramID_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"postman.setNextRequest(\"UpdateBatch_BatchId_Positive\");"
								],
								"type": "text/javascript",
								"id": "46181065-4f16-4063-bcb1-d1892a6db6c2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalid_endpoint\", data.invalid_endpoint);"
								],
								"type": "text/javascript",
								"id": "da7ad7ce-7f6f-48a2-b09f-8b987ad8cf83"
							}
						}
					],
					"id": "7ef4b3a6-ea1f-4a00-9568-01a3a6ae9dcd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/program/{{btch2_id}}2323"
					},
					"response": []
				},
				{
					"name": "UpdateBatch_BatchId_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"var responseBody = pm.response.json(); ",
									"postman.setNextRequest(\"UpdateBatch_BatchDescri_Invalid_Negative\");",
									""
								],
								"type": "text/javascript",
								"id": "1e6c2780-548f-4da6-90cd-a2b882e8db48"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description);\r",
									"pm.environment.set(\"batch_Updatename\", data.batch_Updatename);\r",
									"pm.environment.set(\"Batch_num_classes_Updated\", data.Batch_num_classes_Updated);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "0c4e712d-d1a3-4625-b58e-840ec7ff640d"
							}
						}
					],
					"id": "c784ee29-9c88-4de1-b0c4-53738d251583",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{batch_Updatename}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes_Updated}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "UpdateBatch_BatchDescri_Invalid_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome10\",",
									"    \"definitions\": {",
									"        \"Welcome10\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"message\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"success\": {",
									"                    \"type\": \"boolean\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"message\",",
									"                \"success\"",
									"            ],",
									"            \"title\": \"Welcome10\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"postman.setNextRequest(\"UpdateBatch_BatchName_Null_Negative\");"
								],
								"type": "text/javascript",
								"id": "b0c54213-4daf-4580-89ae-d882580db34c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"int\", data.int);\r",
									"\r",
									"pm.environment.set(\"batch_Updatename\", data.batch_Updatename);\r",
									"pm.environment.set(\"Batch_num_classes_Updated\", data.Batch_num_classes_Updated);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "ca2c801f-c964-4600-bae2-39683518e23e"
							}
						}
					],
					"id": "22e2b921-6925-4df7-ba69-9d05ae29555a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{int}}\",\r\n\t\"batchName\": \"{{batch_Updatename}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes_Updated}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "UpdateBatch_BatchName_Null_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"batchName must begin with alphabet and can contain only alphanumeric characters\");",
									"});",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome6\",",
									"    \"definitions\": {",
									"        \"Welcome6\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"message\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"success\": {",
									"                    \"type\": \"boolean\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"message\",",
									"                \"success\"",
									"            ],",
									"            \"title\": \"Welcome6\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"postman.setNextRequest(\"Update_Batch_BatchName_Invalid_Negative\");",
									""
								],
								"type": "text/javascript",
								"id": "2b43b86e-23e3-425a-8f67-633015701459"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description);\r",
									"pm.environment.set(\"Batch_num_classes_Updated\", data.Batch_num_classes_Updated);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "064e3800-0653-4599-a4b3-fe021e000515"
							}
						}
					],
					"id": "f5df3012-ac04-4624-9b1f-2b1682b9a213",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes_Updated}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "Update_Batch_BatchName_Invalid_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"batchName must begin with alphabet and can contain only alphanumeric characters\");",
									"});",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome6\",",
									"    \"definitions\": {",
									"        \"Welcome6\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"message\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"success\": {",
									"                    \"type\": \"boolean\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"message\",",
									"                \"success\"",
									"            ],",
									"            \"title\": \"Welcome6\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"postman.setNextRequest(\"UpdateBatch_BatchNoClasses_Invalid_Negative\");"
								],
								"type": "text/javascript",
								"id": "efb73006-d7c5-4f9b-ba6a-36d428d26efe"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description);\r",
									"pm.environment.set(\"int\", data.int);\r",
									"pm.environment.set(\"Batch_num_classes_Updated\", data.Batch_num_classes_Updated);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "feab2ea9-4492-4504-aff9-2e612516efba"
							}
						}
					],
					"id": "db3d8328-14e2-4cb3-b348-ea023c981819",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{int}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes_Updated}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "UpdateBatch_BatchNoClasses_Invalid_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"batchId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"batchName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchDescription\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchStatus\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchNoOfClasses\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"batchId\",",
									"    \"batchName\",",
									"    \"batchDescription\",",
									"    \"batchStatus\",",
									"    \"batchNoOfClasses\",",
									"    \"programId\",",
									"    \"programName\"",
									"  ]",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"postman.setNextRequest(\"UpdateBatch_PgID_empty_Negative\");",
									""
								],
								"type": "text/javascript",
								"id": "d3357369-267d-4422-a044-de5062a13aed"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description);\r",
									"pm.environment.set(\"batch_Updatename\", data.batch_Updatename);\r",
									"pm.environment.set(\"string\", data.string);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "09504f4f-da7e-4254-a434-97643e907ea0"
							}
						}
					],
					"id": "2471712a-87da-4a18-ba17-14f4f0086cb8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{batch_Updatename}}\",\r\n\t\"batchNoOfClasses\": \"{{string}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "UpdateBatch_PgID_empty_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome3\",",
									"    \"definitions\": {",
									"        \"Welcome3\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"timestamp\": {",
									"                    \"type\": \"string\",",
									"                    \"format\": \"date-time\"",
									"                },",
									"                \"status\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"error\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"path\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"error\",",
									"                \"path\",",
									"                \"status\",",
									"                \"timestamp\"",
									"            ],",
									"            \"title\": \"Welcome3\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"postman.setNextRequest(\"Create_Staff_Positive\");"
								],
								"type": "text/javascript",
								"id": "bddd6d25-260c-41c3-be7d-5a61cbf4464d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description);\r",
									"pm.environment.set(\"batch_Updatename\", data.batch_Updatename);\r",
									"pm.environment.set(\"Batch_num_classes_Updated\", data.Batch_num_classes_Updated);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "20a4f2e8-7337-43f5-bf3a-d4f7e3b4d5f5"
							}
						}
					],
					"id": "2d1270cd-ea72-4279-aa26-6ae89b6b041e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{batch_Updatename}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes_Updated}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\":\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "DeleteBatch_BatID_Invalid_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fcba923-5269-4320-9da8-c244aeeecad8",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b68ff7ab-a10c-452d-af72-fafda979dd47",
								"exec": [
									"pm.environment.set(\"invalid_batchId\", data.invalid_batchId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "84db50c6-1e69-46df-900f-0ccfa7cb6a62",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/batches/{{invalid_batchId}}"
					},
					"response": []
				},
				{
					"name": "DeleteBatch_BatchID_Postive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"postman.setNextRequest(\"Create1_Batch_Positive\"); "
								],
								"type": "text/javascript",
								"id": "5164d909-a1be-405d-98ee-7f87902b67c3"
							}
						}
					],
					"id": "75d01491-907a-49d9-adc9-a78ca8ea86ab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/batches/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "Create1_Batch_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test('Check status code', () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
									"})",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome7\",",
									"    \"definitions\": {",
									"        \"Welcome7\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"batchId\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"batchName\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"batchDescription\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"batchStatus\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"batchNoOfClasses\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"programId\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"programName\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"batchDescription\",",
									"                \"batchId\",",
									"                \"batchName\",",
									"                \"batchNoOfClasses\",",
									"                \"batchStatus\",",
									"                \"programId\",",
									"                \"programName\"",
									"            ],",
									"            \"title\": \"Welcome7\"",
									"        }",
									"    }",
									"}",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"// Variable setting",
									"const responseData = pm.response.json();  ",
									"pm.environment.set(\"btch2_id\", responseData.batchId);",
									"pm.environment.set(\"btch2_name\", responseData.batchName);",
									"pm.environment.set(\"btch2_descp\", responseData.batchDescription);",
									"pm.environment.set(\"btch2_size\", responseData.batchNoOfClasses);",
									"pm.environment.set(\"btch2_status\", responseData.batchStatus);",
									"",
									"postman.setNextRequest(\"Create_Staff_Positive\");"
								],
								"type": "text/javascript",
								"id": "a33a717c-4127-46bd-a3c3-1ec2897cd335"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description );\r",
									"\r",
									"\r",
									"pm.environment.set(\"b_name\", data.batch_name);\r",
									"var name = pm.environment.get(\"b_name\");\r",
									"var conct_name = name +\"-\" + \"{{$randomInt}}\";\r",
									"pm.environment.set(\"batch_name\",conct_name );\r",
									"\r",
									"pm.environment.set(\"Batch_num_classes\", data.Batch_num_classes);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "733c8d12-e2e0-4d70-b58e-4f9a1977cb2f"
							}
						}
					],
					"id": "c2352033-bfbe-4ff5-8f04-efd77e42f116",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{batch_name}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				}
			],
			"id": "dd265986-f0fc-4bbd-a2b9-dcbf103a9eda"
		},
		{
			"name": "UserModule_EndToEnd",
			"item": [
				{
					"name": "Create_Staff_Positive",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9be278c6-dc6a-466b-968c-e818632cdc95",
								"exec": [
									"//Step 1: \r",
									"var data_csv = pm.iterationData.toObject(); \r",
									"\r",
									"//FirstName\r",
									"var f_nm = data_csv.Staff_first_name;\r",
									"var firstNm =   \"{{$randomFirstName}}\";\r",
									"\r",
									"var concat_name = f_nm+ firstNm;\r",
									"\r",
									"pm.collectionVariables.set(\"Staff_frst_name\",concat_name );\r",
									"\r",
									"//email\r",
									"var sf_email = data_csv.Staff_email_id; \r",
									"var email = concat_name + sf_email; \r",
									"pm.collectionVariables.set(\"Stff_email_id\", email);\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"visa_status\", data.visa_status);\r",
									"pm.collectionVariables.set(\"time_zone\", data.time_zone);\r",
									"\r",
									"// phone_Number\r",
									"var ph_num = data_csv.Staff_ph_num; \r",
									"var randomInt = _.random(1852372345, 9999999999);\r",
									"var concat_ph = ph_num + randomInt; \r",
									"pm.collectionVariables.set(\"Stff_ph_num\", concat_ph);\r",
									"\r",
									"//.environment.set(\"ph_nm\",_.random(1852372345, 9999999999));\r",
									"\r",
									"\r",
									"console.log(concat_ph+ \" ,\"+concat_name+ \" ,\"+email)\r",
									"//Iterationcount \r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.collectionVariables.set(\"total_records\", list); \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ef806462-f35c-4bbe-883d-2db45bd72e5a",
								"exec": [
									"var responseData = pm.response.json();",
									"",
									"pm.environment.set('Staff_id', responseData.userId)",
									"",
									"pm.environment.set('Staff_ph', responseData.userPhoneNumber)",
									"",
									"pm.environment.set('Staff_email', responseData.userLoginEmail)",
									"",
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"})",
									"",
									"pm.test('Status code name has string', function () {",
									"    pm.response.to.have.status('Created');",
									"})",
									"",
									"pm.test('Status Code', function () {",
									"    pm.expect(pm.response.to.have.status(201));",
									"})",
									"",
									"const responseJson = pm.response.json();",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"userId\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userFirstName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userLastName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userMiddleName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userPhoneNumber\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"userLocation\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userTimeZone\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userLinkedinUrl\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userEduUg\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userEduPg\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userComments\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userVisaStatus\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userLoginEmail\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"userId\",",
									"    \"userFirstName\",",
									"    \"userLastName\",",
									"    \"userMiddleName\",",
									"    \"userPhoneNumber\",",
									"    \"userLocation\",",
									"    \"userTimeZone\",",
									"    \"userLinkedinUrl\",",
									"    \"userEduUg\",",
									"    \"userEduPg\",",
									"    \"userComments\",",
									"    \"userVisaStatus\",",
									"    \"userLoginEmail\"",
									"  ]",
									"}",
									"",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"",
									"",
									"",
									"console.log(responseJson);",
									"postman.setNextRequest(\"Create_Staff_InvalidPhNumber-Negative\"); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6e06eca0-a5d6-46a0-9cb9-b31ffb0ef866",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Staff\",\r\n  \"userEduPg\": \"Biochemistry\",\r\n  \"userEduUg\": \"Microbiology\",\r\n  \"userFirstName\": \"{{Staff_frst_name}}\",\r\n  \"userId\": \"\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/api\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R02\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{Stff_email_id}}\"\r\n  },\r\n  \"userMiddleName\": \"Tester\",\r\n  \"userPhoneNumber\": \"{{Stff_ph_num}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R02\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Staff_InvalidPhNumber-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"Staff_first_name\", data.Staff_first_name );\r",
									"pm.environment.set(\"Staff_email_id\", data.Staff_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"Staff_ph_num\", data.Staff_ph_num);\r",
									"pm.environment.set(\"int\", data.int);\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "61ecdd6a-f7c2-4e16-9d25-8c2b4611f146"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData= pm.response.json(); \r",
									"\r",
									"/* Negative test shouldn't store any results\r",
									"pm.collectionVariables.set(\"us_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"us_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"us_email\", responseData.userLoginEmail);\r",
									"*/\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"Create_Staff_userFirstname-Empty_Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "7010cfc7-53c3-446c-a58b-edef76a8c556"
							}
						}
					],
					"id": "16558bd9-c43c-4b80-88d1-9ff220433da1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Staff\",\r\n  \"userEduPg\": \"Biochemistry\",\r\n  \"userEduUg\": \"Microbiology\",\r\n  \"userFirstName\": \"{{Staff_first_name}}\",\r\n  \"userId\": \"\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/api\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R02\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{Staff_email_id}}\"\r\n  },\r\n  \"userMiddleName\": \"Tester\",\r\n  \"userPhoneNumber\": \"{{int}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R02\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Staff_userFirstname-Empty_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"Staff_first_name\", data.Staff_first_name );\r",
									"pm.environment.set(\"Staff_email_id\", data.Staff_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"Staff_ph_num\", data.Staff_ph_num);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "f2fb63dc-4256-4b6a-b331-403e2d38bef0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData= pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"us_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"us_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"us_email\", responseData.userLoginEmail);\r",
									"*/\r",
									"\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Create_Staff_userFirstname_Missing-Negative\"); \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "2cb2c45a-256d-45c3-b082-c2cb7884d57c"
							}
						}
					],
					"id": "348ba90e-a63d-437c-be4d-a43c6925b63c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Staff\",\r\n  \"userEduPg\": \"Biochemistry\",\r\n  \"userEduUg\": \"Microbiology\",\r\n  \"userFirstName\": \"\",\r\n  \"userId\": \"\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/api\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R02\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{Staff_email_id}}\"\r\n  },\r\n  \"userMiddleName\": \"Tester\",\r\n  \"userPhoneNumber\": \"{{Staff_ph_num}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R02\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Staff_userFirstname_Missing-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"Staff_first_name\", data.Staff_first_name );\r",
									"pm.environment.set(\"Staff_email_id\", data.Staff_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"Staff_ph_num\", data.Staff_ph_num);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "659c83cc-e17c-4199-8079-6b195a136001"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData= pm.response.json(); \r",
									"\r",
									"/*\r",
									"pm.collectionVariables.set(\"us_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"us_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"us_email\", responseData.userLoginEmail);\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"*/\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Create_Staff_userFirstname_Invalid-Negative\"); \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "a2d28a06-7a49-4e0f-99e6-3377b678b624"
							}
						}
					],
					"id": "8ddb8f96-40fb-4703-b009-a4ff29bf8d41",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Staff\",\r\n  \"userEduPg\": \"Biochemistry\",\r\n  \"userEduUg\": \"Microbiology\",\r\n  \"userFirstName\": ,\r\n  \"userId\": \"\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/api\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R02\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{Staff_email_id}}\"\r\n  },\r\n  \"userMiddleName\": \"Tester\",\r\n  \"userPhoneNumber\": \"{{Staff_ph_num}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R02\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Staff_userFirstname_Invalid-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"Staff_first_name\", data.Staff_first_name );\r",
									"pm.environment.set(\"Staff_email_id\", data.Staff_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"Staff_ph_num\", data.Staff_ph_num);\r",
									"pm.environment.set(\"invalid_First_nm\", data.invalid_First_Name);\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "63bf8ea7-7064-41e3-8f27-bd8426f37319"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData= pm.response.json(); \r",
									"\r",
									"/*\r",
									"pm.collectionVariables.set(\"us_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"us_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"us_email\", responseData.userLoginEmail);\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"*/\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_postive\"); \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "34a2ca72-31b5-4b34-96e3-dfccdd41bb13"
							}
						}
					],
					"id": "8c09b51e-4ea3-43e6-ae6b-777f9d3950cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Staff\",\r\n  \"userEduPg\": \"Biochemistry\",\r\n  \"userEduUg\": \"Microbiology\",\r\n  \"userFirstName\": \"{{invalid_First_nm}}\",\r\n  \"userId\": \"\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/api\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R02\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{Staff_email_id}}\"\r\n  },\r\n  \"userMiddleName\": \"Tester\",\r\n  \"userPhoneNumber\": \"{{Staff_ph_num}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R02\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_postive",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cf4836d9-9377-4e1c-a4dd-135d1fcad6d5",
								"exec": [
									"\r",
									"//Step 1: \r",
									"var data_csv = pm.iterationData.toObject(); \r",
									"\r",
									"//FirstName\r",
									"var f_nm = data_csv.Student_first_Name;\r",
									"var firstNm =   \"{{$randomFirstName}}\";\r",
									"var concat_name = f_nm+ firstNm;\r",
									"\r",
									"pm.collectionVariables.set(\"first_nm_stud\",concat_name );\r",
									"\r",
									"//email\r",
									"var sd_email = data_csv.Student_email_id; \r",
									"var email = concat_name + sd_email; \r",
									"pm.collectionVariables.set(\"Stud_email_id\", email);\r",
									"\r",
									"pm.collectionVariables.set(\"visa_status\", data.visa_status);\r",
									"pm.collectionVariables.set(\"time_zone\", data.time_zone);\r",
									"\r",
									"\r",
									"// phone_Number\r",
									"var ph_num = data_csv.Student_ph_num; \r",
									"//var randomInt = Math.floor(Math.random()*999999999);\r",
									"var randomInt = _.random(1852372345, 9999999999);\r",
									"var concat_ph = ph_num + randomInt; \r",
									"pm.collectionVariables.set(\"Stud_ph_num\", concat_ph);\r",
									"\r",
									"console.log(concat_ph+ \" ,\"+concat_name+ \" ,\"+email)\r",
									"//Iterationcount \r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.collectionVariables.set(\"total_records\", list); \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "68cf73f1-dee0-4ba8-8752-1e92ea1fbe5e",
								"exec": [
									"var responseData = pm.response.json();\r",
									"\r",
									"pm.environment.set('std_id', responseData.userId);\r",
									"\r",
									"pm.environment.set('std_ph', responseData.userPhoneNumber);\r",
									"\r",
									"pm.environment.set('std_email', responseData.userLoginEmail);\r",
									"\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"pm.test('Status Code', function () {\r",
									"    pm.expect(pm.response.to.have.status(201));\r",
									"})\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userFirstName\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userLastName\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userMiddleName\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userPhoneNumber\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"userLocation\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userTimeZone\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userLinkedinUrl\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userEduUg\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userEduPg\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userComments\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userVisaStatus\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userLoginEmail\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userId\",\r",
									"    \"userFirstName\",\r",
									"    \"userLastName\",\r",
									"    \"userMiddleName\",\r",
									"    \"userPhoneNumber\",\r",
									"    \"userLocation\",\r",
									"    \"userTimeZone\",\r",
									"    \"userLinkedinUrl\",\r",
									"    \"userEduUg\",\r",
									"    \"userEduPg\",\r",
									"    \"userComments\",\r",
									"    \"userVisaStatus\",\r",
									"    \"userLoginEmail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test('Test the data type', () => {\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Missing-email-Negative\"); \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "31a5e5ab-c83d-4e7d-8240-0a6e0ec7416c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{first_nm_stud}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{Stud_email_id}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{Stud_ph_num}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Missing-email-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "f6c78052-ba01-4660-90c6-5c2620f213df"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/   \r",
									"\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Empty-email-Negative\"); "
								],
								"type": "text/javascript",
								"id": "5f7ecb15-8a89-4ebe-bcb1-ddf832215512"
							}
						}
					],
					"id": "c486c702-9c9c-43b6-8d84-79be521d4138",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{frst_nm_std}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{std_ph}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Empty-email-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "30ac457b-a3ee-4118-9029-8250a34e7152"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/   \r",
									"\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Invalid-email-Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "b93072cc-6f32-482f-b9ce-89ce92245de7"
							}
						}
					],
					"id": "83088132-1832-4b4e-b334-f4116005a90a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{frst_nm_std}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{std_ph}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Invalid-email-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"pm.environment.set(\"invalid_email\", data.invalid_email);\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "ebb5bbb3-4bc4-4a5c-8357-bb59f28ac192"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/   \r",
									"\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Empty-userFirstname-Negative\"); "
								],
								"type": "text/javascript",
								"id": "31509afd-19f4-4d32-a4d7-d5c16d0c1948"
							}
						}
					],
					"id": "2904c293-c15f-4777-af00-7598530cc966",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{frst_nm_std}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{invalid_email}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{std_ph}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Empty-userFirstname-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "6fe60c9c-ca34-465d-a375-a9359dc7d2c5"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/\r",
									"\r",
									" pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Missing-userFirstname-Negative\"); "
								],
								"type": "text/javascript",
								"id": "f46657e9-fa96-484a-b5ad-7dabbbb1c7ce"
							}
						}
					],
					"id": "807bc7f1-0565-456b-bb05-1fd86ebed9a3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id_std}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{std_ph}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Missing-userFirstname-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "f077b7b6-048a-4552-acfe-3a9113a66733"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/\r",
									"\r",
									" pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Invalid-userFirstname-Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "1ec17fa1-cbba-4fab-b982-39e5e449120b"
							}
						}
					],
					"id": "2f5a0b17-66cf-468e-b1cf-21ac9aa55543",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": ,\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id_std}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{std_ph}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Invalid-userFirstname-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"pm.environment.set(\"invalid_First_nm\", data.invalid_First_Name);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "4527fef7-749d-442d-bffc-7dc4e0a562b4"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/\r",
									"\r",
									" pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Missing_Phno-Negative\"); "
								],
								"type": "text/javascript",
								"id": "a364c3df-e92b-43d5-8ffe-e1a70a3c0702"
							}
						}
					],
					"id": "df7102da-659a-415e-b256-9f5351d5da88",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{invalid_First_nm}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id_std}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{std_ph}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Missing_Phno-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "34cf572c-e268-4c0a-a925-af761bd52878"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/\r",
									"\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Empty_Phno-Negative\"); "
								],
								"type": "text/javascript",
								"id": "d2104dc9-a70f-4c0f-895d-1093b7ddfd16"
							}
						}
					],
					"id": "b1910957-a090-458b-b239-45f294928415",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{frst_nm_std}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id_std}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": ,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Empty_Phno-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "f67bf65b-f83f-41a0-aa31-7625d1f88565"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/\r",
									"   \r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Invalid_Phno-Negative\"); "
								],
								"type": "text/javascript",
								"id": "044960bf-e679-4503-9fd7-ad515b4bc0cb"
							}
						}
					],
					"id": "f036cdb6-40c7-418d-9a13-5fa45da3f4ad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{frst_nm_std}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id_std}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Invalid_Phno-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"pm.environment.set(\"invalid_phone\", data.invalidphone);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "d4b34872-c02e-4308-b9e2-fcbee2c49c46"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/\r",
									"   \r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"All Users _positive\"); "
								],
								"type": "text/javascript",
								"id": "28cd73ee-5b1a-44af-98e8-b0d0c76c0e52"
							}
						}
					],
					"id": "62b70d23-7ec3-453d-9d8e-3772b18de51d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{frst_nm_std}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id_std}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{invalid_phone}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "All Users _positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"postman.setNextRequest(\"All Users _With-Noauth-Negative\");"
								],
								"type": "text/javascript",
								"id": "b84fded9-9d93-4580-bf6f-8900babb2a39"
							}
						}
					],
					"id": "4fbf8e96-0141-43f3-bba2-7c4c93fe2417",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users"
					},
					"response": []
				},
				{
					"name": "All Users _With-Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Unauthorized\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Get All Users Invalid Endpoint-Negative\"); \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "0f693d20-3141-429b-994e-2c9079ee82a0"
							}
						}
					],
					"id": "53d60979-7153-4c62-bcb8-31168510bb5e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users"
					},
					"response": []
				},
				{
					"name": "Get All Users Invalid Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"All User Roles_positive\"); "
								],
								"type": "text/javascript",
								"id": "9240efc0-0855-4283-bf20-8a9feb10a3fe"
							}
						}
					],
					"id": "1b6a5bde-09c7-47b6-92e4-1a8a1d166c97",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "All User Roles_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"var keyCount  = Object.keys(jsonData).length;\r",
									"pm.collectionVariables.set(\"total_users\", keyCount);\r",
									"console.log(keyCount);})\r",
									"\r",
									"postman.setNextRequest(\"All User Roles_Noauth-Negative\");"
								],
								"type": "text/javascript",
								"id": "964cafde-0463-4030-a66c-15ff245800c4"
							}
						}
					],
					"id": "a4c9cbb1-a701-4cfe-a7c9-0321a234f1fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/roles"
					},
					"response": []
				},
				{
					"name": "All User Roles_Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Unauthorized\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"All User Roles_Invalid-Endpoint-Negative\"); "
								],
								"type": "text/javascript",
								"id": "ba585ee2-432e-4bad-9c91-284d0a2b3797"
							}
						}
					],
					"id": "77fe344f-43ff-4fb2-b944-0d3777741f91",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/roles"
					},
					"response": []
				},
				{
					"name": "All User Roles_Invalid-Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Get User information_ UserId_Positive\"); "
								],
								"type": "text/javascript",
								"id": "b7cc6786-ec98-49fd-8849-a7118fd634d7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalid_endpoint\", data.invalid_endpoint );"
								],
								"type": "text/javascript",
								"id": "3d4e14ae-047a-467b-91ca-1d63c3564b19"
							}
						}
					],
					"id": "d219318c-c457-4a92-93d1-e51959fe3abb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Get User information_ UserId_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"user\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userFirstName\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userLastName\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userMiddleName\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userPhoneNumber\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"userLocation\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userTimeZone\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userLinkedinUrl\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userEduUg\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userEduPg\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userComments\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userVisaStatus\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userLoginEmail\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"userFirstName\",\r",
									"        \"userLastName\",\r",
									"        \"userMiddleName\",\r",
									"        \"userPhoneNumber\",\r",
									"        \"userLocation\",\r",
									"        \"userTimeZone\",\r",
									"        \"userLinkedinUrl\",\r",
									"        \"userEduUg\",\r",
									"        \"userEduPg\",\r",
									"        \"userComments\",\r",
									"        \"userVisaStatus\",\r",
									"        \"userLoginEmail\"\r",
									"      ]\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"uniqueItems\": true,\r",
									"      \"minItems\": 1,\r",
									"      \"items\": {\r",
									"        \"required\": [\r",
									"          \"roleId\",\r",
									"          \"userRoleStatus\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"          \"roleId\": {\r",
									"            \"type\": \"string\",\r",
									"            \"minLength\": 1\r",
									"          },\r",
									"          \"userRoleStatus\": {\r",
									"            \"type\": \"string\",\r",
									"            \"minLength\": 1\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"user\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Get User information_ UserId_Noauth-Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "dfa3b821-70c6-4bc8-8c69-1ee606f4ccc0"
							}
						}
					],
					"id": "8d60c919-3ed6-4aab-b00e-7ad22067cb3f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Get User information_ UserId_Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Unauthorized\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Get User information_ UserId_Invalid-Userid-Negative\"); "
								],
								"type": "text/javascript",
								"id": "fbe7d1a7-b8a9-4027-b676-7a020ce56167"
							}
						}
					],
					"id": "2e7b9a22-79e8-4f7c-bea8-dfc0792197c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Get User information_ UserId_Invalid-Userid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"postman.setNextRequest(\"Get all Users with roles_Positive\"); "
								],
								"type": "text/javascript",
								"id": "bfaf4311-d9bd-49db-97fa-9f0c4d9e9bb4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "cabb3f2a-ae01-471a-b977-04cb4dcdc93a"
							}
						}
					],
					"id": "e6d64212-faf3-4e94-9b36-6787e48247fb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}000"
					},
					"response": []
				},
				{
					"name": "Get all Users with roles_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"});\r",
									"postman.setNextRequest(\"Get all Users with roles_Noauth-Negative\"); "
								],
								"type": "text/javascript",
								"id": "b0ccc331-0b05-4897-b982-638957cfef50"
							}
						}
					],
					"id": "27ae7986-40e3-42e6-ba35-2b03024a08a2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/roles"
					},
					"response": []
				},
				{
					"name": "Get all Users with roles_Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Unauthorized\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Get all Users with roles_Invalid-Endpoint-Negative\"); "
								],
								"type": "text/javascript",
								"id": "6afd4d07-dbe0-4a75-9887-25f4f6850e5e"
							}
						}
					],
					"id": "6b4bcc84-a8dd-47b3-ad29-713b8c9cdbe8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/roles"
					},
					"response": []
				},
				{
					"name": "Get all Users with roles_Invalid-Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Count_active_Inactive_positive\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "1ae206fe-93db-4a3a-a78a-aded47aec3d9"
							}
						}
					],
					"id": "a287486e-e1c0-4224-aeb6-0fd40f1dbb6b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Count_active_Inactive_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"var keyCount  = Object.keys(jsonData).length;\r",
									"console.log(keyCount);})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"});\r",
									"\r",
									"/*\r",
									"added by BK\r",
									"*/\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"var keyCount  = Object.keys(jsonData).length;\r",
									"console.log(keyCount);\r",
									"pm.collectionVariables.set(\"active_users\", keyCount)\r",
									"});\r",
									"console.log(pm.collectionVariables.get(\"total_users\"));\r",
									"console.log(pm.collectionVariables.get(\"active_users\"));\r",
									"Active_users = pm.collectionVariables.get(\"active_users\");\r",
									"var Inactive_users = pm.collectionVariables.get(\"total_users\") - pm.collectionVariables.get(\"active_users\");\r",
									"console.log(\"Number of Inactive User : \" + Inactive_users);\r",
									"console.log(\"Number of Active User : \" +  Active_users);\r",
									"\r",
									"postman.setNextRequest(\"Count_active_NoAuth_Negative\"); "
								],
								"type": "text/javascript",
								"id": "95a7a7a6-c19f-404c-9f01-e5b333450d8c"
							}
						}
					],
					"id": "dc469e83-7c53-42fc-a756-ddcc76a51995",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/activeUsers"
					},
					"response": []
				},
				{
					"name": "Count_active_NoAuth_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"var keyCount  = Object.keys(jsonData).length;\r",
									"console.log(keyCount);})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Unauthorized\");\r",
									"    });\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Count_activ_-Invalid-Endpoint-Negative\"); "
								],
								"type": "text/javascript",
								"id": "608a0928-161e-467b-abeb-e764248ef3ce"
							}
						}
					],
					"id": "5073e8e5-212e-4c72-8351-ef1ee0285aad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/activeUsers"
					},
					"response": []
				},
				{
					"name": "Count_activ_-Invalid-Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"var keyCount  = Object.keys(jsonData).length;\r",
									"console.log(keyCount);})\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Update_userRoleProgram_BatchStatus_postive\"); "
								],
								"type": "text/javascript",
								"id": "a4e5aa9d-43ca-481a-9f05-db121e845d1f"
							}
						}
					],
					"id": "b3c7e864-6179-46a3-ac8c-25d568669c2b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_postive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Update_userRoleProgram_BatchStatus_Inactive_Negative\"); "
								],
								"type": "text/javascript",
								"id": "452c6c99-48f0-4b68-a6f2-df05fa45bcec"
							}
						}
					],
					"id": "1c5857c7-1d48-412c-99d6-1bbcd8de4d00",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{program_id}}\",\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"{{btch2_id}}\",\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_Inactive_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Update_userRoleProgram_BatchStatus_missing-batchid-Negative\"); \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "335ff790-9236-422f-8dfd-a3ebce63d684"
							}
						}
					],
					"id": "3e7c735d-c547-4246-89be-fe66dee853fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{program_id}}\",\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"{{btch_id}}\",\r\n      \"userRoleProgramBatchStatus\": \"Inactive\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_missing-batchid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Update_userRoleProgram_BatchStatus_empty-prgid-Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "42dfc0d2-bd57-4200-8b4b-d4767c35afd8"
							}
						}
					],
					"id": "b3e8378c-f1b2-440b-8e47-1f26aa807edd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{program_id}}\",\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"\",\r\n      \"userRoleProgramBatchStatus\": \"Inactive\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_empty-prgid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Update_userRoleProgram_BatchStatus_Invalid-Roleid-Negative\"); "
								],
								"type": "text/javascript",
								"id": "e9ec2d1a-287d-4be0-96ec-7bbb26a457b4"
							}
						}
					],
					"id": "49f88334-7df9-4f24-8f80-4488fe30fa02",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"\",\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"{{btch_id}}\",\r\n      \"userRoleProgramBatchStatus\": \"Inactive\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_Invalid-Roleid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Gets User by Program Batches\"); "
								],
								"type": "text/javascript",
								"id": "169c9709-c807-43b5-b3c1-9bd30ec2e13b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalidroldID\", data.invalidroldID );"
								],
								"type": "text/javascript",
								"id": "5de09a76-dc43-4b10-9b80-c14239f5dd16"
							}
						}
					],
					"id": "c3b7e69a-35b3-4eab-9a41-91d135b8afeb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{program_id}}\",\r\n  \"roleId\": \"{{invalidroldID}}\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"{{btch_id}}\",\r\n      \"userRoleProgramBatchStatus\": \"Inactive\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Gets User by Program Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Gets User by Program Batches-Noauth-Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "7c24165d-6435-4019-bda0-165cdecac8c7"
							}
						}
					],
					"id": "8e48ad15-0f88-4185-b4b5-0a7cbb88800b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programBatch/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "Gets User by Program Batches-Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Gets User by Program Batches-Invalid Endpoint-Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "737d38b8-840c-4b9f-b8f9-5cd0e0c55132"
							}
						}
					],
					"id": "826b5507-2d0f-4f3f-8308-9e145031c652",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programBatch/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "Gets User by Program Batches-Invalid Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Gets Users for Program_positive\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "4f18d075-e8f6-4e8e-ab22-4cf64993e59c"
							}
						}
					],
					"id": "1adaad6e-ef71-4538-ba72-4b3cb6e398f3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programBatch/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Gets Users for Program_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Gets Users for Program_No auth-Negative\"); "
								],
								"type": "text/javascript",
								"id": "39cf9622-c636-4178-8caa-6b760ac7ae55"
							}
						}
					],
					"id": "49e17c17-89f2-48f5-b5b6-1ca4baa39d1b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programs/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "Gets Users for Program_No auth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"var schema  = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Gets Users for Program_Invalid-endpoint-Negative\"); "
								],
								"type": "text/javascript",
								"id": "286ca6c6-6c84-4aa8-8609-e393b80a52fc"
							}
						}
					],
					"id": "31137acd-2c90-4476-a463-cfdcd52b9e10",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programs/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "Gets Users for Program_Invalid-endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Gets Users by RoleID_R03 Positive\"); "
								],
								"type": "text/javascript",
								"id": "489dc6e9-fd9b-4136-b350-97ad9e4be51b"
							}
						}
					],
					"id": "cbad502c-9b03-48c2-af66-732772ceaf00",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programs/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Gets Users by RoleID_R03 Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Gets Users by RoleID_R03-Noauth-Negative\"); "
								],
								"type": "text/javascript",
								"id": "7a901c75-6ccd-4a1d-ae49-2a0e9fc6ecfc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"RoleID\", data.RoleID );\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "9fd170e3-0337-4dfa-b866-dd80b109ebd7"
							}
						}
					],
					"id": "b0ffd37b-6932-4590-ad9e-c760dfb5e79e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/roles/{{RoleID}}"
					},
					"response": []
				},
				{
					"name": "Gets Users by RoleID_R03-Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Gets Users by roleId Invalid Endpoint-Negative\"); "
								],
								"type": "text/javascript",
								"id": "a64d3f78-23b0-433e-ab8c-2dd6b30f01d5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"RoleID\", data.RoleID );\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "c479c61d-6fbe-4db0-8f32-c1b4c1c89152"
							}
						}
					],
					"id": "08dc53e2-7fde-4e98-95a2-91e00243bbf9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/roles/{{RoleID}}"
					},
					"response": []
				},
				{
					"name": "Gets Users by roleId Invalid Endpoint-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "0aee35db-59d0-4883-8a73-0512c70f7fd1"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Gets Users by roleId V2_postive\"); "
								],
								"type": "text/javascript",
								"id": "063ba24a-a654-45eb-823c-2a53151ad8f0"
							}
						}
					],
					"id": "5f2dce8d-5eb4-4289-bf3a-147e72d31b13",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/roles/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Gets Users by roleId V2_postive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Gets Users by roleId V2_No auth-Negative\"); "
								],
								"type": "text/javascript",
								"id": "fed0998f-4b6c-4213-9696-42c0baf859b4"
							}
						}
					],
					"id": "648d5e63-0dbe-4439-9535-d4965a061087",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/v2/users"
					},
					"response": []
				},
				{
					"name": "Gets Users by roleId V2_No auth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Gets Users by roleId V2 Invalid Endpoint-Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "a6262d6f-beb2-48b6-9dc6-87e52e6f9df8"
							}
						}
					],
					"id": "72d01c0b-a6ab-4744-b3ab-851b425730ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/v2/users"
					},
					"response": []
				},
				{
					"name": "Gets Users by roleId V2 Invalid Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"postman.setNextRequest(\"Update_Student_Location_Positive\"); "
								],
								"type": "text/javascript",
								"id": "11fade70-f683-402a-9bc0-236f21ca7a46"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalid_endpoint\", data.invalid_endpoint );"
								],
								"type": "text/javascript",
								"id": "bff60f0c-8ccb-47aa-a24d-fe65dfd9248b"
							}
						}
					],
					"id": "757823a8-d83b-4e2a-83b5-4280bea6d2e5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/v2/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Update_Student_Location_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Existing Batch\");\r",
									"});\r",
									"pm.test(\"Update User Location\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.batchId).to.eql(8773);\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"March24-API HEXA-DA-SDET01-003\");\r",
									"});\r",
									"*/\r",
									"\r",
									"postman.setNextRequest(\"Update User_user-phonenumber-missing integer-Negative\"); "
								],
								"type": "text/javascript",
								"id": "f2db7064-fe7d-4ff1-96b4-85ce17262bd5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"pm.environment.set(\"new_location\",data.NW_Location);\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "52517402-9ae0-44d7-8d1d-0d863c3b7272"
							}
						}
					],
					"id": "9bfe892d-8882-4989-8bd3-29fd24bdcc71",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"userId\": \"{{std_id}}\",\r\n        \"userFirstName\": \"{{frst_nm_std}}\",\r\n        \"userLastName\": \"Goi\",\r\n        \"userMiddleName\": \"GAh\",\r\n        \"userPhoneNumber\": \"{{std_ph}}\",\r\n        \"userLocation\": \"{{new_location}}\",\r\n        \"userTimeZone\": \"{{time_zone}}\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/hopeisbest\",\r\n        \"userEduUg\": \"BBA\",\r\n        \"userEduPg\": \"MBA\",\r\n        \"userComments\": \"ok\",\r\n        \"userVisaStatus\": \"{{visa_status}}\",\r\n        \"userLoginEmail\": \"{{email_id_std}}\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update User_user-phonenumber-missing integer-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Update User_wrong-visa status-Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "33f59ff6-7aae-443c-a30e-faadd72f11c9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalidphone\", data.invalidphone);\r",
									"\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"Student_email_id\", data.Student_email_id);"
								],
								"type": "text/javascript",
								"id": "7e087dbd-32a3-472d-b1f3-633c0403774b"
							}
						}
					],
					"id": "c6c89d43-273c-4bd9-b88f-a64396c8eac4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"userId\": \"{{std_id}}\",\r\n        \"userFirstName\": \"sam\",\r\n        \"userLastName\": \"goi\",\r\n        \"userMiddleName\": \"GAh\",\r\n        \"userPhoneNumber\": \"{{invalidphone}}\",\r\n        \"userLocation\": \"EST\",\r\n        \"userTimeZone\": \"IST\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/hopeisbest\",\r\n        \"userEduUg\": \"BBA\",\r\n        \"userEduPg\": \"MBA\",\r\n        \"userComments\": \"ok\",\r\n        \"userVisaStatus\": \"{{visa_status}}\",\r\n        \"userLoginEmail\": \"{{Student_email_id}}\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update User_wrong-visa status-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema  = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Update User_Location_Empty-string-userFirstName-Negative\"); "
								],
								"type": "text/javascript",
								"id": "5d45235d-7510-4d29-b6e4-4a27b238652c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalidvisa\", data.invalidvisa)"
								],
								"type": "text/javascript",
								"id": "1d72a054-d931-4463-a4e4-d1b22e1ac0ee"
							}
						}
					],
					"id": "fe82ae78-1c39-4045-85f1-dc5319fd4de5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"userId\": \"{{std_id}}\",\r\n        \"userFirstName\": \"sam\",\r\n        \"userLastName\": \"goi\",\r\n        \"userMiddleName\": \"GAh\",\r\n        \"userPhoneNumber\": 7894561233,\r\n        \"userLocation\": \"EST\",\r\n        \"userTimeZone\": \"IST\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/hopeisbest\",\r\n        \"userEduUg\": \"BBA\",\r\n        \"userEduPg\": \"MBA\",\r\n        \"userComments\": \"ok\",\r\n        \"userVisaStatus\": \"{{invalidvisa}}\",\r\n        \"userLoginEmail\": \"swa@gmail.com\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update User_Location_Empty-string-userFirstName-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Update User Role Status_Std_positive\"); "
								],
								"type": "text/javascript",
								"id": "3192b6ab-4c10-4507-ad5f-bc58e1cbec92"
							}
						}
					],
					"id": "ef44695c-4d54-4f9a-88f4-08f43caf976f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"userId\": \"{{std_id}}\",\r\n        \"userFirstName\": \"\",\r\n        \"userLastName\": \"Goi\",\r\n        \"userMiddleName\": \"GAh\",\r\n        \"userPhoneNumber\": 7894561233,\r\n        \"userLocation\": \"EST\",\r\n        \"userTimeZone\": \"IST\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/hopeisbest\",\r\n        \"userEduUg\": \"BBA\",\r\n        \"userEduPg\": \"MBA\",\r\n        \"userComments\": \"ok\",\r\n        \"userVisaStatus\": \"H4\",\r\n        \"userLoginEmail\": \"Bestofbest@gmail.com\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update User Role Status_Std_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Update User Role Status_Std_wrong-Roleid-Negative\"); "
								],
								"type": "text/javascript",
								"id": "bd6b5dca-9089-4552-a6dd-67417f9b8bdf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"RoleID\", data.RoleID);"
								],
								"type": "text/javascript",
								"id": "7e9413fa-f8a1-4f79-a6a5-11de763d6caa"
							}
						}
					],
					"id": "fd4ce43f-6e12-4dc1-ab43-1f84ce0011eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"{{RoleID}}\",\r\n  \"userRoleStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update User Role Status_Std_wrong-Roleid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"postman.setNextRequest(\"Update User Role Status_Stf_positive\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "f1ac50bb-125a-4506-9c9d-497ddb628614"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"string\", data.string );"
								],
								"type": "text/javascript",
								"id": "a27caf4c-8da8-4f3e-9bf5-4502b616bdd9"
							}
						}
					],
					"id": "bc3cb24d-4ad9-48d5-9aa6-02751d98df82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"{{invalidroldID}}\",\r\n  \"userRoleStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus/{{string}}"
					},
					"response": []
				},
				{
					"name": "Update User Role Status_Stf_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Update User Role Status_Stf_Invalid-roleid-Negative\"); "
								],
								"type": "text/javascript",
								"id": "f8c48853-3e77-415c-8c92-31fbb056e329"
							}
						}
					],
					"id": "9641a0d7-5dbc-489b-89a0-95ed0cf7830c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"R02\",\r\n  \"userRoleStatus\": \"Inactive\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus/{{Staff_id}}"
					},
					"response": []
				},
				{
					"name": "Update User Role Status_Stf_Invalid-roleid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"updateUserLoginStatus_Staff_positive\"); "
								],
								"type": "text/javascript",
								"id": "0bb8debf-c8d6-4264-99f7-ac8e01a19265"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalid_RL\",data.invalidroldID);"
								],
								"type": "text/javascript",
								"id": "d568bf47-0d4f-4639-902c-979ab1a7894b"
							}
						}
					],
					"id": "72deaa8f-bb71-4cad-ae77-1911e9ffb583",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"{{invalid_RL}}\",\r\n  \"userRoleStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus/{{Staff_id}}"
					},
					"response": []
				},
				{
					"name": "updateUserLoginStatus_Staff_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f843441b-26a7-4918-9e51-6311c6d56cb3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"updateUserLoginStatus_Staff_NoAuth_Negative\"); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e8b04207-63ab-4258-b7b3-dcfd00bea505",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ad3777c2-783e-45b4-bc4e-cba4c0f84caa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"Password@123\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"{{Staff_email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/userLogin/{{Staff_id}}"
					},
					"response": []
				},
				{
					"name": "updateUserLoginStatus_Staff_NoAuth_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"updateUserLoginStatus_Endpointmissing-Negative\"); "
								],
								"type": "text/javascript",
								"id": "e9646b46-f2bb-4179-b4c5-80c06ea8e148"
							}
						}
					],
					"id": "e8fad060-0701-4f71-a06a-7fc4899e3f42",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"Password@123\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"apihexastudent@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/userLogin/{{Staff_id}}"
					},
					"response": []
				},
				{
					"name": "updateUserLoginStatus_Endpointmissing-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1cf9fc04-1a9d-49c4-9f8e-1a32e590f2b3",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(String);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Delete SingleUser invalid User\"); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0fd942d2-12ae-43a4-80f3-087d44590701",
								"exec": [
									"pm.environment.set(\"invalid_userID\", data.invalid_userID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c1ccbab4-5241-4ed6-be93-d169e65105c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"Password@123\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"{{std_email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/userLogin/{{invalid_userID}}"
					},
					"response": []
				},
				{
					"name": "Delete SingleUser invalid User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response time is less than 2500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);",
									"});",
									"",
									"",
									"",
									"postman.setNextRequest(\"Delete SingleUser NoAuth-Negative\"); "
								],
								"type": "text/javascript",
								"id": "4c681861-5c79-42b4-bd0a-e65f2b06be81"
							}
						}
					],
					"id": "86f897c1-1f52-44eb-a994-78403b9c1ce5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/users/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Delete SingleUser NoAuth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response time is less than 2500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);",
									"});",
									"",
									"",
									"postman.setNextRequest(\"Delete SingleUser- Positive\"); "
								],
								"type": "text/javascript",
								"id": "085eb60f-9ee1-497a-81ae-272fb2d359ab"
							}
						}
					],
					"id": "b663185e-eef3-4d4b-8f0b-18d5a0c537e1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/users/{{Staff_id}}"
					},
					"response": []
				},
				{
					"name": "Delete SingleUser- Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"postman.setNextRequest(\"GetPrgmBatchAllUsers_Positive\"); "
								],
								"type": "text/javascript",
								"id": "f8af0685-deaf-4590-b85c-dfcdfd2e0dd8"
							}
						}
					],
					"id": "74836728-5d4a-4a0c-bc78-8ae625d28563",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/users/{{Staff_id}}"
					},
					"response": []
				}
			],
			"id": "5926962c-1f80-4426-bf45-a8c4fc0e7359"
		},
		{
			"name": "User role Program batch Map Controller",
			"item": [
				{
					"name": "GetPrgmBatchAllUsers_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//status code validation",
									"",
									"pm.test('Success GET Request', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([",
									"        200,",
									"        201,",
									"        202",
									"    ]);",
									"})",
									"",
									"//content type validation",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson[0].userId).to.be.a('string');",
									"    pm.expect(responseJson[0].roleId).to.be.a('string');",
									"    pm.expect(responseJson[0].programId).to.be.a('number');",
									"    pm.expect(responseJson[0].batchId).to.be.a('number');",
									"    pm.expect(responseJson[0].userRoleProgramBatchStatus).to.be.a('string');",
									"});",
									"",
									"//header validation",
									"pm.test('check content-Type header', function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"})",
									"",
									"//json schema validation",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"minItems\": 1,",
									"  \"uniqueItems\": true,",
									"  \"items\": {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"      \"userId\",",
									"      \"roleId\",",
									"      \"programId\",",
									"      \"batchId\",",
									"      \"userRoleProgramBatchStatus\"",
									"    ],",
									"    \"properties\": {",
									"      \"userId\": {",
									"        \"type\": \"string\",",
									"        \"minLength\": 1",
									"      },",
									"      \"roleId\": {",
									"        \"type\": \"string\",",
									"        \"minLength\": 1",
									"      },",
									"      \"programId\": {",
									"        \"type\": \"number\"",
									"      },",
									"      \"batchId\": {",
									"        \"type\": \"number\"",
									"      },",
									"      \"userRoleProgramBatchStatus\": {",
									"        \"type\": \"string\",",
									"        \"minLength\": 1",
									"      }",
									"    }",
									"  }",
									"};",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"//assign parameter for delete operation",
									"var assigned_UserPrograms = pm.response.json();",
									"pm.collectionVariables.set('userID', assigned_UserPrograms[0].userId);",
									"",
									"",
									"postman.setNextRequest(\"GetPrgmBatchUserID_Positive\");"
								],
								"type": "text/javascript",
								"id": "313848cb-cfb4-4421-b1b6-0ee3c1ae08fc"
							}
						}
					],
					"id": "68f21c0b-9089-4ef5-940d-0ab417152d73",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/userRoleProgramBatchMap"
					},
					"response": []
				},
				{
					"name": "GetPrgmBatchUserID_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Successful GET Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201,\r",
									"        202\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//content tpe validation\r",
									"pm.test(\"The response has all properties\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson[0].userId).to.be.a('string');\r",
									"    pm.expect(responseJson[0].roleId).to.be.a('string');\r",
									"    pm.expect(responseJson[0].programId).to.be.a('number');\r",
									"    pm.expect(responseJson[0].batchId).to.be.a('number');\r",
									"    pm.expect(responseJson[0].userRoleProgramBatchStatus).to.be.a('string');\r",
									"});\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"GetPrgmBatchUserID_NotEnrolled_Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "2373330a-8246-4f00-add6-5af5df8f6cf1"
							}
						}
					],
					"id": "7f853e42-78cc-4ef4-94ea-a71f0ac55f0e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/userRoleProgramBatchMap/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "GetPrgmBatchUserID_NotEnrolled_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Successful GET Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        404,\r",
									"        400,\r",
									"        401\r",
									"    ]);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"\r",
									"//json schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"GetPrgmBatchAllUsers_InvalidURLNegative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "2b1e0f36-be2a-4efb-bdd4-ce1d0e1d2fe9"
							}
						}
					],
					"id": "33d5d2bc-2669-40bf-ad9c-8b316845d0e2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/userRoleProgramBatchMap/{{Staff_id}}"
					},
					"response": []
				},
				{
					"name": "GetPrgmBatchAllUsers_InvalidURLNegative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Negative GET Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        404,\r",
									"        401,\r",
									"        408\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"\r",
									"//json schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"//schema comparison\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"GetPrgmBatch_InvalidUserID_Negative\"); "
								],
								"type": "text/javascript",
								"id": "abb41c77-2fe8-46e9-a479-682fd175ea76"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalid_endpoint\", data.invalid_endpoint);"
								],
								"type": "text/javascript",
								"id": "5213a9fd-c571-4b96-9746-d9cf4a68a3b1"
							}
						}
					],
					"id": "e32c4e52-26dc-4f23-844e-0549d1a43615",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "GetPrgmBatch_InvalidUserID_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Negative GET Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        404,\r",
									"        401,\r",
									"        408\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"\r",
									"//json schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"postman.setNextRequest(\"GetPrgmBatchNoTokenUserID_Negative\");"
								],
								"type": "text/javascript",
								"id": "35d96122-b816-46f6-b0a6-c6085f13de5b"
							}
						}
					],
					"id": "992b2575-ab9b-4500-8111-58131c3e34b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/userRoleProgramBatchMap/{{std_id}}2"
					},
					"response": []
				},
				{
					"name": "GetPrgmBatchNoTokenUserID_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Invalid URL response', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        401,\r",
									"        404,\r",
									"        408\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"//status message validation\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"\r",
									"//json schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"postman.setNextRequest(\"Update_userRoleProgram_BatchStatus_Assign_Positive\"); "
								],
								"type": "text/javascript",
								"id": "812d7b46-4dcc-4bef-9d4f-ac950b6d096b"
							}
						}
					],
					"id": "895422cd-fdee-433e-8d50-9343595538e4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/userRoleProgramBatchMap/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_Assign_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Update_userRoleProgram_BatchStatus_Assign_Positive\"); "
								],
								"type": "text/javascript",
								"id": "4394ed96-3e93-4c6e-a5ff-b8add23b827f"
							}
						}
					],
					"id": "6d83e8ee-5a04-4577-b185-c2b2bc43b62f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{program_id}}\",\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"{{btch_id}}\",\r\n      \"userRoleProgramBatchStatus\": \"Inactive\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_Assign_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"DeleteAssignedAllProgramsBatchInvalidUserId_Negative\");"
								],
								"type": "text/javascript",
								"id": "f453c489-6e28-4cd5-ad5a-ba8bbedaffcf"
							}
						}
					],
					"id": "091b5a77-6c6e-4cfd-b96e-f42b8fb89bc9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{program_id}}\",\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"{{btch2_id}}\",\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "DeleteAssignedAllProgramsBatchInvalidUserId_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Negative DELETE Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        404,\r",
									"        401,\r",
									"        408\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//json schema validation\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"postman.setNextRequest(\"DeleteAssignedAllProgramsBatchUserId_Positive\"); "
								],
								"type": "text/javascript",
								"id": "0e213b69-a7db-4eaf-b36a-f25c8aac8aa2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalid_endpoint\", data.invalid_endpoint);"
								],
								"type": "text/javascript",
								"id": "18de85c3-691f-4144-9c07-efb1d9b0968d"
							}
						}
					],
					"id": "f8e9605a-f73d-4cc4-82aa-74b46e458857",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/userRoleProgramBatchMap/deleteAll/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "DeleteAssignedAllProgramsBatchUserId_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7de07e19-dca1-4d37-806d-c93a9193ab0e",
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Success DELETE Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201,\r",
									"        202\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"//content type validation\r",
									"pm.test(\"The response has all properties\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"    pm.expect(responseJson.success).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"\r",
									"//json schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome6\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome6\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome6\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest('Logout_LMS_Positive'); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "977bd505-ce26-44f8-a983-864b653dfc27",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/userRoleProgramBatchMap/deleteAll/{{std_id}}"
					},
					"response": []
				}
			],
			"id": "7302166c-e142-4a22-b5e4-2c27f306679f"
		},
		{
			"name": "Userlogin EndtoEnd",
			"item": [
				{
					"name": "Logout_LMS_Positive",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae02c608-3998-47e3-a128-b9debc26add9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0e9543ed-ad61-4f97-bc64-a37b74c5576e",
								"exec": [
									"pm.test(\"Logout Successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('OK');\r",
									"})\r",
									"pm.test(\"Response Time is lower than 1000ms\", ()=>{\r",
									"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Login_InvalidEndPoint_Negative\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3deb6518-3660-4e17-a6e5-dfc32661ef8c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/logoutlms"
					},
					"response": []
				},
				{
					"name": "Login_InvalidEndPoint_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30864f3c-3ae3-4af7-9118-30a17ee1da45",
								"exec": [
									"",
									"",
									"",
									"// Status Code Validation ",
									"",
									"pm.test(\"Status Code String Assertion\", ()=>{",
									"    pm.expect(pm.response.status).to.equal('Unauthorized');",
									"})",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Response Time Validation ",
									"",
									"pm.test(\"Response Time is lower than 1000ms\", ()=>{",
									"     pm.expect(pm.response.responseTime).to.be.below(1000);",
									"})",
									"",
									"",
									"",
									"// Header Validation ",
									"",
									"pm.test(\"Content-Type header validation\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Server header validation\", () => {",
									"  pm.response.to.have.header(\"Server\");",
									"});",
									"",
									"",
									"postman.setNextRequest(\"Login_Relogin_positive\"); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f4b56ee2-d3d6-4d03-b57b-057820ded78e",
								"exec": [
									"pm.environment.set(\"invalid_endpoint\", data.invalid_endpoint);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5288318c-2018-4a99-8cba-e792ffb0e842",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "digest",
							"digest": {
								"algorithm": "MD5"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Login_Relogin_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea6aeef1-392d-4096-8bfe-6c1359c68e82",
								"exec": [
									"var responseData = pm.response.json();\r",
									"pm.collectionVariables.set(\"access-token-DD\", responseData.token);\r",
									"\r",
									"\r",
									"pm.test(\"Login Successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('OK');\r",
									"})\r",
									"pm.test(\"Response Time is lower than 1000ms\", ()=>{\r",
									"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"}); \r",
									"\r",
									"postman.setNextRequest(\"Logout_LMS_Invalid_negative\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "55cc12cb-2bd8-43ad-ad1e-3421bdc7e29e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/login"
					},
					"response": []
				},
				{
					"name": "Logout_LMS_Invalid_negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae02c608-3998-47e3-a128-b9debc26add9",
								"exec": [
									"pm.environment.set(\"invalid_endpoint\", data.invalid_endpoint);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0e9543ed-ad61-4f97-bc64-a37b74c5576e",
								"exec": [
									"\r",
									"\r",
									"\r",
									"// Status Code Validation \r",
									"\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Not Found');\r",
									"})\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Response Time Validation \r",
									"\r",
									"pm.test(\"Response Time is lower than 1000ms\", ()=>{\r",
									"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Logout_LMS_Final_Positive\"); \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2e86484a-804c-4b0a-99a0-554e8fb54239",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Logout_LMS_Final_Positive",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae02c608-3998-47e3-a128-b9debc26add9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0e9543ed-ad61-4f97-bc64-a37b74c5576e",
								"exec": [
									"pm.test(\"Logout Successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('OK');\r",
									"})\r",
									"pm.test(\"Response Time is lower than 1000ms\", ()=>{\r",
									"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "87599d92-bf4d-465c-8ffa-f203ac1ad2af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/logoutlms"
					},
					"response": []
				}
			],
			"id": "b96eb5ad-1033-4eeb-a98a-01722eb5fa54"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{access-token-DD}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "2d263470-420b-4d27-89a3-cd6966fd2cf7"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "4ae3e42d-d168-487a-bcd6-6a30e008f500"
			}
		}
	],
	"variable": [
		{
			"key": "access-token-DD",
			"value": ""
		},
		{
			"key": "program_description",
			"value": ""
		},
		{
			"key": "cx3_program_nm",
			"value": ""
		},
		{
			"key": "total_records",
			"value": ""
		},
		{
			"key": "batch_description",
			"value": ""
		},
		{
			"key": "batch1_name",
			"value": ""
		},
		{
			"key": "Batch_num_classes",
			"value": ""
		},
		{
			"key": "batch2_name",
			"value": ""
		},
		{
			"key": "bt_id",
			"value": ""
		},
		{
			"key": "bt_nm",
			"value": ""
		},
		{
			"key": "bt_ds",
			"value": ""
		},
		{
			"key": "bt_sz",
			"value": ""
		},
		{
			"key": "bt_status",
			"value": ""
		},
		{
			"key": "Staff_frst_name",
			"value": ""
		},
		{
			"key": "Stff_email_id",
			"value": ""
		},
		{
			"key": "visa_status",
			"value": ""
		},
		{
			"key": "time_zone",
			"value": ""
		},
		{
			"key": "first_nm_stud",
			"value": ""
		},
		{
			"key": "Stud_email_id",
			"value": ""
		},
		{
			"key": "total_users",
			"value": ""
		},
		{
			"key": "active_users",
			"value": ""
		},
		{
			"key": "userID",
			"value": ""
		},
		{
			"key": "c2_batch_name",
			"value": ""
		},
		{
			"key": "c2_batch2_name",
			"value": ""
		},
		{
			"key": "invalid_endpoint",
			"value": ""
		},
		{
			"key": "Stff_ph_num",
			"value": ""
		},
		{
			"key": "Stud_ph_num",
			"value": ""
		}
	]
}