{
	"info": {
		"_postman_id": "0aa44d3d-48b2-4760-b287-1be4d54438a2",
		"name": "Test_New_Flow",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Program  Controller EndToEnd",
			"item": [
				{
					"name": "Login_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json();",
									"pm.collectionVariables.set(\"access-token-DD\", responseData.token);",
									"",
									"",
									"// Status Code Validation ",
									"",
									"",
									"",
									"pm.test(\"Status Code String Assertion\", ()=>{",
									"    pm.expect(pm.response.status).to.equal('OK');",
									"})",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Response Time Validation ",
									"",
									"pm.test(\"Response Time is lower than 1000ms\", ()=>{",
									"     pm.expect(pm.response.responseTime).to.be.below(1000);",
									"})",
									"",
									"",
									"",
									"// Header Validation ",
									"",
									"pm.test(\"Content-Type header validation\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Server header validation\", () => {",
									"  pm.response.to.have.header(\"Server\");",
									"});",
									"",
									"",
									"",
									"postman.setNextRequest(\"C1_Create_NewProgram\");"
								],
								"type": "text/javascript",
								"id": "30864f3c-3ae3-4af7-9118-30a17ee1da45"
							}
						}
					],
					"id": "f56af6e2-0f0f-4aa6-8fcb-03a41544e1bf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms/login"
					},
					"response": []
				},
				{
					"name": "C1_Create_NewProgram",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});",
									"",
									"pm.environment.set('program_Name_D', responseJson.programName)",
									"",
									"",
									"pm.test('Status Code', function () {",
									"    pm.expect(pm.response.to.have.status(201));",
									"})",
									"",
									"",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"programId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"programDescription\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"programStatus\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"creationTime\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"lastModTime\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"programId\",",
									"    \"programName\",",
									"    \"programDescription\",",
									"    \"programStatus\",",
									"    \"creationTime\",",
									"    \"lastModTime\"",
									"  ]",
									"}",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    ",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;",
									"})",
									"",
									"pm.test(\"Test the data type\", () => {",
									"    pm.expect(responseJson).to.be.an('object');",
									"   ",
									"})",
									"",
									"",
									"console.log(responseJson);",
									"postman.setNextRequest(\"Delete_By_Invalid_ProgramName Negative\");",
									""
								],
								"type": "text/javascript",
								"id": "3068c7b0-e030-4eb9-a38f-e17babb7bd05"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"program_description\", data.program_description );\r",
									"\r",
									"var data_csv = pm.iterationData.toObject(); \r",
									"var c1_nm = data_csv.c1_program_nm;\r",
									"var randomInt = Math.floor(Math.random()*991);\r",
									"\r",
									"var conct_name = c1_nm+ randomInt;\r",
									"pm.environment.set(\"cx1_program_nm\",conct_name );\r",
									"\r",
									"\r",
									"console.log(conct_name);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "b2935e9b-219e-4c67-aca4-aa1d2b70fcdf"
							}
						}
					],
					"id": "26b69203-a55a-4703-becf-e6a8fe35840a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{cx1_program_nm}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Delete_By_Invalid_ProgramName Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2532cd8b-d0bc-477f-9c52-d197be6d32d0",
								"exec": [
									"pm.environment.set(\"invalid_programId\", data.invalid_programId );\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "667f789b-f890-4bf5-a9cb-308f770fe9c0",
								"exec": [
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Not Found');\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"// Response Time Validation \r",
									"\r",
									"pm.test(\"Response Time is lower than 1000ms\", ()=>{\r",
									"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"postman.setNextRequest(\"Delete_By_ProgramName_Positive\"); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b3de5d69-d1c2-419c-bbb1-a6c5d405bc38",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/deletebyprogname/{{invalid_programId}}"
					},
					"response": []
				},
				{
					"name": "Delete_By_ProgramName_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('OK');\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Response Time Validation \r",
									"\r",
									"pm.test(\"Response Time is lower than 200ms\", ()=>{\r",
									"     pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"postman.setNextRequest(\"C2_Create_NewProgram\"); "
								],
								"type": "text/javascript",
								"id": "1a235c76-d649-4117-971e-03a889805356"
							}
						}
					],
					"id": "0ed0ebc3-f8a1-40a9-aac4-a38ebbbd340d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/deletebyprogname/{{program_Name_D}}"
					},
					"response": []
				},
				{
					"name": "C2_Create_NewProgram",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});",
									"",
									"pm.environment.set('program_id_D', responseJson.programId)",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"programId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"programDescription\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"programStatus\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"creationTime\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"lastModTime\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"programId\",",
									"    \"programName\",",
									"    \"programDescription\",",
									"    \"programStatus\",",
									"    \"creationTime\",",
									"    \"lastModTime\"",
									"  ]",
									"}",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    ",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;",
									"})",
									"",
									"pm.test(\"Test the data type\", () => {",
									"    pm.expect(responseJson).to.be.an('object');",
									"   ",
									"})",
									"",
									"",
									"console.log(responseJson);",
									"postman.setNextRequest(\"Delete_By-InvalidProgramID_Negative\");",
									""
								],
								"type": "text/javascript",
								"id": "3213e51f-10c6-44af-88d3-7c1f0a8b4d72"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"program_description\", data.program_description );\r",
									"\r",
									"var data_csv = pm.iterationData.toObject(); \r",
									"var c2_nm = data_csv.c2_program_nm;\r",
									"var randomInt = Math.floor(Math.random()*991);\r",
									"\r",
									"var conct_name = c2_nm+ randomInt;\r",
									"pm.environment.set(\"cx2_program_nm\",conct_name );\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "07e46d9a-437b-4228-b8a4-0fb3787bed68"
							}
						}
					],
					"id": "e9a9062c-58f0-4071-bbdc-df191ce0b268",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{cx2_program_nm}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Delete_By-InvalidProgramID_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0fbb5a93-818d-4aa4-af73-d79cbf674179",
								"exec": [
									"pm.environment.set(\"invalid_programId\", data.invalid_programId );\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "613d48a6-7706-47a3-b9bf-faf562891b97",
								"exec": [
									"\r",
									"pm.test(\"Unscessful \", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        400,\r",
									"        401,\r",
									"        404,408\r",
									"    ]);\r",
									"});\r",
									"\r",
									"// Response Time Validation \r",
									"\r",
									"pm.test(\"Response Time is lower than 1000ms\", ()=>{\r",
									"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Delete_By-ProgramID_positive\"); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4278675d-e58c-491a-a5d6-2a544d8166e2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/deletebyprogid/{{invalid_programId}}"
					},
					"response": []
				},
				{
					"name": "Delete_By-ProgramID_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('OK');\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Response Time Validation \r",
									" \r",
									"\r",
									"pm.test(\"Response Time is lower than 1000ms\", ()=>{\r",
									"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"postman.setNextRequest(\"create_NewProgram\"); "
								],
								"type": "text/javascript",
								"id": "7aa5ed6a-fa59-4b82-8cd2-498ead8d5c90"
							}
						}
					],
					"id": "e14e43c1-db52-43df-a6f7-5d26db267839",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/deletebyprogid/{{program_id_D}}"
					},
					"response": []
				},
				{
					"name": "create_NewProgram",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});",
									"",
									"pm.environment.set('program_id', responseJson.programId)",
									"",
									"pm.environment.set('program_Name', responseJson.programName)",
									"",
									"pm.environment.set('program_status', responseJson.programStatus)",
									"",
									"pm.environment.set('program_descp', responseJson.programDescription)",
									"",
									"pm.test('Status Code', function () {",
									"    pm.expect(pm.response.to.have.status(201));",
									"})",
									"",
									"",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"programId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"programDescription\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"programStatus\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"creationTime\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"lastModTime\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"programId\",",
									"    \"programName\",",
									"    \"programDescription\",",
									"    \"programStatus\",",
									"    \"creationTime\",",
									"    \"lastModTime\"",
									"  ]",
									"};",
									"",
									"",
									"console.log(responseJson);",
									"postman.setNextRequest(\"Missing_ProgramName_Negative\");",
									""
								],
								"type": "text/javascript",
								"id": "3007aabc-52d1-4f5b-bbc4-0ac44f554d73"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"program_description\", data.program_description );\r",
									"\r",
									"var data_csv = pm.iterationData.toObject(); \r",
									"var c2_nm = data_csv.program_nm;\r",
									"var randomInt = Math.floor(Math.random()*991);\r",
									"\r",
									"var conct_name = c2_nm+ randomInt;\r",
									"pm.collectionVariables.set(\"cx3_program_nm\",conct_name );\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.collectionVariables.set(\"total_records\", list); \r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.collectionVariables.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "785307cc-96db-4e39-b696-c427b788de69"
							}
						}
					],
					"id": "ff08a6d3-4796-4965-a678-42a964b26901",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{cx3_program_nm}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Missing_ProgramName_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dc79a257-1895-4a3f-867c-624e7abd698d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome5\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome5\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome5\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"EmptyString_ProgramName_Negative\");"
								],
								"type": "text/javascript",
								"id": "05fb179e-b1dd-491f-8ecb-447a510f1692"
							}
						}
					],
					"id": "52170da0-3520-4fd4-b789-4c6af5c54c73",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"\",\r\n\"programStatus\":\"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "EmptyString_ProgramName_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "94f5da1e-09bc-46e5-92c3-f49113dac119"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome10\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"const jsonData =  pm.response.json(); \r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Missing_ProgramStatus_Negative\");"
								],
								"type": "text/javascript",
								"id": "2bd96ade-2320-4fd6-a933-94b06470410f"
							}
						}
					],
					"id": "1a4391b2-debc-43e5-924e-ff2c883e00d6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":    ,\r\n\"programStatus\":\"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Missing_ProgramStatus_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "85589abd-9e64-4276-8bbe-cdd0ac860e5b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"EmptyString_ProgramStatus_Negative\");\r",
									""
								],
								"type": "text/javascript",
								"id": "2aa3eb6a-309d-4c87-b645-4b53118b56fe"
							}
						}
					],
					"id": "15b12acc-fab9-4105-851c-7127cabad234",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{program_nm}}\",\r\n\"programStatus\":\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "EmptyString_ProgramStatus_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "cdd966de-2162-40fe-9b75-9920fca39196"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"const jsonData =  pm.response.json(); \r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"Existing_ProgramName_Negative\");"
								],
								"type": "text/javascript",
								"id": "c266a2dc-c22a-4be1-9100-1a4cac45b24f"
							}
						}
					],
					"id": "2748eddc-7acf-43c4-95bf-f1f37e3edfd1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{program_nm}}\",\r\n\"programStatus\":\"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Existing_ProgramName_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ea6c6eaa-14d3-4e1d-871c-ad5267abf37c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome3\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome3\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome3\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"const jsonData =  pm.response.json(); \r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"// Status Code Validation \r",
									"\r",
									"pm.test(\"Status code is Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Bad Request');\r",
									"})\r",
									"\r",
									"// Response Time Validation \r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"Program_Name_Int_Negative\");"
								],
								"type": "text/javascript",
								"id": "b574a104-0742-4dbe-900c-1f83e4c0c6ea"
							}
						}
					],
					"id": "03ed090d-a172-4902-95ad-cf64b9e91ed2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{program_nm}}\",\r\n\"programStatus\":\"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Program_Name_Int_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3bbf83eb-ed75-4adf-9c68-d67870c426ce"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome5\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome5\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome5\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									";\r",
									"\r",
									"var responseData = pm.response.json(); \r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"// Status Code Validation \r",
									"\r",
									"pm.test(\"Status code is Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Bad Request');\r",
									"})\r",
									"\r",
									"// Response Time Validation \r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"postman.setNextRequest(\"Program_Description_InvalidData_Negative\");\r",
									""
								],
								"type": "text/javascript",
								"id": "d91eaf56-d072-4d37-be56-3c81efc8e547"
							}
						}
					],
					"id": "e158a283-98e1-42a5-9768-200bff453275",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{int}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Program_Description_InvalidData_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9692c07b-355c-418f-91bb-090f4c31c171",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2f77135a-020c-4f2e-bfd5-23e8b98f4dc2",
								"exec": [
									"// Status Code Validation \r",
									"\r",
									"pm.test(\"Status code is Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Bad Request');\r",
									"})\r",
									"\r",
									"// Response Time Validation \r",
									"pm.test(\"Response time is less than 1200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
									"});\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"var schema ={\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome8\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome8\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome8\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"const jsonData =  pm.response.json(); \r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"postman.setNextRequest(\"All Programs\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f6a8a21f-e034-44d2-a82e-ae00b1842826",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{int}}\",\r\n\"programName\":\"{{program_nm}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "All Programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('OK');\r",
									"})\r",
									"\r",
									"// Response Time Validation \r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"ByProgram_ID_positive\");"
								],
								"type": "text/javascript",
								"id": "1b8a2d54-be75-4edc-89d3-bedcbd2da752"
							}
						}
					],
					"id": "82b22473-adb1-4753-91c4-24ce5c32eaeb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "ByProgram_ID_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('OK');\r",
									"})\r",
									"\r",
									"// Response Time Validation \r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Invalid_ProgramID_Negative\");"
								],
								"type": "text/javascript",
								"id": "c6ba2dee-b472-4ae4-8a1f-e4adcc42bfaa"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "80e656d3-66df-4964-a056-d43f212fc8c9"
							}
						}
					],
					"id": "3a8c4ed9-6a1c-41ef-acce-734bb95618e3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/programs/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "Invalid_ProgramID_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf97b362-cab3-43df-90d0-231be7e4f65a",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404,400])\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Not Found');\r",
									"})\r",
									"\r",
									"// Response Time Validation \r",
									"pm.test(\"Response time is less the 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// Header Validation \r",
									"\r",
									"pm.test(\"Content-Type header validation\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Server header validation\", () => {\r",
									"  pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"update_ProgramName_Negative\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "07a4e95a-09c3-4656-ba0b-2d4405da1495",
								"exec": [
									"pm.environment.set(\"invalid_programId\", data.invalid_programId );"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f878769e-96e3-4fa8-9e98-4fd04fe558f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/programs/{{invalid_programId}}"
					},
					"response": []
				},
				{
					"name": "update_ProgramName_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ec16ebe7-7722-498a-8366-e14b39942da6",
								"exec": [
									"pm.environment.set(\"program_description\", data.program_description );\r",
									"pm.environment.set(\"update_program_name\", data.update_program_name);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4ce9dcc6-0a6f-4d61-845d-422d3aa15ba2",
								"exec": [
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"var responseJson = pm.response.json(); \r",
									"pm.test(\"Test the data type\", () => {\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"   \r",
									"})\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,401,404]);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"update_ProgramDescription_ByprogramID_Positive\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ec2d62b9-64b5-4ddf-9308-d2c8427f38f5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_descp}}\",\r\n\"programName\":\"{{update_program_name}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/program/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "update_ProgramDescription_ByprogramID_Positive",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"update_program_description\", data.update_program_description );\r",
									"pm.environment.set(\"program_nm\", data.program_nm);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "8c7e0b66-206e-4027-9d6e-4eaa40688a97"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"update_InvalidProgramDescription_ByprogramID_Negative\");"
								],
								"type": "text/javascript",
								"id": "a7d8f2a1-953d-4c3f-a50d-7adb771fb82d"
							}
						}
					],
					"id": "183386f8-3c2d-4805-9fb9-de26a9a94e78",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{update_program_description}}\",\r\n\"programName\":\"{{program_Name}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/putprogram/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "update_InvalidProgramDescription_ByprogramID_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"int\", data.int );\r",
									"pm.environment.set(\"program_nm\", data.program_nm);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "9cffcbef-7ffc-4510-995d-65ad2c33856a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"var responseJson = pm.response.json(); \r",
									"pm.test(\"Test the data type\", () => {\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"   \r",
									"})\r",
									"\r",
									"pm.test(\"Unsuccessful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eql(400);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"update_invalidProgramName_ByProgramID_negative\");"
								],
								"type": "text/javascript",
								"id": "2f47c2e2-67da-4d99-9492-7f9278bc475d"
							}
						}
					],
					"id": "c407d557-4cce-40b1-a6b1-c2efad16fb95",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{int}}\",\r\n\"programName\":\"{{program_nm}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/putprogram/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "update_program_InvalidProgramID_negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7fb1d98b-1d30-4797-8a87-62d8746c5ffa",
								"exec": [
									"pm.environment.set(\"program_description\", data.program_description );\r",
									"pm.environment.set(\"update_program_name\", data.update_program_name);\r",
									"pm.environment.set(\"invalid_programId\", data.invalid_programId );\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aaf01abf-570d-4453-b276-b411b5430422",
								"exec": [
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome1\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome1\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome1\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Status not found\", ()=>{\r",
									"     pm.response.to.have.status(404);\r",
									"})\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Not Found');\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"update_programID_MissingName_negative\"); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0aaa39bc-f450-4b30-aa8e-cac09cba04c2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{program_nm}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/putprogram/{{invalid_programId}}"
					},
					"response": []
				},
				{
					"name": "update_programID_MissingStatus_negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"program_description\", data.program_description );\r",
									"pm.environment.set(\"program_nm\", data.program_nm);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "56959bd1-41fe-41cd-b500-ea8f87452657"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema= {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome3\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome3\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome3\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Status Bad Request\", ()=>{\r",
									"     pm.response.to.have.status(400);\r",
									"})\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Bad Request');\r",
									"});\r",
									"postman.setNextRequest(\"update_programID_MissingName_negative\");"
								],
								"type": "text/javascript",
								"id": "115430cd-db50-46f1-809f-393fe5f6e86d"
							}
						}
					],
					"id": "26f4133f-91a8-4f3d-8364-f35baa8fb3a3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{program_nm}}\",\r\n\"programStatus\":\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/putprogram/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "update_programID_MissingName_negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"program_description\", data.program_description );\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "cde7bdbe-652c-4674-a6df-d011e60f8784"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome3\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome3\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome3\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"pm.test(\"Status Bad Request\", ()=>{\r",
									"     pm.response.to.have.status(400);\r",
									"})\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Bad Request');\r",
									"});\r",
									"postman.setNextRequest(\"Create_Batch_Positive\");"
								],
								"type": "text/javascript",
								"id": "92794fb7-fb04-4f04-b843-cc04d7d4c3e4"
							}
						}
					],
					"id": "50a931cd-92d5-4771-b764-76971b08b071",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":,\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/putprogram/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "update_invalidProgramName_ByProgramID_negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"program_description\", data.program_description );\r",
									"pm.environment.set(\"int\", data.int );\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "05732451-0f58-4f9a-b6a9-267c33c81db8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"pm.test(\"Status Bad Request\", ()=>{\r",
									"     pm.response.to.have.status(400);\r",
									"})\r",
									"pm.test(\"Status Code String Assertion\", ()=>{\r",
									"    pm.expect(pm.response.status).to.equal('Bad Request');\r",
									"});\r",
									"postman.setNextRequest(\"Create_Batch1_Positive\");"
								],
								"type": "text/javascript",
								"id": "54e4f325-a77e-4d5c-9c88-fecce911274c"
							}
						}
					],
					"id": "6435290d-763c-4e08-b093-8ec48001cf41",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{program_description}}\",\r\n\"programName\":\"{{int}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/putprogram/{{program_id}}"
					},
					"response": []
				}
			],
			"id": "7de50fdd-2046-416c-af8a-98cc3d7aa3d1"
		},
		{
			"name": "BatchController_EndToEnd",
			"item": [
				{
					"name": "Create_Batch1_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test('Check status code', () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
									"})",
									"",
									"var schema = ",
									"{ \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"batchId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"batchName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchDescription\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchStatus\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchNoOfClasses\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"batchId\",",
									"    \"batchName\",",
									"    \"batchDescription\",",
									"    \"batchStatus\",",
									"    \"batchNoOfClasses\",",
									"    \"programId\",",
									"    \"programName\"",
									"  ]",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"// Variable setting",
									"const responseData = pm.response.json();  ",
									"pm.environment.set(\"btch_id\", responseData.batchId);",
									"pm.environment.set(\"btch_name\", responseData.batchName);",
									"pm.environment.set(\"btch_descp\", responseData.batchDescription);",
									"pm.environment.set(\"btch_size\", responseData.batchNoOfClasses);",
									"pm.environment.set(\"btch_status\", responseData.batchStatus);",
									"",
									"postman.setNextRequest(\"Create_Batch2_Positive\");"
								],
								"type": "text/javascript",
								"id": "21d6c626-1967-40d5-9d6c-977aaff2e01c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"batch_description\", data.batch_description );\r",
									"\r",
									"var data_csv = pm.iterationData.toObject(); \r",
									"var c1_nm = data_csv.batch_name;\r",
									"var randomInt = Math.floor(Math.random()*991);\r",
									"\r",
									"var conct_name = c1_nm+ randomInt;\r",
									"pm.collectionVariables.set(\"batch1_name\",conct_name );\r",
									"\r",
									"\r",
									"var num_classes =  data_csv.Batch_num_classes\r",
									"var randomclasses = Math.floor(Math.random()*5);\r",
									"\r",
									"var concat_class =  num_classes + randomclasses\r",
									"\r",
									"pm.collectionVariables.set(\"Batch_num_classes\", concat_class);\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "0f3e0843-91d3-45d9-9441-3735a22b815c"
							}
						}
					],
					"id": "9a51b07c-46b9-4c0d-b3ff-74005d1d08b5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{batch1_name}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "Create_Batch2_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test('Check status code', () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
									"})",
									"",
									"",
									"var schema = {",
									"     \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"batchId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"batchName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchDescription\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchStatus\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchNoOfClasses\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"batchId\",",
									"    \"batchName\",",
									"    \"batchDescription\",",
									"    \"batchStatus\",",
									"    \"batchNoOfClasses\",",
									"    \"programId\",",
									"    \"programName\"",
									"  ]",
									"}",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"// Variable setting",
									"const responseData = pm.response.json();  ",
									"pm.environment.set(\"btch2_id\", responseData.batchId);",
									"pm.environment.set(\"btch2_name\", responseData.batchName);",
									"pm.environment.set(\"btch2_descp\", responseData.batchDescription);",
									"pm.environment.set(\"btch2_size\", responseData.batchNoOfClasses);",
									"pm.environment.set(\"btch2_status\", responseData.batchStatus);",
									"",
									"postman.setNextRequest(\"ExistingBatch_Creation_Negative\");"
								],
								"type": "text/javascript",
								"id": "ea5ebe7a-4238-49c2-8774-e462d454228f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"batch_description\", data.batch_description );\r",
									"\r",
									"var data_csv = pm.iterationData.toObject(); \r",
									"\r",
									"var c2_nm = data_csv.c2_batch_name;\r",
									"\r",
									"var randomInt = Math.floor(Math.random()*991);\r",
									"\r",
									"var concat_name2 = c2_nm + randomInt;\r",
									"pm.collectionVariables.set(\"c2_batch2_name\", concat_name2 );\r",
									"\r",
									"\r",
									"var num_classes =  data_csv.Batch_num_classes\r",
									"var randomclasses = Math.floor(Math.random()*5);\r",
									"var concat_class =  num_classes + randomclasses\r",
									"pm.collectionVariables.set(\"Batch_num_classes\", concat_class);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.collectionVariables.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "ff71fd19-63ad-4587-bbf2-3e312206d2d2"
							}
						}
					],
					"id": "66370e33-dabb-4dc0-868e-c4ae2e7c26bf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{c2_batch2_name}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "ExistingBatch_Creation_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test('Check status code', () => {",
									"    pm.expect(pm.response.code).to.be.eql(400);",
									"})",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"message\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"success\": {",
									"      \"type\": \"boolean\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"message\",",
									"    \"success\"",
									"  ]",
									"}",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"",
									"postman.setNextRequest(\"Create_Batch_invalid_batchName_Negative\"); "
								],
								"type": "text/javascript",
								"id": "cd27337d-cad3-4c81-8792-11986b982fbe"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description );\r",
									"pm.environment.set(\"batch_name\", data.batch_name);\r",
									"pm.environment.set(\"Batch_num_classes\", data.Batch_num_classes);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "b26ba11c-1309-4b18-a715-9ecc0bd3944a"
							}
						}
					],
					"id": "d8b70738-1f12-4cfe-b6b9-f75bdaa85a25",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{btch2_descp}}\",\r\n\t\"batchName\": \"{{btch2_name}}\",\r\n\t\"batchNoOfClasses\": \"{{btch2_size}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "Create_Batch_invalid_batchName_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5bf4fa1-c9d7-4636-bb40-9f361123280a",
								"exec": [
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"false\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"message\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"success\": {",
									"      \"type\": \"boolean\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"message\",",
									"    \"success\"",
									"  ]",
									"}",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"// data type validation ",
									"",
									"pm.test(\"batchName is capturing with invalid characters \", function(){",
									"    pm.expect(pm.response(batchName)).to.be.string",
									"})",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"postman.setNextRequest(\"Create_Batch_invalid_Int_batchName_Negative\"); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5cad3123-e0c7-4a55-8d21-d0e16525088e",
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description );\r",
									"pm.environment.set(\"invalid_batch_name\", data.invalid_batch_name);\r",
									"pm.environment.set(\"Batch_num_classes\", data.Batch_num_classes);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6d28d317-4705-4bc3-a720-bf98361f4559",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{invalid_batch_name}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "Create_Batch_invalid_Int_batchName_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5bf4fa1-c9d7-4636-bb40-9f361123280a",
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"message\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"success\": {",
									"      \"type\": \"boolean\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"message\",",
									"    \"success\"",
									"  ]",
									"}",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"// data type validation ",
									"",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"postman.setNextRequest(\"Create_Batch_Invalid_Endpoint_negative\"); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5cad3123-e0c7-4a55-8d21-d0e16525088e",
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description );\r",
									"pm.environment.set(\"int\", data.int);\r",
									"pm.environment.set(\"Batch_num_classes\", data.Batch_num_classes);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "96d9c162-ec24-4bed-b9eb-4129f1985837",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{int}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "Create_Batch_Invalid_Endpoint_negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecaecce9-e5a5-4fdd-9818-0c9181914d3c",
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"timestamp\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"status\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"error\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"path\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"timestamp\",",
									"    \"status\",",
									"    \"error\",",
									"    \"path\"",
									"  ]",
									"}",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"postman.setNextRequest(\"Create_Batch_Classes_String_Negative\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "53910e39-9c68-4455-998a-27cedeacbbf5",
								"exec": [
									"pm.environment.set(\"invalid_batchId\", data.invalid_batchId );\r",
									"pm.environment.set(\"batch_description\", data.batch_description );\r",
									"pm.environment.set(\"batch_name\", data.batch_name);\r",
									"pm.environment.set(\"Batch_num_classes\", data.Batch_num_classes);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f3c636f8-e6ec-4902-bf11-082773036824",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{batch_name}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/{{invalid_batchId}}"
					},
					"response": []
				},
				{
					"name": "Create_Batch_Classes_String_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1941f95b-0dea-4285-b237-d46df3082540",
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"timestamp\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"status\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"error\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"path\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"timestamp\",",
									"    \"status\",",
									"    \"error\",",
									"    \"path\"",
									"  ]",
									"};",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"console.log(jsonData);",
									"postman.setNextRequest(\"Create_Batch_Status_Invalid _Negative\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c89f4f1-fc6c-4c82-be96-d9f54e2e4db0",
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description );\r",
									"pm.environment.set(\"batch_name\", data.batch_name);\r",
									"pm.environment.set(\"string\", data.string);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f63eb918-d8ee-43e8-aecd-91e2f5852d67",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{batch_name}}\",\r\n\t\"batchNoOfClasses\": \"{{string}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "Create_Batch_Status_Invalid _Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01c76309-5c1f-4d6c-9a75-42008805d3f8",
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const schema ={",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"timestamp\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"status\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"error\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"path\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"timestamp\",",
									"    \"status\",",
									"    \"error\",",
									"    \"path\"",
									"  ]",
									"};",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"console.log(jsonData);",
									"postman.setNextRequest(\"Create_Batch_Missing_ProgramID_negative\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f246769f-9f91-440a-9a6c-12617f108309",
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description );\r",
									"pm.environment.set(\"batch_name\", data.batch_name);\r",
									"pm.environment.set(\"Batch_num_classes\", data.Batch_num_classes);\r",
									"pm.environment.set(\"batch_status_invalid\", data.batch_status_invalid);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1f4af661-0c60-4860-b942-129dc18f3d2a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{batch_name}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes}}\",\r\n\t\"batchStatus\": \"{{batch_status_invalid}}\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "Create_Batch_Missing_ProgramID_negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66c06b51-5ee6-48cb-83c3-9b34234701d7",
								"exec": [
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"timestamp\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"status\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"error\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"path\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"timestamp\",",
									"    \"status\",",
									"    \"error\",",
									"    \"path\"",
									"  ]",
									"}",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"console.log(jsonData);",
									"",
									"postman.setNextRequest(\"create_Batch_BatchDisc_null _Negative\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b01f7f07-c581-4da4-9812-7461537a9270",
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description );\r",
									"pm.environment.set(\"batch_name\", data.batch_name);\r",
									"pm.environment.set(\"Batch_num_classes\", data.Batch_num_classes);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fb077421-52e4-454e-aba4-f097a75860d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_ds}}\",\r\n\t\"batchName\": \"{{batch_nm}}\",\r\n\t\"batchNoOfClasses\": \"{{batch_num}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\":\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "create_Batch_BatchDisc_null _Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff91690a-07b9-4b98-aff5-daeabd4788d3",
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const schema ={",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"timestamp\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"status\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"error\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"path\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"timestamp\",",
									"    \"status\",",
									"    \"error\",",
									"    \"path\"",
									"  ]",
									"}",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"console.log(responseData);",
									"postman.setNextRequest(\"GetBatch_BY Batch ID_ Postive\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4fee4939-c41d-4aa0-a755-c0f8ce188c28",
								"exec": [
									"\r",
									"pm.environment.set(\"batch_name\", data.batch_name);\r",
									"pm.environment.set(\"Batch_num_classes\", data.Batch_num_classes);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2bb0d913-fd46-4f32-863a-11f4a3596c7a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"\",\r\n\t\"batchName\": \"{{batch_nm}}\",\r\n\t\"batchNoOfClasses\": \"{{batch_num}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{prg_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "GetBatch_BY Batch ID_ Postive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"postman.setNextRequest(\"Get_Batch_BatchID_Negative\");"
								],
								"type": "text/javascript",
								"id": "da4215a6-a136-45cb-ac3f-d11884a5b950"
							}
						}
					],
					"id": "16b2d903-4f69-42a0-93f2-a4928d7d0d38",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/batchId/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "Get_Batch_BatchID_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Batch not found\");",
									"});",
									"postman.setNextRequest(\"GetBatch_BatchName_Positive\");",
									""
								],
								"type": "text/javascript",
								"id": "77629187-c41c-4de3-9c17-48e24d1bd21e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"//var data_csv = pm.iterationData.toObject(); \r",
									"//pm.collectionVariables.set(\"invalid_endpoint\", data_csv.invalid_endpoint); "
								],
								"type": "text/javascript",
								"id": "7d420173-5932-4291-992f-5b92fabf7247"
							}
						}
					],
					"id": "ae4a2d63-e32b-4bc5-a7b8-aead52e1dcfe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/batchId/{{btch_id}}000"
					},
					"response": []
				},
				{
					"name": "GetBatch_BatchName_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"postman.setNextRequest(\"Get_Batch_BatchName_Negative\");"
								],
								"type": "text/javascript",
								"id": "5515f6c0-f60a-45ad-b087-12c47cb8b806"
							}
						}
					],
					"id": "a993ef08-2660-440d-96ad-dcf26d93923d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/batchName/{{btch2_name}}"
					},
					"response": []
				},
				{
					"name": "Get_Batch_BatchName_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f08e2a72-0599-43cb-91f3-24766f0fbad9",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"postman.setNextRequest(\"GetBatch_ProgramID Positive\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "083bdf90-0cc4-4653-b315-e4b2622ee8c6",
								"exec": [
									"pm.environment.set(\"invalid_endpoint\", data.invalid_endpoint);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "74a9f155-e9da-460e-bc43-88d03423565d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/batchName/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "GetBatch_ProgramID Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"postman.setNextRequest(\"GetBatch_ProgramID_Negative\");"
								],
								"type": "text/javascript",
								"id": "db6f363f-7d8d-4f05-884a-0abab12adec4"
							}
						}
					],
					"id": "523458c8-40e2-4075-b4cd-1b69d47d3822",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/program/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "GetBatch_ProgramID_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"postman.setNextRequest(\"UpdateBatch_BatchId_Positive\");"
								],
								"type": "text/javascript",
								"id": "46181065-4f16-4063-bcb1-d1892a6db6c2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalid_endpoint\", data.invalid_endpoint);"
								],
								"type": "text/javascript",
								"id": "da7ad7ce-7f6f-48a2-b09f-8b987ad8cf83"
							}
						}
					],
					"id": "9c3b33a5-fd50-4346-b7ac-8c71e3118efb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/program/{{btch2_id}}2323"
					},
					"response": []
				},
				{
					"name": "UpdateBatch_BatchId_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"var responseBody = pm.response.json(); ",
									"postman.setNextRequest(\"UpdateBatch_BatchDescri_Invalid_Negative\");",
									""
								],
								"type": "text/javascript",
								"id": "1e6c2780-548f-4da6-90cd-a2b882e8db48"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description);\r",
									"pm.environment.set(\"batch_Updatename\", data.batch_Updatename);\r",
									"pm.environment.set(\"Batch_num_classes_Updated\", data.Batch_num_classes_Updated);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "0c4e712d-d1a3-4625-b58e-840ec7ff640d"
							}
						}
					],
					"id": "5aa8ff65-2898-49b6-9faf-a97bee4e028b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{batch_Updatename}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes_Updated}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "UpdateBatch_BatchDescri_Invalid_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome10\",",
									"    \"definitions\": {",
									"        \"Welcome10\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"message\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"success\": {",
									"                    \"type\": \"boolean\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"message\",",
									"                \"success\"",
									"            ],",
									"            \"title\": \"Welcome10\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"postman.setNextRequest(\"UpdateBatch_BatchName_Null_Negative\");"
								],
								"type": "text/javascript",
								"id": "b0c54213-4daf-4580-89ae-d882580db34c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"int\", data.int);\r",
									"\r",
									"pm.environment.set(\"batch_Updatename\", data.batch_Updatename);\r",
									"pm.environment.set(\"Batch_num_classes_Updated\", data.Batch_num_classes_Updated);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "ca2c801f-c964-4600-bae2-39683518e23e"
							}
						}
					],
					"id": "7258c463-343f-4257-9861-daac08ad7d92",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{int}}\",\r\n\t\"batchName\": \"{{batch_Updatename}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes_Updated}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "UpdateBatch_BatchName_Null_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"batchName must begin with alphabet and can contain only alphanumeric characters\");",
									"});",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome6\",",
									"    \"definitions\": {",
									"        \"Welcome6\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"message\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"success\": {",
									"                    \"type\": \"boolean\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"message\",",
									"                \"success\"",
									"            ],",
									"            \"title\": \"Welcome6\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"postman.setNextRequest(\"Update_Batch_BatchName_Invalid_Negative\");",
									""
								],
								"type": "text/javascript",
								"id": "2b43b86e-23e3-425a-8f67-633015701459"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description);\r",
									"pm.environment.set(\"Batch_num_classes_Updated\", data.Batch_num_classes_Updated);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "064e3800-0653-4599-a4b3-fe021e000515"
							}
						}
					],
					"id": "aa33ec1f-1086-4197-8f1e-ada9f65b58fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes_Updated}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "Update_Batch_BatchName_Invalid_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"batchName must begin with alphabet and can contain only alphanumeric characters\");",
									"});",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome6\",",
									"    \"definitions\": {",
									"        \"Welcome6\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"message\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"success\": {",
									"                    \"type\": \"boolean\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"message\",",
									"                \"success\"",
									"            ],",
									"            \"title\": \"Welcome6\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"postman.setNextRequest(\"UpdateBatch_BatchNoClasses_Invalid_Negative\");"
								],
								"type": "text/javascript",
								"id": "efb73006-d7c5-4f9b-ba6a-36d428d26efe"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description);\r",
									"pm.environment.set(\"int\", data.int);\r",
									"pm.environment.set(\"Batch_num_classes_Updated\", data.Batch_num_classes_Updated);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "feab2ea9-4492-4504-aff9-2e612516efba"
							}
						}
					],
					"id": "b9770463-5bea-4c14-8a2b-04273a775726",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{int}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes_Updated}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "UpdateBatch_BatchNoClasses_Invalid_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"batchId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"batchName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchDescription\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchStatus\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"batchNoOfClasses\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"programName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"batchId\",",
									"    \"batchName\",",
									"    \"batchDescription\",",
									"    \"batchStatus\",",
									"    \"batchNoOfClasses\",",
									"    \"programId\",",
									"    \"programName\"",
									"  ]",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"postman.setNextRequest(\"UpdateBatch_PgID_empty_Negative\");",
									""
								],
								"type": "text/javascript",
								"id": "d3357369-267d-4422-a044-de5062a13aed"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description);\r",
									"pm.environment.set(\"batch_Updatename\", data.batch_Updatename);\r",
									"pm.environment.set(\"string\", data.string);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "09504f4f-da7e-4254-a434-97643e907ea0"
							}
						}
					],
					"id": "63496b32-1d4b-4378-9aed-34381e06c232",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{batch_Updatename}}\",\r\n\t\"batchNoOfClasses\": \"{{string}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "UpdateBatch_PgID_empty_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome3\",",
									"    \"definitions\": {",
									"        \"Welcome3\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"timestamp\": {",
									"                    \"type\": \"string\",",
									"                    \"format\": \"date-time\"",
									"                },",
									"                \"status\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"error\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"path\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"error\",",
									"                \"path\",",
									"                \"status\",",
									"                \"timestamp\"",
									"            ],",
									"            \"title\": \"Welcome3\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"postman.setNextRequest(\"Create_Staff_Positive\");"
								],
								"type": "text/javascript",
								"id": "bddd6d25-260c-41c3-be7d-5a61cbf4464d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description);\r",
									"pm.environment.set(\"batch_Updatename\", data.batch_Updatename);\r",
									"pm.environment.set(\"Batch_num_classes_Updated\", data.Batch_num_classes_Updated);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "20a4f2e8-7337-43f5-bf3a-d4f7e3b4d5f5"
							}
						}
					],
					"id": "c602cf23-08e8-4027-a208-9c0314d4fdc6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{batch_Updatename}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes_Updated}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\":\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "DeleteBatch_BatID_Invalid_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fcba923-5269-4320-9da8-c244aeeecad8",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b68ff7ab-a10c-452d-af72-fafda979dd47",
								"exec": [
									"pm.environment.set(\"invalid_batchId\", data.invalid_batchId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9b77e587-996d-4bc1-ba99-e706d4fceff0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/batches/{{invalid_batchId}}"
					},
					"response": []
				},
				{
					"name": "DeleteBatch_BatchID_Postive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"postman.setNextRequest(\"Create1_Batch_Positive\"); "
								],
								"type": "text/javascript",
								"id": "5164d909-a1be-405d-98ee-7f87902b67c3"
							}
						}
					],
					"id": "dba68674-2a60-4935-b9fe-7d4b8bfc8d35",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/batches/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "Create1_Batch_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test('Check status code', () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
									"})",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome7\",",
									"    \"definitions\": {",
									"        \"Welcome7\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"batchId\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"batchName\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"batchDescription\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"batchStatus\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"batchNoOfClasses\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"programId\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"programName\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"batchDescription\",",
									"                \"batchId\",",
									"                \"batchName\",",
									"                \"batchNoOfClasses\",",
									"                \"batchStatus\",",
									"                \"programId\",",
									"                \"programName\"",
									"            ],",
									"            \"title\": \"Welcome7\"",
									"        }",
									"    }",
									"}",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"// Variable setting",
									"const responseData = pm.response.json();  ",
									"pm.environment.set(\"btch2_id\", responseData.batchId);",
									"pm.environment.set(\"btch2_name\", responseData.batchName);",
									"pm.environment.set(\"btch2_descp\", responseData.batchDescription);",
									"pm.environment.set(\"btch2_size\", responseData.batchNoOfClasses);",
									"pm.environment.set(\"btch2_status\", responseData.batchStatus);",
									"",
									"postman.setNextRequest(\"Create_Staff_Positive\");"
								],
								"type": "text/javascript",
								"id": "a33a717c-4127-46bd-a3c3-1ec2897cd335"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"batch_description\", data.batch_description );\r",
									"\r",
									"\r",
									"pm.environment.set(\"b_name\", data.batch_name);\r",
									"var name = pm.environment.get(\"b_name\");\r",
									"var conct_name = name +\"-\" + \"{{$randomInt}}\";\r",
									"pm.environment.set(\"batch_name\",conct_name );\r",
									"\r",
									"pm.environment.set(\"Batch_num_classes\", data.Batch_num_classes);\r",
									"\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "733c8d12-e2e0-4d70-b58e-4f9a1977cb2f"
							}
						}
					],
					"id": "4dbef18e-ad7e-49c5-b055-fb406dbdf91c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_description}}\",\r\n\t\"batchName\": \"{{batch_name}}\",\r\n\t\"batchNoOfClasses\": \"{{Batch_num_classes}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{program_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				}
			],
			"id": "5404e942-ec76-43eb-b446-4ad3df243914"
		},
		{
			"name": "UserModule_EndToEnd",
			"item": [
				{
					"name": "Create_Staff_Positive",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9be278c6-dc6a-466b-968c-e818632cdc95",
								"exec": [
									"//Step 1: \r",
									"var data_csv = pm.iterationData.toObject(); \r",
									"\r",
									"//FirstName\r",
									"var f_nm = data_csv.Staff_first_name;\r",
									"var firstNm =   \"{{$randomFirstName}}\";\r",
									"\r",
									"var concat_name = f_nm+ firstNm;\r",
									"\r",
									"pm.collectionVariables.set(\"Staff_frst_name\",concat_name );\r",
									"\r",
									"//email\r",
									"var sf_email = data_csv.Staff_email_id; \r",
									"var email = concat_name + sf_email; \r",
									"pm.collectionVariables.set(\"Stff_email_id\", email);\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"visa_status\", data.visa_status);\r",
									"pm.collectionVariables.set(\"time_zone\", data.time_zone);\r",
									"\r",
									"// phone_Number\r",
									"var ph_num = data_csv.Staff_ph_num; \r",
									"var randomInt = _.random(1852372345, 9999999999);\r",
									"var concat_ph = ph_num + randomInt; \r",
									"pm.collectionVariables.set(\"Stff_ph_num\", concat_ph);\r",
									"\r",
									"//.environment.set(\"ph_nm\",_.random(1852372345, 9999999999));\r",
									"\r",
									"\r",
									"console.log(concat_ph+ \" ,\"+concat_name+ \" ,\"+email)\r",
									"//Iterationcount \r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.collectionVariables.set(\"total_records\", list); \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ef806462-f35c-4bbe-883d-2db45bd72e5a",
								"exec": [
									"var responseData = pm.response.json();",
									"",
									"pm.environment.set('Staff_id', responseData.userId)",
									"",
									"pm.environment.set('Staff_ph', responseData.userPhoneNumber)",
									"",
									"pm.environment.set('Staff_email', responseData.userLoginEmail)",
									"",
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"})",
									"",
									"pm.test('Status code name has string', function () {",
									"    pm.response.to.have.status('Created');",
									"})",
									"",
									"pm.test('Status Code', function () {",
									"    pm.expect(pm.response.to.have.status(201));",
									"})",
									"",
									"const responseJson = pm.response.json();",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"userId\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userFirstName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userLastName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userMiddleName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userPhoneNumber\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"userLocation\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userTimeZone\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userLinkedinUrl\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userEduUg\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userEduPg\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userComments\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userVisaStatus\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userLoginEmail\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"userId\",",
									"    \"userFirstName\",",
									"    \"userLastName\",",
									"    \"userMiddleName\",",
									"    \"userPhoneNumber\",",
									"    \"userLocation\",",
									"    \"userTimeZone\",",
									"    \"userLinkedinUrl\",",
									"    \"userEduUg\",",
									"    \"userEduPg\",",
									"    \"userComments\",",
									"    \"userVisaStatus\",",
									"    \"userLoginEmail\"",
									"  ]",
									"}",
									"",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"",
									"",
									"",
									"console.log(responseJson);",
									"postman.setNextRequest(\"Create_Staff_InvalidPhNumber-Negative\"); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "de7f6ee9-da71-4a98-a569-a23d1a9cf797",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Staff\",\r\n  \"userEduPg\": \"Biochemistry\",\r\n  \"userEduUg\": \"Microbiology\",\r\n  \"userFirstName\": \"{{Staff_frst_name}}\",\r\n  \"userId\": \"\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/api\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R02\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{Stff_email_id}}\"\r\n  },\r\n  \"userMiddleName\": \"Tester\",\r\n  \"userPhoneNumber\": \"{{Stff_ph_num}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R02\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Staff_InvalidPhNumber-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"Staff_first_name\", data.Staff_first_name );\r",
									"pm.environment.set(\"Staff_email_id\", data.Staff_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"Staff_ph_num\", data.Staff_ph_num);\r",
									"pm.environment.set(\"int\", data.int);\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "61ecdd6a-f7c2-4e16-9d25-8c2b4611f146"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData= pm.response.json(); \r",
									"\r",
									"/* Negative test shouldn't store any results\r",
									"pm.collectionVariables.set(\"us_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"us_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"us_email\", responseData.userLoginEmail);\r",
									"*/\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"Create_Staff_userFirstname-Empty_Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "7010cfc7-53c3-446c-a58b-edef76a8c556"
							}
						}
					],
					"id": "8772dd14-eedc-4aba-a67a-6949b62d2a28",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Staff\",\r\n  \"userEduPg\": \"Biochemistry\",\r\n  \"userEduUg\": \"Microbiology\",\r\n  \"userFirstName\": \"{{Staff_first_name}}\",\r\n  \"userId\": \"\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/api\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R02\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{Staff_email_id}}\"\r\n  },\r\n  \"userMiddleName\": \"Tester\",\r\n  \"userPhoneNumber\": \"{{int}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R02\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Staff_userFirstname-Empty_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"Staff_first_name\", data.Staff_first_name );\r",
									"pm.environment.set(\"Staff_email_id\", data.Staff_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"Staff_ph_num\", data.Staff_ph_num);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "f2fb63dc-4256-4b6a-b331-403e2d38bef0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData= pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"us_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"us_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"us_email\", responseData.userLoginEmail);\r",
									"*/\r",
									"\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Create_Staff_userFirstname_Missing-Negative\"); \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "2cb2c45a-256d-45c3-b082-c2cb7884d57c"
							}
						}
					],
					"id": "1d63ec48-e89b-4aa2-865c-f787a62b7f07",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Staff\",\r\n  \"userEduPg\": \"Biochemistry\",\r\n  \"userEduUg\": \"Microbiology\",\r\n  \"userFirstName\": \"\",\r\n  \"userId\": \"\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/api\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R02\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{Staff_email_id}}\"\r\n  },\r\n  \"userMiddleName\": \"Tester\",\r\n  \"userPhoneNumber\": \"{{Staff_ph_num}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R02\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Staff_userFirstname_Missing-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"Staff_first_name\", data.Staff_first_name );\r",
									"pm.environment.set(\"Staff_email_id\", data.Staff_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"Staff_ph_num\", data.Staff_ph_num);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "659c83cc-e17c-4199-8079-6b195a136001"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData= pm.response.json(); \r",
									"\r",
									"/*\r",
									"pm.collectionVariables.set(\"us_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"us_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"us_email\", responseData.userLoginEmail);\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"*/\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Create_Staff_userFirstname_Invalid-Negative\"); \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "a2d28a06-7a49-4e0f-99e6-3377b678b624"
							}
						}
					],
					"id": "754a0792-1839-4e39-9162-d70ccb477a96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Staff\",\r\n  \"userEduPg\": \"Biochemistry\",\r\n  \"userEduUg\": \"Microbiology\",\r\n  \"userFirstName\": ,\r\n  \"userId\": \"\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/api\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R02\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{Staff_email_id}}\"\r\n  },\r\n  \"userMiddleName\": \"Tester\",\r\n  \"userPhoneNumber\": \"{{Staff_ph_num}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R02\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Staff_userFirstname_Invalid-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"Staff_first_name\", data.Staff_first_name );\r",
									"pm.environment.set(\"Staff_email_id\", data.Staff_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"Staff_ph_num\", data.Staff_ph_num);\r",
									"pm.environment.set(\"invalid_First_nm\", data.invalid_First_Name);\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "63bf8ea7-7064-41e3-8f27-bd8426f37319"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData= pm.response.json(); \r",
									"\r",
									"/*\r",
									"pm.collectionVariables.set(\"us_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"us_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"us_email\", responseData.userLoginEmail);\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"*/\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_postive\"); \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "34a2ca72-31b5-4b34-96e3-dfccdd41bb13"
							}
						}
					],
					"id": "7dcd2f1c-534d-4c50-8b46-445f6e8da4d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Staff\",\r\n  \"userEduPg\": \"Biochemistry\",\r\n  \"userEduUg\": \"Microbiology\",\r\n  \"userFirstName\": \"{{invalid_First_nm}}\",\r\n  \"userId\": \"\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/api\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R02\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{Staff_email_id}}\"\r\n  },\r\n  \"userMiddleName\": \"Tester\",\r\n  \"userPhoneNumber\": \"{{Staff_ph_num}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R02\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_postive",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"//Step 1: \r",
									"var data_csv = pm.iterationData.toObject(); \r",
									"\r",
									"//FirstName Student\r",
									"var f_nm = data_csv.Student_first_Name;\r",
									"var abc = 'abcdefghijklmnopqrstuvwxyz'\r",
									"var randomLetters = abc.charAt(Math.floor(Math.random()*1));\r",
									"var concat_name = f_nm+ randomLetters;\r",
									"\r",
									"pm.collectionVariables.set(\"first_nm_stud\",concat_name );\r",
									"\r",
									"//email\r",
									"var sd_email = data_csv.Student_email_id; \r",
									"var email = concat_name + sd_email; \r",
									"pm.collectionVariables.set(\"Stud_email_id\", email);\r",
									"\r",
									"pm.collectionVariables.set(\"visa_status\", data.visa_status);\r",
									"pm.collectionVariables.set(\"time_zone\", data.time_zone);\r",
									"\r",
									"\r",
									"// phone_Number\r",
									"var ph_num = data_csv.Student_ph_num; \r",
									"//var randomInt = Math.floor(Math.random()*999999999);\r",
									"var randomInt = _.random(1852372345, 9999999999);\r",
									"var concat_ph = ph_num + randomInt; \r",
									"pm.collectionVariables.set(\"Stud_ph_num\", concat_ph);\r",
									"\r",
									"console.log(concat_ph+ \" ,\"+concat_name+ \" ,\"+email)\r",
									"//Iterationcount \r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.collectionVariables.set(\"total_records\", list); \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "cf4836d9-9377-4e1c-a4dd-135d1fcad6d5"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json();\r",
									"\r",
									"pm.environment.set('std_id', responseData.userId);\r",
									"\r",
									"pm.environment.set('std_ph', responseData.userPhoneNumber);\r",
									"\r",
									"pm.environment.set('std_email', responseData.userLoginEmail);\r",
									"\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"pm.test('Status Code', function () {\r",
									"    pm.expect(pm.response.to.have.status(201));\r",
									"})\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userFirstName\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userLastName\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userMiddleName\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userPhoneNumber\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"userLocation\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userTimeZone\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userLinkedinUrl\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userEduUg\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userEduPg\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userComments\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userVisaStatus\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userLoginEmail\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userId\",\r",
									"    \"userFirstName\",\r",
									"    \"userLastName\",\r",
									"    \"userMiddleName\",\r",
									"    \"userPhoneNumber\",\r",
									"    \"userLocation\",\r",
									"    \"userTimeZone\",\r",
									"    \"userLinkedinUrl\",\r",
									"    \"userEduUg\",\r",
									"    \"userEduPg\",\r",
									"    \"userComments\",\r",
									"    \"userVisaStatus\",\r",
									"    \"userLoginEmail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test('Test the data type', () => {\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Missing-email-Negative\"); \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "68cf73f1-dee0-4ba8-8752-1e92ea1fbe5e"
							}
						}
					],
					"id": "258bd2d2-3a24-49fd-a379-e92fe061c1c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{first_nm_stud}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{Stud_email_id}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{Stud_ph_num}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Missing-email-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "f6c78052-ba01-4660-90c6-5c2620f213df"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/   \r",
									"\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Empty-email-Negative\"); "
								],
								"type": "text/javascript",
								"id": "5f7ecb15-8a89-4ebe-bcb1-ddf832215512"
							}
						}
					],
					"id": "31489e8f-d938-47cc-a0ed-537f892b6a18",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{frst_nm_std}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{std_ph}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Empty-email-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "30ac457b-a3ee-4118-9029-8250a34e7152"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/   \r",
									"\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Invalid-email-Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "b93072cc-6f32-482f-b9ce-89ce92245de7"
							}
						}
					],
					"id": "aaab1579-fa0a-4dec-b91f-4482d0401506",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{frst_nm_std}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{std_ph}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Invalid-email-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"pm.environment.set(\"invalid_email\", data.invalid_email);\r",
									"\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "ebb5bbb3-4bc4-4a5c-8357-bb59f28ac192"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/   \r",
									"\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Empty-userFirstname-Negative\"); "
								],
								"type": "text/javascript",
								"id": "31509afd-19f4-4d32-a4d7-d5c16d0c1948"
							}
						}
					],
					"id": "4cc080cc-b6d7-45ca-ab0f-10b6adf8ff20",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{frst_nm_std}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{invalid_email}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{std_ph}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Empty-userFirstname-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "6fe60c9c-ca34-465d-a375-a9359dc7d2c5"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/\r",
									"\r",
									" pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Missing-userFirstname-Negative\"); "
								],
								"type": "text/javascript",
								"id": "f46657e9-fa96-484a-b5ad-7dabbbb1c7ce"
							}
						}
					],
					"id": "a3236b90-026e-4884-9d6a-a2a8d99fda37",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id_std}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{std_ph}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Missing-userFirstname-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "f077b7b6-048a-4552-acfe-3a9113a66733"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/\r",
									"\r",
									" pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Invalid-userFirstname-Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "1ec17fa1-cbba-4fab-b982-39e5e449120b"
							}
						}
					],
					"id": "84a33dee-8307-47cd-96b7-eb1dc066b06a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": ,\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id_std}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{std_ph}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Invalid-userFirstname-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"pm.environment.set(\"invalid_First_nm\", data.invalid_First_Name);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "4527fef7-749d-442d-bffc-7dc4e0a562b4"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/\r",
									"\r",
									" pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Missing_Phno-Negative\"); "
								],
								"type": "text/javascript",
								"id": "a364c3df-e92b-43d5-8ffe-e1a70a3c0702"
							}
						}
					],
					"id": "3ffb5284-475e-4336-b53f-6b1102b4d310",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{invalid_First_nm}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id_std}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{std_ph}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Missing_Phno-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "34cf572c-e268-4c0a-a925-af761bd52878"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/\r",
									"\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Empty_Phno-Negative\"); "
								],
								"type": "text/javascript",
								"id": "d2104dc9-a70f-4c0f-895d-1093b7ddfd16"
							}
						}
					],
					"id": "d489025c-2714-47f4-9f0f-e9f9c8931fa5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{frst_nm_std}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id_std}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": ,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Empty_Phno-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "f67bf65b-f83f-41a0-aa31-7625d1f88565"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/\r",
									"   \r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Create_Student_Invalid_Phno-Negative\"); "
								],
								"type": "text/javascript",
								"id": "044960bf-e679-4503-9fd7-ad515b4bc0cb"
							}
						}
					],
					"id": "6b97f445-729b-4959-b416-c0f9dfad3458",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{frst_nm_std}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id_std}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Invalid_Phno-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"pm.environment.set(\"invalid_phone\", data.invalidphone);\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "d4b34872-c02e-4308-b9e2-fcbee2c49c46"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json(); \r",
									"\r",
									"/*pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"*/\r",
									"   \r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"All Users _positive\"); "
								],
								"type": "text/javascript",
								"id": "28cd73ee-5b1a-44af-98e8-b0d0c76c0e52"
							}
						}
					],
					"id": "11ef2ab7-9475-4f24-90fa-404010e0ae36",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{frst_nm_std}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id_std}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{invalid_phone}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{time_zone}}\",\r\n  \"userVisaStatus\": \"{{visa_status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "All Users _positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"postman.setNextRequest(\"All Users _With-Noauth-Negative\");"
								],
								"type": "text/javascript",
								"id": "b84fded9-9d93-4580-bf6f-8900babb2a39"
							}
						}
					],
					"id": "b936fd54-a1ef-4bcc-b469-79d278862336",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users"
					},
					"response": []
				},
				{
					"name": "All Users _With-Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Unauthorized\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Get All Users Invalid Endpoint-Negative\"); \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "0f693d20-3141-429b-994e-2c9079ee82a0"
							}
						}
					],
					"id": "3965886c-9a9f-4a71-b4fd-4ef013e886e2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users"
					},
					"response": []
				},
				{
					"name": "Get All Users Invalid Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"All User Roles_positive\"); "
								],
								"type": "text/javascript",
								"id": "9240efc0-0855-4283-bf20-8a9feb10a3fe"
							}
						}
					],
					"id": "5f99e532-7fab-4405-9593-e521ad7f4be9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "All User Roles_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"var keyCount  = Object.keys(jsonData).length;\r",
									"pm.collectionVariables.set(\"total_users\", keyCount);\r",
									"console.log(keyCount);})\r",
									"\r",
									"postman.setNextRequest(\"All User Roles_Noauth-Negative\");"
								],
								"type": "text/javascript",
								"id": "964cafde-0463-4030-a66c-15ff245800c4"
							}
						}
					],
					"id": "290d006d-1963-48dd-9174-bc9d7b209e79",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/roles"
					},
					"response": []
				},
				{
					"name": "All User Roles_Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Unauthorized\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"All User Roles_Invalid-Endpoint-Negative\"); "
								],
								"type": "text/javascript",
								"id": "ba585ee2-432e-4bad-9c91-284d0a2b3797"
							}
						}
					],
					"id": "5fd3e6df-f480-469b-a491-30129fa1157d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/roles"
					},
					"response": []
				},
				{
					"name": "All User Roles_Invalid-Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Get User information_ UserId_Positive\"); "
								],
								"type": "text/javascript",
								"id": "b7cc6786-ec98-49fd-8849-a7118fd634d7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalid_endpoint\", data.invalid_endpoint );"
								],
								"type": "text/javascript",
								"id": "3d4e14ae-047a-467b-91ca-1d63c3564b19"
							}
						}
					],
					"id": "eaf83936-00a9-4a48-af9e-9889e639fb3b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Get User information_ UserId_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"user\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userFirstName\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userLastName\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userMiddleName\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userPhoneNumber\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"userLocation\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userTimeZone\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userLinkedinUrl\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userEduUg\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userEduPg\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userComments\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userVisaStatus\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userLoginEmail\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"userFirstName\",\r",
									"        \"userLastName\",\r",
									"        \"userMiddleName\",\r",
									"        \"userPhoneNumber\",\r",
									"        \"userLocation\",\r",
									"        \"userTimeZone\",\r",
									"        \"userLinkedinUrl\",\r",
									"        \"userEduUg\",\r",
									"        \"userEduPg\",\r",
									"        \"userComments\",\r",
									"        \"userVisaStatus\",\r",
									"        \"userLoginEmail\"\r",
									"      ]\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"uniqueItems\": true,\r",
									"      \"minItems\": 1,\r",
									"      \"items\": {\r",
									"        \"required\": [\r",
									"          \"roleId\",\r",
									"          \"userRoleStatus\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"          \"roleId\": {\r",
									"            \"type\": \"string\",\r",
									"            \"minLength\": 1\r",
									"          },\r",
									"          \"userRoleStatus\": {\r",
									"            \"type\": \"string\",\r",
									"            \"minLength\": 1\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"user\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Get User information_ UserId_Noauth-Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "dfa3b821-70c6-4bc8-8c69-1ee606f4ccc0"
							}
						}
					],
					"id": "e90228ad-097b-487f-8bd8-43efd4ad3840",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Get User information_ UserId_Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Unauthorized\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Get User information_ UserId_Invalid-Userid-Negative\"); "
								],
								"type": "text/javascript",
								"id": "fbe7d1a7-b8a9-4027-b676-7a020ce56167"
							}
						}
					],
					"id": "92e19701-6224-4b60-b78a-1fc1ce972bf6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Get User information_ UserId_Invalid-Userid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"postman.setNextRequest(\"Get all Users with roles_Positive\"); "
								],
								"type": "text/javascript",
								"id": "bfaf4311-d9bd-49db-97fa-9f0c4d9e9bb4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "cabb3f2a-ae01-471a-b977-04cb4dcdc93a"
							}
						}
					],
					"id": "e8e769c3-e4ff-402b-975b-1f27459d3ab9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}000"
					},
					"response": []
				},
				{
					"name": "Get all Users with roles_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"});\r",
									"postman.setNextRequest(\"Get all Users with roles_Noauth-Negative\"); "
								],
								"type": "text/javascript",
								"id": "b0ccc331-0b05-4897-b982-638957cfef50"
							}
						}
					],
					"id": "2389a522-0d3b-4191-ad9c-f4b371814ac9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/roles"
					},
					"response": []
				},
				{
					"name": "Get all Users with roles_Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Unauthorized\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Get all Users with roles_Invalid-Endpoint-Negative\"); "
								],
								"type": "text/javascript",
								"id": "6afd4d07-dbe0-4a75-9887-25f4f6850e5e"
							}
						}
					],
					"id": "24e07536-c24c-4b49-854e-424cc48e51f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/roles"
					},
					"response": []
				},
				{
					"name": "Get all Users with roles_Invalid-Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Count_active_Inactive_positive\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "1ae206fe-93db-4a3a-a78a-aded47aec3d9"
							}
						}
					],
					"id": "1119d3d1-56d2-4e8e-acaf-aae793129b02",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Count_active_Inactive_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"var keyCount  = Object.keys(jsonData).length;\r",
									"console.log(keyCount);})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"});\r",
									"\r",
									"/*\r",
									"added by BK\r",
									"*/\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"var keyCount  = Object.keys(jsonData).length;\r",
									"console.log(keyCount);\r",
									"pm.collectionVariables.set(\"active_users\", keyCount)\r",
									"});\r",
									"console.log(pm.collectionVariables.get(\"total_users\"));\r",
									"console.log(pm.collectionVariables.get(\"active_users\"));\r",
									"Active_users = pm.collectionVariables.get(\"active_users\");\r",
									"var Inactive_users = pm.collectionVariables.get(\"total_users\") - pm.collectionVariables.get(\"active_users\");\r",
									"console.log(\"Number of Inactive User : \" + Inactive_users);\r",
									"console.log(\"Number of Active User : \" +  Active_users);\r",
									"\r",
									"postman.setNextRequest(\"Count_active_NoAuth_Negative\"); "
								],
								"type": "text/javascript",
								"id": "95a7a7a6-c19f-404c-9f01-e5b333450d8c"
							}
						}
					],
					"id": "8d3aa58c-7b7c-4704-8eca-a9edb832e2b1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/activeUsers"
					},
					"response": []
				},
				{
					"name": "Count_active_NoAuth_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"var keyCount  = Object.keys(jsonData).length;\r",
									"console.log(keyCount);})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Unauthorized\");\r",
									"    });\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Count_activ_-Invalid-Endpoint-Negative\"); "
								],
								"type": "text/javascript",
								"id": "608a0928-161e-467b-abeb-e764248ef3ce"
							}
						}
					],
					"id": "1859dd57-f476-4723-9f73-1480ff3292e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/activeUsers"
					},
					"response": []
				},
				{
					"name": "Count_activ_-Invalid-Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"var keyCount  = Object.keys(jsonData).length;\r",
									"console.log(keyCount);})\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Update_userRoleProgram_BatchStatus_postive\"); "
								],
								"type": "text/javascript",
								"id": "a4e5aa9d-43ca-481a-9f05-db121e845d1f"
							}
						}
					],
					"id": "e09ee520-db3a-4830-82d0-189071c24cd2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_postive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Update_userRoleProgram_BatchStatus_Inactive_Negative\"); "
								],
								"type": "text/javascript",
								"id": "452c6c99-48f0-4b68-a6f2-df05fa45bcec"
							}
						}
					],
					"id": "d6b19a39-52cd-4576-aea0-39bc524b3166",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{program_id}}\",\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"{{btch2_id}}\",\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_Inactive_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Update_userRoleProgram_BatchStatus_missing-batchid-Negative\"); \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "335ff790-9236-422f-8dfd-a3ebce63d684"
							}
						}
					],
					"id": "e871debd-445c-4dbf-a730-04e749b4d7bb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{program_id}}\",\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"{{btch_id}}\",\r\n      \"userRoleProgramBatchStatus\": \"Inactive\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_missing-batchid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Update_userRoleProgram_BatchStatus_empty-prgid-Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "42dfc0d2-bd57-4200-8b4b-d4767c35afd8"
							}
						}
					],
					"id": "398e0cdd-6093-4579-b954-7fe444cd084e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{program_id}}\",\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"\",\r\n      \"userRoleProgramBatchStatus\": \"Inactive\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_empty-prgid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Update_userRoleProgram_BatchStatus_Invalid-Roleid-Negative\"); "
								],
								"type": "text/javascript",
								"id": "e9ec2d1a-287d-4be0-96ec-7bbb26a457b4"
							}
						}
					],
					"id": "3d7027cf-d43f-4d07-8cd6-c540622c2c9a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"\",\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"{{btch_id}}\",\r\n      \"userRoleProgramBatchStatus\": \"Inactive\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_Invalid-Roleid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Gets User by Program Batches\"); "
								],
								"type": "text/javascript",
								"id": "169c9709-c807-43b5-b3c1-9bd30ec2e13b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalidroldID\", data.invalidroldID );"
								],
								"type": "text/javascript",
								"id": "5de09a76-dc43-4b10-9b80-c14239f5dd16"
							}
						}
					],
					"id": "e2a846d2-b3e6-4f7a-9d61-fb44642f3438",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{program_id}}\",\r\n  \"roleId\": \"{{invalidroldID}}\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"{{btch_id}}\",\r\n      \"userRoleProgramBatchStatus\": \"Inactive\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Gets User by Program Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Gets User by Program Batches-Noauth-Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "7c24165d-6435-4019-bda0-165cdecac8c7"
							}
						}
					],
					"id": "7ba5bf91-59db-4ee1-a753-73f253935166",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programBatch/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "Gets User by Program Batches-Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Gets User by Program Batches-Invalid Endpoint-Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "737d38b8-840c-4b9f-b8f9-5cd0e0c55132"
							}
						}
					],
					"id": "c8a5fc7f-8afd-4b42-8158-e58ce8f3aa57",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programBatch/{{btch2_id}}"
					},
					"response": []
				},
				{
					"name": "Gets User by Program Batches-Invalid Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Gets Users for Program_positive\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "4f18d075-e8f6-4e8e-ab22-4cf64993e59c"
							}
						}
					],
					"id": "b802fdda-20d6-4f96-84cb-7d6821ead1d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programBatch/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Gets Users for Program_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Gets Users for Program_No auth-Negative\"); "
								],
								"type": "text/javascript",
								"id": "39cf9622-c636-4178-8caa-6b760ac7ae55"
							}
						}
					],
					"id": "22d3a000-af46-4804-8bc5-8354ef1b30b5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programs/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "Gets Users for Program_No auth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"var schema  = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Gets Users for Program_Invalid-endpoint-Negative\"); "
								],
								"type": "text/javascript",
								"id": "286ca6c6-6c84-4aa8-8609-e393b80a52fc"
							}
						}
					],
					"id": "cec0a81e-ce28-4314-bd84-62b891a1e009",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programs/{{program_id}}"
					},
					"response": []
				},
				{
					"name": "Gets Users for Program_Invalid-endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Gets Users by RoleID_R03 Positive\"); "
								],
								"type": "text/javascript",
								"id": "489dc6e9-fd9b-4136-b350-97ad9e4be51b"
							}
						}
					],
					"id": "34d86003-312e-4068-9828-14435dc8fde4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programs/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Gets Users by RoleID_R03 Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Gets Users by RoleID_R03-Noauth-Negative\"); "
								],
								"type": "text/javascript",
								"id": "7a901c75-6ccd-4a1d-ae49-2a0e9fc6ecfc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"RoleID\", data.RoleID );\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "9fd170e3-0337-4dfa-b866-dd80b109ebd7"
							}
						}
					],
					"id": "ee906b30-a53d-43f5-886b-30dd32c8553d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/roles/{{RoleID}}"
					},
					"response": []
				},
				{
					"name": "Gets Users by RoleID_R03-Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Gets Users by roleId Invalid Endpoint-Negative\"); "
								],
								"type": "text/javascript",
								"id": "a64d3f78-23b0-433e-ab8c-2dd6b30f01d5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"RoleID\", data.RoleID );\r",
									"\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); "
								],
								"type": "text/javascript",
								"id": "c479c61d-6fbe-4db0-8f32-c1b4c1c89152"
							}
						}
					],
					"id": "b5cd71ea-4641-4a31-a994-088e854267b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/roles/{{RoleID}}"
					},
					"response": []
				},
				{
					"name": "Gets Users by roleId Invalid Endpoint-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "0aee35db-59d0-4883-8a73-0512c70f7fd1"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Gets Users by roleId V2_postive\"); "
								],
								"type": "text/javascript",
								"id": "063ba24a-a654-45eb-823c-2a53151ad8f0"
							}
						}
					],
					"id": "bc507087-e0da-4abd-aca1-fa24489d3277",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/roles/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Gets Users by roleId V2_postive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Gets Users by roleId V2_No auth-Negative\"); "
								],
								"type": "text/javascript",
								"id": "fed0998f-4b6c-4213-9696-42c0baf859b4"
							}
						}
					],
					"id": "9860adb2-84cc-4a8a-9a53-6f38fd285440",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/v2/users"
					},
					"response": []
				},
				{
					"name": "Gets Users by roleId V2_No auth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Gets Users by roleId V2 Invalid Endpoint-Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "a6262d6f-beb2-48b6-9dc6-87e52e6f9df8"
							}
						}
					],
					"id": "84136769-bfdf-46f3-ab4d-698e4c71ef4c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/v2/users"
					},
					"response": []
				},
				{
					"name": "Gets Users by roleId V2 Invalid Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"postman.setNextRequest(\"Update_Student_Location_Positive\"); "
								],
								"type": "text/javascript",
								"id": "11fade70-f683-402a-9bc0-236f21ca7a46"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalid_endpoint\", data.invalid_endpoint );"
								],
								"type": "text/javascript",
								"id": "bff60f0c-8ccb-47aa-a24d-fe65dfd9248b"
							}
						}
					],
					"id": "0fdcfde5-0ec4-45eb-b145-7e825680f985",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/v2/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Update_Student_Location_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Existing Batch\");\r",
									"});\r",
									"pm.test(\"Update User Location\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.batchId).to.eql(8773);\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"March24-API HEXA-DA-SDET01-003\");\r",
									"});\r",
									"*/\r",
									"\r",
									"postman.setNextRequest(\"Update User_user-phonenumber-missing integer-Negative\"); "
								],
								"type": "text/javascript",
								"id": "f2db7064-fe7d-4ff1-96b4-85ce17262bd5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"frst_nm_std\", data.Student_first_Name );\r",
									"pm.environment.set(\"email_id_std\", data.Student_email_id);\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"time_zone\", data.time_zone);\r",
									"pm.environment.set(\"std_ph\", data.Student_ph_num);\r",
									"pm.environment.set(\"new_location\",data.NW_Location);\r",
									"var list = pm.info.iterationCount; \r",
									"console.log(list); \r",
									"pm.environment.set(\"total_records\", list); \r",
									""
								],
								"type": "text/javascript",
								"id": "52517402-9ae0-44d7-8d1d-0d863c3b7272"
							}
						}
					],
					"id": "4788cb2e-4419-4a06-b619-2ef0b34b5d0c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"userId\": \"{{std_id}}\",\r\n        \"userFirstName\": \"{{frst_nm_std}}\",\r\n        \"userLastName\": \"Goi\",\r\n        \"userMiddleName\": \"GAh\",\r\n        \"userPhoneNumber\": \"{{std_ph}}\",\r\n        \"userLocation\": \"{{new_location}}\",\r\n        \"userTimeZone\": \"{{time_zone}}\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/hopeisbest\",\r\n        \"userEduUg\": \"BBA\",\r\n        \"userEduPg\": \"MBA\",\r\n        \"userComments\": \"ok\",\r\n        \"userVisaStatus\": \"{{visa_status}}\",\r\n        \"userLoginEmail\": \"{{email_id_std}}\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update User_user-phonenumber-missing integer-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Update User_wrong-visa status-Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "33f59ff6-7aae-443c-a30e-faadd72f11c9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalidphone\", data.invalidphone);\r",
									"\r",
									"pm.environment.set(\"visa_status\", data.visa_status);\r",
									"pm.environment.set(\"Student_email_id\", data.Student_email_id);"
								],
								"type": "text/javascript",
								"id": "7e087dbd-32a3-472d-b1f3-633c0403774b"
							}
						}
					],
					"id": "9bfd8c63-940e-45e3-9ae0-a2f72e1b59b8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"userId\": \"{{std_id}}\",\r\n        \"userFirstName\": \"sam\",\r\n        \"userLastName\": \"goi\",\r\n        \"userMiddleName\": \"GAh\",\r\n        \"userPhoneNumber\": \"{{invalidphone}}\",\r\n        \"userLocation\": \"EST\",\r\n        \"userTimeZone\": \"IST\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/hopeisbest\",\r\n        \"userEduUg\": \"BBA\",\r\n        \"userEduPg\": \"MBA\",\r\n        \"userComments\": \"ok\",\r\n        \"userVisaStatus\": \"{{visa_status}}\",\r\n        \"userLoginEmail\": \"{{Student_email_id}}\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update User_wrong-visa status-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema  = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Update User_Location_Empty-string-userFirstName-Negative\"); "
								],
								"type": "text/javascript",
								"id": "5d45235d-7510-4d29-b6e4-4a27b238652c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalidvisa\", data.invalidvisa)"
								],
								"type": "text/javascript",
								"id": "1d72a054-d931-4463-a4e4-d1b22e1ac0ee"
							}
						}
					],
					"id": "121b5faf-b46f-4002-a85b-e989d8e9d539",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"userId\": \"{{std_id}}\",\r\n        \"userFirstName\": \"sam\",\r\n        \"userLastName\": \"goi\",\r\n        \"userMiddleName\": \"GAh\",\r\n        \"userPhoneNumber\": 7894561233,\r\n        \"userLocation\": \"EST\",\r\n        \"userTimeZone\": \"IST\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/hopeisbest\",\r\n        \"userEduUg\": \"BBA\",\r\n        \"userEduPg\": \"MBA\",\r\n        \"userComments\": \"ok\",\r\n        \"userVisaStatus\": \"{{invalidvisa}}\",\r\n        \"userLoginEmail\": \"swa@gmail.com\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update User_Location_Empty-string-userFirstName-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Update User Role Status_Std_positive\"); "
								],
								"type": "text/javascript",
								"id": "3192b6ab-4c10-4507-ad5f-bc58e1cbec92"
							}
						}
					],
					"id": "b97af784-7e2d-4968-8ce5-c6b83606bb43",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"userId\": \"{{std_id}}\",\r\n        \"userFirstName\": \"\",\r\n        \"userLastName\": \"Goi\",\r\n        \"userMiddleName\": \"GAh\",\r\n        \"userPhoneNumber\": 7894561233,\r\n        \"userLocation\": \"EST\",\r\n        \"userTimeZone\": \"IST\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/hopeisbest\",\r\n        \"userEduUg\": \"BBA\",\r\n        \"userEduPg\": \"MBA\",\r\n        \"userComments\": \"ok\",\r\n        \"userVisaStatus\": \"H4\",\r\n        \"userLoginEmail\": \"Bestofbest@gmail.com\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update User Role Status_Std_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Update User Role Status_Std_wrong-Roleid-Negative\"); "
								],
								"type": "text/javascript",
								"id": "bd6b5dca-9089-4552-a6dd-67417f9b8bdf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"RoleID\", data.RoleID);"
								],
								"type": "text/javascript",
								"id": "7e9413fa-f8a1-4f79-a6a5-11de763d6caa"
							}
						}
					],
					"id": "bca42199-3b78-4c27-9e24-fc99370747a2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"{{RoleID}}\",\r\n  \"userRoleStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update User Role Status_Std_wrong-Roleid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"postman.setNextRequest(\"Update User Role Status_Stf_positive\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "f1ac50bb-125a-4506-9c9d-497ddb628614"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"string\", data.string );"
								],
								"type": "text/javascript",
								"id": "a27caf4c-8da8-4f3e-9bf5-4502b616bdd9"
							}
						}
					],
					"id": "06685918-369a-4795-a91a-95e6210572e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"{{invalidroldID}}\",\r\n  \"userRoleStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus/{{string}}"
					},
					"response": []
				},
				{
					"name": "Update User Role Status_Stf_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Update User Role Status_Stf_Invalid-roleid-Negative\"); "
								],
								"type": "text/javascript",
								"id": "f8c48853-3e77-415c-8c92-31fbb056e329"
							}
						}
					],
					"id": "5d299945-11ec-4637-a83c-01469924bc3a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"R02\",\r\n  \"userRoleStatus\": \"Inactive\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus/{{Staff_id}}"
					},
					"response": []
				},
				{
					"name": "Update User Role Status_Stf_Invalid-roleid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"updateUserLoginStatus_Staff_positive\"); "
								],
								"type": "text/javascript",
								"id": "0bb8debf-c8d6-4264-99f7-ac8e01a19265"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalid_RL\",data.invalidroldID);"
								],
								"type": "text/javascript",
								"id": "d568bf47-0d4f-4639-902c-979ab1a7894b"
							}
						}
					],
					"id": "99d99b92-339b-4dbc-8492-f227fb2277cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"{{invalid_RL}}\",\r\n  \"userRoleStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus/{{Staff_id}}"
					},
					"response": []
				},
				{
					"name": "updateUserLoginStatus_Staff_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f843441b-26a7-4918-9e51-6311c6d56cb3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"updateUserLoginStatus_Staff_NoAuth_Negative\"); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e8b04207-63ab-4258-b7b3-dcfd00bea505",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "683d78fa-0600-470e-974c-557b84f5af79",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"Password@123\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"{{Staff_email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/userLogin/{{Staff_id}}"
					},
					"response": []
				},
				{
					"name": "updateUserLoginStatus_Staff_NoAuth_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"updateUserLoginStatus_Endpointmissing-Negative\"); "
								],
								"type": "text/javascript",
								"id": "e9646b46-f2bb-4179-b4c5-80c06ea8e148"
							}
						}
					],
					"id": "462828ae-31f1-4044-90ae-d6b864316162",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"Password@123\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"apihexastudent@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/userLogin/{{Staff_id}}"
					},
					"response": []
				},
				{
					"name": "updateUserLoginStatus_Endpointmissing-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1cf9fc04-1a9d-49c4-9f8e-1a32e590f2b3",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(String);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"Delete SingleUser invalid User\"); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0fd942d2-12ae-43a4-80f3-087d44590701",
								"exec": [
									"pm.environment.set(\"invalid_userID\", data.invalid_userID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9f917ed1-5e75-415a-9209-4630aed29b22",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"Password@123\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"{{std_email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/userLogin/{{invalid_userID}}"
					},
					"response": []
				},
				{
					"name": "Delete SingleUser invalid User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response time is less than 2500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);",
									"});",
									"",
									"",
									"",
									"postman.setNextRequest(\"Delete SingleUser NoAuth-Negative\"); "
								],
								"type": "text/javascript",
								"id": "4c681861-5c79-42b4-bd0a-e65f2b06be81"
							}
						}
					],
					"id": "3abcf55b-136a-4fc4-91f1-31356f8468d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/users/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Delete SingleUser NoAuth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response time is less than 2500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);",
									"});",
									"",
									"",
									"postman.setNextRequest(\"Delete SingleUser- Positive\"); "
								],
								"type": "text/javascript",
								"id": "085eb60f-9ee1-497a-81ae-272fb2d359ab"
							}
						}
					],
					"id": "409e4d11-ae8b-485c-b954-126ab0b41f94",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/users/{{Staff_id}}"
					},
					"response": []
				},
				{
					"name": "Delete SingleUser- Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"postman.setNextRequest(\"GetPrgmBatchAllUsers_Positive\"); "
								],
								"type": "text/javascript",
								"id": "f8af0685-deaf-4590-b85c-dfcdfd2e0dd8"
							}
						}
					],
					"id": "e09c81e2-a84d-4d8f-ab90-cf684868ee75",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/users/{{Staff_id}}"
					},
					"response": []
				}
			],
			"id": "70c79548-713c-4b54-ba02-41c290eedef2"
		},
		{
			"name": "User role Program batch Map Controller",
			"item": [
				{
					"name": "GetPrgmBatchAllUsers_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//status code validation",
									"",
									"pm.test('Success GET Request', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([",
									"        200,",
									"        201,",
									"        202",
									"    ]);",
									"})",
									"",
									"//content type validation",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson[0].userId).to.be.a('string');",
									"    pm.expect(responseJson[0].roleId).to.be.a('string');",
									"    pm.expect(responseJson[0].programId).to.be.a('number');",
									"    pm.expect(responseJson[0].batchId).to.be.a('number');",
									"    pm.expect(responseJson[0].userRoleProgramBatchStatus).to.be.a('string');",
									"});",
									"",
									"//header validation",
									"pm.test('check content-Type header', function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"})",
									"",
									"//json schema validation",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"minItems\": 1,",
									"  \"uniqueItems\": true,",
									"  \"items\": {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"      \"userId\",",
									"      \"roleId\",",
									"      \"programId\",",
									"      \"batchId\",",
									"      \"userRoleProgramBatchStatus\"",
									"    ],",
									"    \"properties\": {",
									"      \"userId\": {",
									"        \"type\": \"string\",",
									"        \"minLength\": 1",
									"      },",
									"      \"roleId\": {",
									"        \"type\": \"string\",",
									"        \"minLength\": 1",
									"      },",
									"      \"programId\": {",
									"        \"type\": \"number\"",
									"      },",
									"      \"batchId\": {",
									"        \"type\": \"number\"",
									"      },",
									"      \"userRoleProgramBatchStatus\": {",
									"        \"type\": \"string\",",
									"        \"minLength\": 1",
									"      }",
									"    }",
									"  }",
									"};",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"//assign parameter for delete operation",
									"var assigned_UserPrograms = pm.response.json();",
									"pm.collectionVariables.set('userID', assigned_UserPrograms[0].userId);",
									"",
									"",
									"postman.setNextRequest(\"GetPrgmBatchUserID_Positive\");"
								],
								"type": "text/javascript",
								"id": "313848cb-cfb4-4421-b1b6-0ee3c1ae08fc"
							}
						}
					],
					"id": "db7096f6-b110-4abb-a7d9-a1564f1ddc17",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/userRoleProgramBatchMap"
					},
					"response": []
				},
				{
					"name": "GetPrgmBatchUserID_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Successful GET Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201,\r",
									"        202\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//content tpe validation\r",
									"pm.test(\"The response has all properties\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson[0].userId).to.be.a('string');\r",
									"    pm.expect(responseJson[0].roleId).to.be.a('string');\r",
									"    pm.expect(responseJson[0].programId).to.be.a('number');\r",
									"    pm.expect(responseJson[0].batchId).to.be.a('number');\r",
									"    pm.expect(responseJson[0].userRoleProgramBatchStatus).to.be.a('string');\r",
									"});\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"GetPrgmBatchUserID_NotEnrolled_Negative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "2373330a-8246-4f00-add6-5af5df8f6cf1"
							}
						}
					],
					"id": "8607b584-6c16-4a83-9f7a-552bec7dbb64",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/userRoleProgramBatchMap/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "GetPrgmBatchUserID_NotEnrolled_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Successful GET Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        404,\r",
									"        400,\r",
									"        401\r",
									"    ]);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"\r",
									"//json schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"GetPrgmBatchAllUsers_InvalidURLNegative\"); \r",
									""
								],
								"type": "text/javascript",
								"id": "2b1e0f36-be2a-4efb-bdd4-ce1d0e1d2fe9"
							}
						}
					],
					"id": "a0259c76-5f30-4555-91a0-5a36a6082439",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/userRoleProgramBatchMap/{{Staff_id}}"
					},
					"response": []
				},
				{
					"name": "GetPrgmBatchAllUsers_InvalidURLNegative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Negative GET Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        404,\r",
									"        401,\r",
									"        408\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"\r",
									"//json schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"//schema comparison\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"GetPrgmBatch_InvalidUserID_Negative\"); "
								],
								"type": "text/javascript",
								"id": "abb41c77-2fe8-46e9-a479-682fd175ea76"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalid_endpoint\", data.invalid_endpoint);"
								],
								"type": "text/javascript",
								"id": "5213a9fd-c571-4b96-9746-d9cf4a68a3b1"
							}
						}
					],
					"id": "310c651d-962e-4274-ba33-7cc5b74147c7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "GetPrgmBatch_InvalidUserID_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Negative GET Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        404,\r",
									"        401,\r",
									"        408\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"\r",
									"//json schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"postman.setNextRequest(\"GetPrgmBatchNoTokenUserID_Negative\");"
								],
								"type": "text/javascript",
								"id": "35d96122-b816-46f6-b0a6-c6085f13de5b"
							}
						}
					],
					"id": "e05f786a-29a2-4f9a-976f-dd0e5f836962",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/userRoleProgramBatchMap/{{std_id}}2"
					},
					"response": []
				},
				{
					"name": "GetPrgmBatchNoTokenUserID_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Invalid URL response', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        401,\r",
									"        404,\r",
									"        408\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"//status message validation\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"\r",
									"//json schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"postman.setNextRequest(\"Update_userRoleProgram_BatchStatus_Assign_Positive\"); "
								],
								"type": "text/javascript",
								"id": "812d7b46-4dcc-4bef-9d4f-ac950b6d096b"
							}
						}
					],
					"id": "3446c21c-f245-4828-b3d7-90fd79b8c87b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/userRoleProgramBatchMap/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_Assign_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Update_userRoleProgram_BatchStatus_Assign_Positive\"); "
								],
								"type": "text/javascript",
								"id": "4394ed96-3e93-4c6e-a5ff-b8add23b827f"
							}
						}
					],
					"id": "77a84825-1fc7-4e6b-9c53-01ac089d0ffb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{program_id}}\",\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"{{btch_id}}\",\r\n      \"userRoleProgramBatchStatus\": \"Inactive\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_Assign_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"DeleteAssignedAllProgramsBatchInvalidUserId_Negative\");"
								],
								"type": "text/javascript",
								"id": "f453c489-6e28-4cd5-ad5a-ba8bbedaffcf"
							}
						}
					],
					"id": "4b250af4-b999-4228-a145-2ec84437c3bb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{program_id}}\",\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"{{btch2_id}}\",\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "DeleteAssignedAllProgramsBatchInvalidUserId_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Negative DELETE Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        404,\r",
									"        401,\r",
									"        408\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//json schema validation\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"postman.setNextRequest(\"DeleteAssignedAllProgramsBatchUserId_Positive\"); "
								],
								"type": "text/javascript",
								"id": "0e213b69-a7db-4eaf-b36a-f25c8aac8aa2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalid_endpoint\", data.invalid_endpoint);"
								],
								"type": "text/javascript",
								"id": "18de85c3-691f-4144-9c07-efb1d9b0968d"
							}
						}
					],
					"id": "cf6390e3-054f-4459-9efe-45f7ef5513fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/userRoleProgramBatchMap/deleteAll/{{invalid_endpoint}}"
					},
					"response": []
				},
				{
					"name": "DeleteAssignedAllProgramsBatchUserId_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Success DELETE Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201,\r",
									"        202\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"//content type validation\r",
									"pm.test(\"The response has all properties\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"    pm.expect(responseJson.success).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"\r",
									"//json schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome6\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome6\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome6\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"postman.setNextRequest('Logout_LMS'); "
								],
								"type": "text/javascript",
								"id": "7de07e19-dca1-4d37-806d-c93a9193ab0e"
							}
						}
					],
					"id": "f00cc1eb-1038-4d08-b621-398963a07c5d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/userRoleProgramBatchMap/deleteAll/{{std_id}}"
					},
					"response": []
				}
			],
			"id": "cb722551-3dce-4c2e-8035-38410c09d4f1"
		},
		{
			"name": "Userlogin EndtoEnd",
			"item": [
				{
					"name": "Logout_LMS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ae02c608-3998-47e3-a128-b9debc26add9"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0e9543ed-ad61-4f97-bc64-a37b74c5576e"
							}
						}
					],
					"id": "f5910db7-af69-40f7-872e-c86b3328b2cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/logoutlms"
					},
					"response": []
				}
			],
			"id": "4095dfb7-b2e8-4ac5-a4ca-0d1f7b6565c9"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{access-token-DD}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "2d263470-420b-4d27-89a3-cd6966fd2cf7"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "4ae3e42d-d168-487a-bcd6-6a30e008f500"
			}
		}
	],
	"variable": [
		{
			"key": "access-token-DD",
			"value": ""
		},
		{
			"key": "program_description",
			"value": ""
		},
		{
			"key": "cx3_program_nm",
			"value": ""
		},
		{
			"key": "total_records",
			"value": ""
		},
		{
			"key": "batch_description",
			"value": ""
		},
		{
			"key": "batch1_name",
			"value": ""
		},
		{
			"key": "Batch_num_classes",
			"value": ""
		},
		{
			"key": "batch2_name",
			"value": ""
		},
		{
			"key": "bt_id",
			"value": ""
		},
		{
			"key": "bt_nm",
			"value": ""
		},
		{
			"key": "bt_ds",
			"value": ""
		},
		{
			"key": "bt_sz",
			"value": ""
		},
		{
			"key": "bt_status",
			"value": ""
		},
		{
			"key": "Staff_frst_name",
			"value": ""
		},
		{
			"key": "Stff_email_id",
			"value": ""
		},
		{
			"key": "visa_status",
			"value": ""
		},
		{
			"key": "time_zone",
			"value": ""
		},
		{
			"key": "first_nm_stud",
			"value": ""
		},
		{
			"key": "Stud_email_id",
			"value": ""
		},
		{
			"key": "total_users",
			"value": ""
		},
		{
			"key": "active_users",
			"value": ""
		},
		{
			"key": "userID",
			"value": ""
		},
		{
			"key": "c2_batch_name",
			"value": ""
		},
		{
			"key": "c2_batch2_name",
			"value": ""
		},
		{
			"key": "invalid_endpoint",
			"value": ""
		},
		{
			"key": "Stff_ph_num",
			"value": ""
		},
		{
			"key": "Stud_ph_num",
			"value": ""
		}
	]
}