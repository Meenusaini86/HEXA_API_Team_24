{
	"info": {
		"_postman_id": "95f532a8-0a98-480a-8cdf-dbfb44aaa51a",
		"name": "API Hexa Collection Meenu",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Program  Controller",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9655a68-88e8-4196-b190-3b37fb8c2935",
								"exec": [
									"var responseData = pm.response.json();",
									"pm.collectionVariables.set(\"access-token_API\", responseData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8a69c1a9-e007-4ba8-b1c5-bc46098cc8de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms/login"
					},
					"response": []
				},
				{
					"name": "create_NewProgram",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json();",
									"",
									"pm.collectionVariables.set('prg_id', responseData.programId)",
									"",
									"pm.collectionVariables.set('programName', responseData.programName)",
									"",
									"pm.collectionVariables.set('prg_status', responseData.programStatus)",
									"",
									"pm.collectionVariables.set('prg_descp', responseData.programDescription)",
									"",
									"pm.test('Status Code', function () {",
									"    pm.expect(pm.response.to.have.status(201));",
									"})",
									"",
									"const responseJson = pm.response.json();",
									"",
									"var schema = {",
									"    '$schema': 'http://json-schema.org/draft-06/schema#',",
									"    '$ref': '#/definitions/Welcome5',",
									"    'definitions': {",
									"        'Welcome5': {",
									"            'type': 'object',",
									"            'additionalProperties': false,",
									"            'properties': {",
									"                'programId': { 'type': 'integer' },",
									"                'programName': { 'type': 'string' },",
									"                'programDescription': { 'type': 'string' },",
									"                'programStatus': { 'type': 'string' },",
									"                'creationTime': {",
									"                    'type': 'string',",
									"                    'format': 'date-time'",
									"                },",
									"                'lastModTime': {",
									"                    'type': 'string',",
									"                    'format': 'date-time'",
									"                }",
									"            },",
									"            'required': [",
									"                'creationTime',",
									"                'lastModTime',",
									"                'programDescription',",
									"                'programId',",
									"                'programName',",
									"                'programStatus'",
									"            ],",
									"            'title': 'Welcome5'",
									"        }",
									"    }",
									"};",
									"",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"pm.test(\"Test the data type\", () => {",
									"    pm.expect(responseJson).to.be.an('object');",
									"   ",
									"})",
									"pm.test(\"Validating ProgramName Data Typs\", function(){",
									"     pm.expect(responseJson.programName).to.be.an(String); ",
									"})",
									"",
									""
								],
								"type": "text/javascript",
								"id": "e7666eac-5bb3-4122-aa62-3775abe8c610"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var programName = \"March24-ApiHexa-SDET\" + \"-\" +\"{{$randomInt}}\"; \r",
									"pm.collectionVariables.set(\"prg_nm\", programName); \r",
									"\r",
									"var programDescription = \"SDET\"; \r",
									"pm.collectionVariables.set(\"prg_des\", programDescription); "
								],
								"type": "text/javascript",
								"id": "b4a811a4-fd10-4235-9ecc-0f26bbb500c7"
							}
						}
					],
					"id": "b396c30b-0e94-4403-b0f9-589f820fad18",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{prg_des}}\",\r\n\"programName\":\"{{prg_nm}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Missing_ProgramName_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "64e50834-13cc-4745-a7e2-5998075effd8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome5\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome5\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome5\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "c92a039a-97c2-4787-ad6a-1c28f1c7bec0"
							}
						}
					],
					"id": "7b08f7e9-0ca5-4ee1-9217-7dd47be8c9fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{prg_descp}}\",\r\n\"programName\":\"\",\r\n\"programStatus\":\"{{prg_staus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "EmptyString_ProgramName_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7cdf76e0-968a-4813-8f55-080806e20a84"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome10\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"const jsonData =  pm.response.json(); \r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"id": "ef11fe2e-9bbc-48ad-b6fc-918766698d58"
							}
						}
					],
					"id": "80fe2a2c-f5af-4273-a348-4469a562ccb4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{prg_descp}}\",\r\n\"programName\":,\r\n\"programStatus\":\"{{prg_staus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Missing_ProgramStatus_Negative Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0cbd0bfe-2481-443d-bb95-d870647d1c56"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome5\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome5\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome5\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "c05efe23-ed04-49d1-980b-fb3bbabceee2"
							}
						}
					],
					"id": "c96db5fe-4103-4959-8e99-891576a205ad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{prg_descp}}\",\r\n\"programName\":\"{{programName}}\",\r\n\"programStatus\":\"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "EmptyString_ProgramStatus_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c3da31ba-7c3a-4161-a5d8-84a45a35f407"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome10\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"timestamp\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"date-time\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"path\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"error\",\r",
									"                \"path\",\r",
									"                \"status\",\r",
									"                \"timestamp\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"const jsonData =  pm.response.json(); \r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"id": "a218af44-930f-4629-a788-7f998e04bce5"
							}
						}
					],
					"id": "419d58c5-bcae-4c80-955a-2549a35ffacf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{prg_descp}}\",\r\n\"programName\":\"{{programName}}\",\r\n\"programStatus\":\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Existing_ProgramName_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c3273720-cb7c-4d91-a891-8aa615cd9ba7"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome3\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome3\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome3\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"const jsonData =  pm.response.json(); \r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "5a771398-27f4-48b0-ab9c-fc0e7ac2685a"
							}
						}
					],
					"id": "1fa2e87d-72c4-4cbd-a707-322477f5b675",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{prg_descp}}\",\r\n\"programName\":\"{{programName}}\",\r\n\"programStatus\":\"{{prg_status}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Program_Name_Int_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a8b9de49-2d0f-4d6b-9a75-6b880fb13f11",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "532fefc0-6f3d-4dbc-87da-540cf03ef383",
								"exec": [
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome5\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome5\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome5\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									";\r",
									"\r",
									"var responseData = pm.response.json(); \r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2ea2c9b0-d5a8-47e0-9633-f0554a62640f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{prg_descp}}\",\r\n\"programName\":\"{{$randomInt}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Program_Description_Int_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3bbd9a75-e997-4b29-8d56-daf9f1a6feb6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f63db809-3acf-4191-8f3f-8a7671a87950",
								"exec": [
									"var schema ={\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome8\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome8\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome8\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"const jsonData =  pm.response.json(); \r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ebe3b7f7-09de-446d-8570-07a467ad47ab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{$randomInt}}\",\r\n\"programName\":\"{{programName}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "All Programs",
					"id": "3768d0bb-b8a3-4c94-aad1-81b17c61dfb4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "ByProgram_ID",
					"id": "b4aa30c0-7758-481c-bb83-b0b0e9a5811d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/programs/{{prg_id}}"
					},
					"response": []
				},
				{
					"name": "Invalid_ProgramID_Negative",
					"id": "bd5ca399-33d6-46c6-83c8-40ec9bb60b08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/programs/{{prg_id}}2"
					},
					"response": []
				},
				{
					"name": "update_ProgramName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "221af3e2-58cf-437d-84d4-5654b1dfd60a",
								"exec": [
									"const newPrg_Name =  \"Tester\"+\"{{programName}}\";\r",
									"\r",
									"pm.collectionVariables.set(\"put_prg_nm\", newPrg_Name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1caa9299-5220-40af-afc0-d8257ad71bac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"programDescription\":\"{{prg_des}}\",\r\n  \"programName\": \"{{put_prg_nm}}\",\r\n  \"programStatus\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/program/{{programName}}"
					},
					"response": []
				},
				{
					"name": "update_programID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var newPrg_Name =  \"{{prg_nm}}\"+ \"Tester\";\r",
									"pm.collectionVariables.set(\"put_prg_nm\", newPrg_Name);"
								],
								"type": "text/javascript",
								"id": "559c2b3b-08b8-4b5c-9f6d-caa5fcb145fb"
							}
						}
					],
					"id": "7d9a0c70-cf29-42d4-a6a3-9462b56ef28d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{prg_des}}\",\r\n\"programName\":\"{{put_prg_nm}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/putprogram/{{prg_id}}"
					},
					"response": []
				},
				{
					"name": "update_programID_InvalidID_negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var newPrg_Name =  \"{{prg_nm}}\"+ \"Tester\";\r",
									"pm.collectionVariables.set(\"put_prg_nm\", newPrg_Name);"
								],
								"type": "text/javascript",
								"id": "e6959290-1861-432f-af8d-1aff8dd4e3f7"
							}
						}
					],
					"id": "51630e68-10de-49cc-b4d1-685cdf079720",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{prg_des}}\",\r\n\"programName\":\"{{put_prg_nm}}\",\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/putprogram/{{prg_id}}0"
					},
					"response": []
				},
				{
					"name": "update_programID_MissingName_negative Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var newPrg_Name =  \"{{prg_nm}}\"+ \"Tester\";\r",
									"pm.collectionVariables.set(\"put_prg_nm\", newPrg_Name);"
								],
								"type": "text/javascript",
								"id": "46126b90-4e80-44ba-9cff-70d2a51eff29"
							}
						}
					],
					"id": "2897fb36-f396-4d15-8359-896c2ceffdea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{prg_des}}\",\r\n\"programName\":\"{{put_prg_nm}}\",\r\n\"programStatus\":\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/putprogram/{{prg_id}}"
					},
					"response": []
				},
				{
					"name": "update_programID_MissingStatus_negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var newPrg_Name =  \"{{prg_nm}}\"+ \"Tester\";\r",
									"pm.collectionVariables.set(\"put_prg_nm\", newPrg_Name);"
								],
								"type": "text/javascript",
								"id": "80a3f6a1-dd52-4395-9ef8-d2b8717097e0"
							}
						}
					],
					"id": "32621732-76d3-44bb-be76-0eccc5b8b963",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\":\"{{prg_des}}\",\r\n\"programName\":,\r\n\"programStatus\":\"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/putprogram/{{prg_id}}"
					},
					"response": []
				},
				{
					"name": "Delete_By_ProgramName",
					"id": "9959e331-3944-4206-8a5f-0c3878d84755",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/deletebyprogname/{{programName}}"
					},
					"response": []
				},
				{
					"name": "Delete_By-ProgramID",
					"id": "d80241a1-26e0-46fe-adb9-df5dc96e3d23",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/deletebyprogid/{{prd_id}}"
					},
					"response": []
				}
			],
			"id": "dc7a8d98-970f-406f-9239-bf34d1b63360"
		},
		{
			"name": "UserRoles",
			"item": [
				{
					"name": "R02_CreateUser",
					"id": "8aa92b7d-c5ec-41f7-bcd5-c2cd322b0dcd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Staff\",\r\n  \"userEduPg\": \"Biochemistry\",\r\n  \"userEduUg\": \"Microbiology\",\r\n  \"userFirstName\": \"APIHexa\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/api\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R02\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"apihexa@gmail.com\"\r\n  },\r\n  \"userMiddleName\": \"Tester\",\r\n  \"userPhoneNumber\": 2583697412,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R02\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"CST\",\r\n  \"userVisaStatus\": \"EAD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "R03_CreateUser",
					"id": "96d706f3-16b1-4026-b4f2-4c1a5558db75",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"APIHexa\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"apihexastudent@gmail.com\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": 5879631254,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"CST\",\r\n  \"userVisaStatus\": \"H4-EAD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "R02",
					"id": "1ea0b4c9-4b3a-4682-a9f4-3f80d82222f6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Password@123\",\r\n  \"userLoginEmailId\": \"apihexa@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/login"
					},
					"response": []
				}
			],
			"id": "a5866cb7-f601-4410-afc2-ebf3d5d784ed"
		},
		{
			"name": "User role Program batch Map Controller",
			"item": [
				{
					"name": "GetPrgmBatchAllUsers_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56dc6874-b4d4-40f8-bab1-c922e383f6b1",
								"exec": [
									"//status code validation",
									"",
									"pm.test('Success GET Request', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([",
									"        200,",
									"        201,",
									"        202",
									"    ]);",
									"})",
									"",
									"//content type validation",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson[0].userId).to.be.a('string');",
									"    pm.expect(responseJson[0].roleId).to.be.a('string');",
									"    pm.expect(responseJson[0].programId).to.be.a('number');",
									"    pm.expect(responseJson[0].batchId).to.be.a('number');",
									"    pm.expect(responseJson[0].userRoleProgramBatchStatus).to.be.a('string');",
									"});",
									"",
									"//header validation",
									"pm.test('check content-Type header', function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"})",
									"",
									"//json schema validation",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"minItems\": 1,",
									"  \"uniqueItems\": true,",
									"  \"items\": {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"      \"userId\",",
									"      \"roleId\",",
									"      \"programId\",",
									"      \"batchId\",",
									"      \"userRoleProgramBatchStatus\"",
									"    ],",
									"    \"properties\": {",
									"      \"userId\": {",
									"        \"type\": \"string\",",
									"        \"minLength\": 1",
									"      },",
									"      \"roleId\": {",
									"        \"type\": \"string\",",
									"        \"minLength\": 1",
									"      },",
									"      \"programId\": {",
									"        \"type\": \"number\"",
									"      },",
									"      \"batchId\": {",
									"        \"type\": \"number\"",
									"      },",
									"      \"userRoleProgramBatchStatus\": {",
									"        \"type\": \"string\",",
									"        \"minLength\": 1",
									"      }",
									"    }",
									"  }",
									"};",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"//assign parameter for delete operation",
									"var assigned_UserPrograms = pm.response.json();",
									"pm.collectionVariables.set('userID', assigned_UserPrograms[0].userId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "87687fdf-32cd-482e-a78a-27fc03a41a84",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/userRoleProgramBatchMap"
					},
					"response": []
				},
				{
					"name": "GetPrgmBatchUserID_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a68c383f-b2d0-4386-bf64-fda77cbb9cfe",
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Successful GET Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201,\r",
									"        202\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//content tpe validation\r",
									"pm.test(\"The response has all properties\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson[0].userId).to.be.a('string');\r",
									"    pm.expect(responseJson[0].roleId).to.be.a('string');\r",
									"    pm.expect(responseJson[0].programId).to.be.a('number');\r",
									"    pm.expect(responseJson[0].batchId).to.be.a('number');\r",
									"    pm.expect(responseJson[0].userRoleProgramBatchStatus).to.be.a('string');\r",
									"});\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"\r",
									"//json schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5e883dfa-974c-418b-a254-28aa2040ab1e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/userRoleProgramBatchMap/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "GetPrgmBatchUserID_NotEnrolled_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a68c383f-b2d0-4386-bf64-fda77cbb9cfe",
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Successful GET Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        404,\r",
									"        400,\r",
									"        401\r",
									"    ]);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"\r",
									"//json schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "baee115a-f24d-4c7e-9d77-63f5a069e98b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/userRoleProgramBatchMap/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "GetPrgmBatchAllUsers_InvalidURLNegative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5de8b1b-53f5-4321-b13f-dcb05d0e0d5e",
								"exec": [
									"pm.test('Negative GET Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        404,\r",
									"        401,\r",
									"        408\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"\r",
									"//json schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"//schema comparison\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "92fc09d8-2eb9-45b6-a0c7-a6fc743be573",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms/userRoleProgramBatchMa"
					},
					"response": []
				},
				{
					"name": "GetPrgmBatch_InvalidUserID_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8fe7a30-5645-41ce-b5af-b41b529a9b88",
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Negative GET Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        404,\r",
									"        401,\r",
									"        408\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"\r",
									"//json schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b8f3056c-f5d0-44f3-967e-1a504f5dbb5c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms/userRoleProgramBatchMap/{{std_id}}2"
					},
					"response": []
				},
				{
					"name": "GetPrgmBatchNoTokenUserID_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "100c18eb-78db-49c0-bef0-af854e7aed8f",
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Invalid URL response', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        401,\r",
									"        404,\r",
									"        408\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"//status message validation\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"\r",
									"//json schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3c72c420-51f4-4b1c-905b-152791ba6d4b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms/userRoleProgramBatchMap/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_Assign_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59fbdf8-89df-444b-98ab-3f25c165bed6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "580a455d-2958-4895-9b60-d65602504c0c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{prg_id}}\",\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"{{bt_id}}\",\r\n      \"userRoleProgramBatchStatus\": \"Inactive\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "DeleteAssignedAllProgramsBatchUserId_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Success DELETE Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201,\r",
									"        202\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//header validation\r",
									"pm.test('check content-Type header', function () {\r",
									"    pm.response.to.be.header('Content-Type', 'application/json');\r",
									"})\r",
									"\r",
									"//content type validation\r",
									"pm.test(\"The response has all properties\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"    pm.expect(responseJson.success).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"\r",
									"//json schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome6\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome6\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"message\",\r",
									"                \"success\"\r",
									"            ],\r",
									"            \"title\": \"Welcome6\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript",
								"id": "545a5b70-8ecf-4044-9876-25c532b62471"
							}
						}
					],
					"id": "9ffd07a9-ffd6-4acf-91fe-72b73e96c279",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/userRoleProgramBatchMap/deleteAll/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "DeleteAssignedAllProgramsBatchInvalidUserId_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0f0449c-e02d-458a-8286-a7dce97ab4b2",
								"exec": [
									"//status code validation\r",
									"\r",
									"pm.test('Negative DELETE Request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        404,\r",
									"        401,\r",
									"        408\r",
									"    ]);\r",
									"})\r",
									"\r",
									"//json schema validation\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c8929216-b834-4458-895b-21242760d2bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms/userRoleProgramBatchMap/deleteAll/U00"
					},
					"response": []
				}
			],
			"id": "cb45c88a-e0d0-4fc3-a9c7-e86f19e4ca51"
		},
		{
			"name": "BatchController",
			"item": [
				{
					"name": "CreateBatch Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48239b62-16ae-4ef2-98b0-d342a45eba16",
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test('Check status code', () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
									"})",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome7\",",
									"    \"definitions\": {",
									"        \"Welcome7\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"batchId\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"batchName\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"batchDescription\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"batchStatus\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"batchNoOfClasses\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"programId\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"programName\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"batchDescription\",",
									"                \"batchId\",",
									"                \"batchName\",",
									"                \"batchNoOfClasses\",",
									"                \"batchStatus\",",
									"                \"programId\",",
									"                \"programName\"",
									"            ],",
									"            \"title\": \"Welcome7\"",
									"        }",
									"    }",
									"}",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a064b4c-0bba-4da9-ba50-009d31e43633",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7678ad02-c7c3-4225-8a83-c829832735fb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_ds}}\",\r\n\t\"batchName\": \"{{batch_nm}}\",\r\n\t\"batchNoOfClasses\": \"{{batch_num}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{prg_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "CreateBatch _ExistingBatch_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48239b62-16ae-4ef2-98b0-d342a45eba16",
								"exec": [
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test('Check status code', () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
									"})",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome7\",",
									"    \"definitions\": {",
									"        \"Welcome7\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"batchId\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"batchName\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"batchDescription\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"batchStatus\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"batchNoOfClasses\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"programId\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"programName\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"batchDescription\",",
									"                \"batchId\",",
									"                \"batchName\",",
									"                \"batchNoOfClasses\",",
									"                \"batchStatus\",",
									"                \"programId\",",
									"                \"programName\"",
									"            ],",
									"            \"title\": \"Welcome7\"",
									"        }",
									"    }",
									"}",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a064b4c-0bba-4da9-ba50-009d31e43633",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2d2ba26e-4af2-4b49-ad90-08eddee18667",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{bt_ds}}\",\r\n\t\"batchName\": \"{{bt_nm}}\",\r\n\t\"batchNoOfClasses\": 5,\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{prg_id}}\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "Post_BatchName_Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48239b62-16ae-4ef2-98b0-d342a45eba16",
								"exec": [
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"false\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome1\",",
									"    \"definitions\": {",
									"        \"Welcome1\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"message\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"success\": {",
									"                    \"type\": \"boolean\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"message\",",
									"                \"success\"",
									"            ],",
									"            \"title\": \"Welcome1\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"const responseData = pm.response.json();  ",
									"pm.collectionVariables.set(\"bt_id\", responseData.batchId);",
									"pm.collectionVariables.set(\"bt_nm\", responseData.batchName);",
									"pm.collectionVariables.set(\"bt_ds\", responseData.batchDescription);",
									"pm.collectionVariables.set(\"bt_sz\", responseData.batchNoOfClasses);",
									"pm.collectionVariables.set(\"bt_status\", responseData.batchStatus);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a064b4c-0bba-4da9-ba50-009d31e43633",
								"exec": [
									"var BatchName = \"March24-ApiHexa-SDET\" + \"-\" +\"{{$randomInt}}\"; \r",
									"pm.collectionVariables.set(\"batch_nm\", BatchName); \r",
									"\r",
									"var BatchDescription = \"APIHexaBatch-SDET\"; \r",
									"pm.collectionVariables.set(\"batch_ds\", BatchDescription); \r",
									"\r",
									"var BatchNum = 20; \r",
									"pm.collectionVariables.set(\"batch_num\", BatchNum); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "33f6cf0a-975f-4882-93d2-3058759f2caf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_ds}}\",\r\n\t\"batchName\": \"{{batch_nmghgh}678}\",\r\n\t\"batchNoOfClasses\": \"{{batch_num}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{prg_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "Post_BNC_Invalid _Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48239b62-16ae-4ef2-98b0-d342a45eba16",
								"exec": [
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Reques\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome1\",",
									"    \"definitions\": {",
									"        \"Welcome1\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"timestamp\": {",
									"                    \"type\": \"string\",",
									"                    \"format\": \"date-time\"",
									"                },",
									"                \"status\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"error\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"path\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"error\",",
									"                \"path\",",
									"                \"status\",",
									"                \"timestamp\"",
									"            ],",
									"            \"title\": \"Welcome1\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"const responseData = pm.response.json();  ",
									"pm.collectionVariables.set(\"bt_id\", responseData.batchId);",
									"pm.collectionVariables.set(\"bt_nm\", responseData.batchName);",
									"pm.collectionVariables.set(\"bt_ds\", responseData.batchDescription);",
									"pm.collectionVariables.set(\"bt_sz\", responseData.batchNoOfClasses);",
									"pm.collectionVariables.set(\"bt_status\", responseData.batchStatus);",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a064b4c-0bba-4da9-ba50-009d31e43633",
								"exec": [
									"var BatchName = \"March24-ApiHexa-SDET\" + \"-\" +\"{{$randomInt}}\"; \r",
									"pm.collectionVariables.set(\"batch_nm\", BatchName); \r",
									"\r",
									"var BatchDescription = \"APIHexaBatch-SDET\"; \r",
									"pm.collectionVariables.set(\"batch_ds\", BatchDescription); \r",
									"\r",
									"var BatchNum = 20; \r",
									"pm.collectionVariables.set(\"batch_num\", BatchNum); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7b847623-cfbe-4e9c-8b36-4007a7acec0a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{bt_ds}}\",\r\n\t\"batchName\": \"{{bt_nm}}\",\r\n\t\"batchNoOfClasses\": hghgfh,\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{prg_id}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "Post_Status_Invalid _Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48239b62-16ae-4ef2-98b0-d342a45eba16",
								"exec": [
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Reques\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome1\",",
									"    \"definitions\": {",
									"        \"Welcome1\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"timestamp\": {",
									"                    \"type\": \"string\",",
									"                    \"format\": \"date-time\"",
									"                },",
									"                \"status\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"error\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"path\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"error\",",
									"                \"path\",",
									"                \"status\",",
									"                \"timestamp\"",
									"            ],",
									"            \"title\": \"Welcome1\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"const responseData = pm.response.json();  ",
									"pm.collectionVariables.set(\"bt_id\", responseData.batchId);",
									"pm.collectionVariables.set(\"bt_nm\", responseData.batchName);",
									"pm.collectionVariables.set(\"bt_ds\", responseData.batchDescription);",
									"pm.collectionVariables.set(\"bt_sz\", responseData.batchNoOfClasses);",
									"pm.collectionVariables.set(\"bt_status\", responseData.batchStatus);",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a064b4c-0bba-4da9-ba50-009d31e43633",
								"exec": [
									"var BatchName = \"March24-ApiHexa-SDET\" + \"-\" +\"{{$randomInt}}\"; \r",
									"pm.collectionVariables.set(\"batch_nm\", BatchName); \r",
									"\r",
									"var BatchDescription = \"APIHexaBatch-SDET\"; \r",
									"pm.collectionVariables.set(\"batch_ds\", BatchDescription); \r",
									"\r",
									"var BatchNum = 20; \r",
									"pm.collectionVariables.set(\"batch_num\", BatchNum); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7656785e-33e3-469b-9c9c-1f763c6bf797",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{\r\n\t\"batchDescription\": \"{{batch_ds}}\",\r\n\t\"batchName\": \"{{batch_nm}}\",\r\n\t\"batchNoOfClasses\": \"{{batch_num}}\",\r\n\t\"batchStatus\": \"768hgjggh\",\r\n\t\"programId\": {{prg_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "Post_PrgID_Invalid _Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48239b62-16ae-4ef2-98b0-d342a45eba16",
								"exec": [
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Reques\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome1\",",
									"    \"definitions\": {",
									"        \"Welcome1\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"timestamp\": {",
									"                    \"type\": \"string\",",
									"                    \"format\": \"date-time\"",
									"                },",
									"                \"status\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"error\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"path\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"error\",",
									"                \"path\",",
									"                \"status\",",
									"                \"timestamp\"",
									"            ],",
									"            \"title\": \"Welcome1\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"const responseData = pm.response.json();  ",
									"pm.collectionVariables.set(\"bt_id\", responseData.batchId);",
									"pm.collectionVariables.set(\"bt_nm\", responseData.batchName);",
									"pm.collectionVariables.set(\"bt_ds\", responseData.batchDescription);",
									"pm.collectionVariables.set(\"bt_sz\", responseData.batchNoOfClasses);",
									"pm.collectionVariables.set(\"bt_status\", responseData.batchStatus);",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a064b4c-0bba-4da9-ba50-009d31e43633",
								"exec": [
									"var BatchName = \"March24-ApiHexa-SDET\" + \"-\" +\"{{$randomInt}}\"; \r",
									"pm.collectionVariables.set(\"batch_nm\", BatchName); \r",
									"\r",
									"var BatchDescription = \"APIHexaBatch-SDET\"; \r",
									"pm.collectionVariables.set(\"batch_ds\", BatchDescription); \r",
									"\r",
									"var BatchNum = 20; \r",
									"pm.collectionVariables.set(\"batch_num\", BatchNum); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "44aa3034-20ff-4fce-b15b-b51f14dd29b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"{{batch_ds}}\",\r\n\t\"batchName\": \"{{batch_nm}}\",\r\n\t\"batchNoOfClasses\": \"{{batch_num}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\":\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "Post_BtchDisc_null _Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48239b62-16ae-4ef2-98b0-d342a45eba16",
								"exec": [
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription must begin with alphabet and can contain only alphanumeric characters\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome3\",",
									"    \"definitions\": {",
									"        \"Welcome3\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"message\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"success\": {",
									"                    \"type\": \"boolean\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"message\",",
									"                \"success\"",
									"            ],",
									"            \"title\": \"Welcome3\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"const responseData = pm.response.json();  ",
									"pm.collectionVariables.set(\"bt_id\", responseData.batchId);",
									"pm.collectionVariables.set(\"bt_nm\", responseData.batchName);",
									"pm.collectionVariables.set(\"bt_ds\", responseData.batchDescription);",
									"pm.collectionVariables.set(\"bt_sz\", responseData.batchNoOfClasses);",
									"pm.collectionVariables.set(\"bt_status\", responseData.batchStatus);",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a064b4c-0bba-4da9-ba50-009d31e43633",
								"exec": [
									"var BatchName = \"March24-ApiHexa-SDET\" + \"-\" +\"{{$randomInt}}\"; \r",
									"pm.collectionVariables.set(\"batch_nm\", BatchName); \r",
									"\r",
									"var BatchDescription = \"APIHexaBatch-SDET\"; \r",
									"pm.collectionVariables.set(\"batch_ds\", BatchDescription); \r",
									"\r",
									"var BatchNum = 20; \r",
									"pm.collectionVariables.set(\"batch_num\", BatchNum); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6df09970-8f4b-47dd-afd1-7ba3a2c10a1e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"\",\r\n\t\"batchName\": \"{{batch_nm}}\",\r\n\t\"batchNoOfClasses\": \"{{batch_num}}\",\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": {{prg_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches"
					},
					"response": []
				},
				{
					"name": "GetBatch_BY Batch ID_ Postive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"APIHexa-SDET\");",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Same rseponse body\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.programId).to.eql(16294);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Inactive\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});"
								],
								"type": "text/javascript",
								"id": "4c2dcfae-61bc-403b-a9ce-c6bc85cdd54f"
							}
						}
					],
					"id": "65357c95-8e0e-48e2-aeab-1453812b67b9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/batchId/{{bt_id}}"
					},
					"response": []
				},
				{
					"name": "Get_BatchID_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b79afd5e-d612-43e3-ac5b-4ffc39a248ad",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Batch not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6b9b5f69-506c-4c65-b688-8eb98ad61f39",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURI}}/batches/batchId/{{Invalid_BatchId}}"
					},
					"response": []
				},
				{
					"name": "GetBatch_BatchName_Positive",
					"id": "47280e80-23cd-49de-a6af-b943295229dd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/batchName/{{bt_nm}}"
					},
					"response": []
				},
				{
					"name": "Get_BatchName_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ef9e0ca-8f94-4cff-998f-721e2130a1ad",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"idMarch24-API HEXA-0090not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2957a9f7-0cc9-441d-84de-863dd3c96cf7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURI}}/batches/batchName/{{Invalid_BtchName}}"
					},
					"response": []
				},
				{
					"name": "GetBatch_ProgramID Positive",
					"id": "4a8f5ffd-3be9-4de1-827e-1648ae28df43",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/program/{{prg_id}}"
					},
					"response": []
				},
				{
					"name": "GetBatch_ProgramID_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24b20cb5-eb71-42db-9703-d5e59e7093ef",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"batch with this programId 57798676not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0945a251-b55b-40c3-a41a-147a652a6b82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURI}}/batches/program/{{Invalid_PgID}}"
					},
					"response": []
				},
				{
					"name": "UpdateBatch_BatchId_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e180e416-b35f-47db-9947-07ef6f620726",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Existing Batch\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.batchId).to.eql(8773);",
									"});",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"March24-API HEXA-DA-SDET01-003\");",
									"});",
									"",
									"var responseBody = pm.response.json(); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2f142ade-dc50-4702-bf0c-f8d3f3876071",
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5fa6115e-4aa6-4869-83fc-ebd8f41d8ca8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"Existing Batch\",\r\n\t\"batchName\": \"{{up_bt_nm}}\",\r\n\t\"batchNoOfClasses\": 18,\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": 16715\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{bt_id}}"
					},
					"response": []
				},
				{
					"name": "UpdateBatch_BD_Invalid_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e180e416-b35f-47db-9947-07ef6f620726",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription must begin with alphabet and can contain only alphanumeric characters\");",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome10\",",
									"    \"definitions\": {",
									"        \"Welcome10\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"message\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"success\": {",
									"                    \"type\": \"boolean\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"message\",",
									"                \"success\"",
									"            ],",
									"            \"title\": \"Welcome10\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2f142ade-dc50-4702-bf0c-f8d3f3876071",
								"exec": [
									"var updateBatchName = \"{{bt_nm}}\" + \"UP\"\r",
									"pm.collectionVariables.set(\"up_bt_nm\", updateBatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5072a339-5783-46bf-a0f9-63e34f5cd8de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"5675nbfn\",\r\n\t\"batchName\": \"{{up_bt_nm}}\",\r\n\t\"batchNoOfClasses\": 18,\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": 16715\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{bt_id}}"
					},
					"response": []
				},
				{
					"name": "UpdateBatch_BN_Null_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e180e416-b35f-47db-9947-07ef6f620726",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"batchName must begin with alphabet and can contain only alphanumeric characters\");",
									"});",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome6\",",
									"    \"definitions\": {",
									"        \"Welcome6\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"message\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"success\": {",
									"                    \"type\": \"boolean\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"message\",",
									"                \"success\"",
									"            ],",
									"            \"title\": \"Welcome6\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2f142ade-dc50-4702-bf0c-f8d3f3876071",
								"exec": [
									"var updateBatchName = \"{{bt_nm}}\" + \"UP\"\r",
									"pm.collectionVariables.set(\"up_bt_nm\", updateBatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "48850224-0bf5-4cb9-9552-c234d4788d41",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"Existing Batch\",\r\n\t\"batchName\": \"\",\r\n\t\"batchNoOfClasses\": 18,\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": 16715\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{bt_id}}"
					},
					"response": []
				},
				{
					"name": "UpdateBatch_BN_Invalid_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e180e416-b35f-47db-9947-07ef6f620726",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"batchName must begin with alphabet and can contain only alphanumeric characters\");",
									"});",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome6\",",
									"    \"definitions\": {",
									"        \"Welcome6\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"message\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"success\": {",
									"                    \"type\": \"boolean\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"message\",",
									"                \"success\"",
									"            ],",
									"            \"title\": \"Welcome6\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2f142ade-dc50-4702-bf0c-f8d3f3876071",
								"exec": [
									"var updateBatchName = \"{{bt_nm}}\" + \"UP\"\r",
									"pm.collectionVariables.set(\"up_bt_nm\", updateBatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "14334a78-4e21-4007-b9d6-18983f971891",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"Existing Batch\",\r\n\t\"batchName\": \"{{up_bt_nm}980}\",\r\n\t\"batchNoOfClasses\": 18,\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": 16715\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{bt_id}}"
					},
					"response": []
				},
				{
					"name": "UpdateBatch_NOC_Invalid_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e180e416-b35f-47db-9947-07ef6f620726",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome6\",",
									"    \"definitions\": {",
									"        \"Welcome6\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"timestamp\": {",
									"                    \"type\": \"string\",",
									"                    \"format\": \"date-time\"",
									"                },",
									"                \"status\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"error\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"path\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"error\",",
									"                \"path\",",
									"                \"status\",",
									"                \"timestamp\"",
									"            ],",
									"            \"title\": \"Welcome6\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2f142ade-dc50-4702-bf0c-f8d3f3876071",
								"exec": [
									"var updateBatchName = \"{{bt_nm}}\" + \"UP\"\r",
									"pm.collectionVariables.set(\"up_bt_nm\", updateBatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7526bafc-ef07-4c3d-ad99-92ec1881e603",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"Existing Batch\",\r\n\t\"batchName\": \"{{up_bt_nm}}\",\r\n\t\"batchNoOfClasses\": gfgfhg,\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\": 16715\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{bt_id}}"
					},
					"response": []
				},
				{
					"name": "UpdateBatch_NOC_Invalid_Negative Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e180e416-b35f-47db-9947-07ef6f620726",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid Status: must be Active or Inactive\");",
									"});",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome3\",",
									"    \"definitions\": {",
									"        \"Welcome3\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"message\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"success\": {",
									"                    \"type\": \"boolean\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"message\",",
									"                \"success\"",
									"            ],",
									"            \"title\": \"Welcome3\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2f142ade-dc50-4702-bf0c-f8d3f3876071",
								"exec": [
									"var updateBatchName = \"{{bt_nm}}\" + \"UP\"\r",
									"pm.collectionVariables.set(\"up_bt_nm\", updateBatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b728579e-96c1-4164-8f23-38ca1823204f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"Existing Batch\",\r\n\t\"batchName\": \"{{up_bt_nm}}\",\r\n\t\"batchNoOfClasses\": 18,\r\n\t\"batchStatus\": \"ghgff\",\r\n\t\"programId\": 16715\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{bt_id}}"
					},
					"response": []
				},
				{
					"name": "UpdateBatch_PgID_empty_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e180e416-b35f-47db-9947-07ef6f620726",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"    \"$ref\": \"#/definitions/Welcome3\",",
									"    \"definitions\": {",
									"        \"Welcome3\": {",
									"            \"type\": \"object\",",
									"            \"additionalProperties\": false,",
									"            \"properties\": {",
									"                \"timestamp\": {",
									"                    \"type\": \"string\",",
									"                    \"format\": \"date-time\"",
									"                },",
									"                \"status\": {",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"error\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"path\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"error\",",
									"                \"path\",",
									"                \"status\",",
									"                \"timestamp\"",
									"            ],",
									"            \"title\": \"Welcome3\"",
									"        }",
									"    }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2f142ade-dc50-4702-bf0c-f8d3f3876071",
								"exec": [
									"var updateBatchName = \"{{bt_nm}}\" + \"UP\"\r",
									"pm.collectionVariables.set(\"up_bt_nm\", updateBatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "495da6f9-fc20-422d-a09d-0661d630ea82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"batchDescription\": \"Existing Batch\",\r\n\t\"batchName\": \"{{up_bt_nm}}\",\r\n\t\"batchNoOfClasses\": 18,\r\n\t\"batchStatus\": \"Active\",\r\n\t\"programId\":\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/batches/{{bt_id}}"
					},
					"response": []
				},
				{
					"name": "DeleteBatch_BatchID_Postive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "670e4a54-a0eb-44c1-8c9b-9cc0788d6c53",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2e6d04d1-500e-4c8d-8ad4-2d1cfa754ed1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/batches/{{bt_id}}"
					},
					"response": []
				},
				{
					"name": "DeleteBatch_BatID_Invalid_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "670e4a54-a0eb-44c1-8c9b-9cc0788d6c53",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f2f0df6c-0dda-41a3-b2d2-82cd7ad0bdc1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/batches/{{bt_id}hhghgjh}"
					},
					"response": []
				}
			],
			"id": "ae76f095-602f-43d7-bcdf-0513f9e0e884"
		},
		{
			"name": "UserModule",
			"item": [
				{
					"name": "Create_Staff_Positive",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3e2e4ddc-6066-4817-a981-ca05cc271ae8",
								"exec": [
									"//var firstNm =  \"APIHexa\"+ \"lo\";\r",
									"var firstNm =  \"APIHexa\"+ \"{{$randomFirstName}}\";\r",
									"\r",
									"pm.collectionVariables.set(\"frst_nm\", firstNm); \r",
									"console.log(\"{{frst_nm}}\")\r",
									"\r",
									"var emailid = \"{{frst_nm}}\"+ \"@testmail.com\"\r",
									"pm.collectionVariables.set(\"email_id\", emailid); \r",
									"\r",
									" pm.environment.set(\"ph_nm\",_.random(1852372345, 9999999999));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e656cdfe-2a06-4e55-9480-839d46dded8d",
								"exec": [
									"var responseData = pm.response.json();",
									"",
									"pm.collectionVariables.set('us_id', responseData.userId)",
									"",
									"pm.collectionVariables.set('us_ph', responseData.userPhoneNumber)",
									"",
									"pm.collectionVariables.set('us_email', responseData.userLoginEmail)",
									"",
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"})",
									"",
									"pm.test('Status code name has string', function () {",
									"    pm.response.to.have.status('Created');",
									"})",
									"",
									"pm.test('Status Code', function () {",
									"    pm.expect(pm.response.to.have.status(201));",
									"})",
									"",
									"const responseJson = pm.response.json();",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"userId\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userFirstName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userLastName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userMiddleName\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userPhoneNumber\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"userLocation\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userTimeZone\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userLinkedinUrl\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userEduUg\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userEduPg\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userComments\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userVisaStatus\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    },",
									"    \"userLoginEmail\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"userId\",",
									"    \"userFirstName\",",
									"    \"userLastName\",",
									"    \"userMiddleName\",",
									"    \"userPhoneNumber\",",
									"    \"userLocation\",",
									"    \"userTimeZone\",",
									"    \"userLinkedinUrl\",",
									"    \"userEduUg\",",
									"    \"userEduPg\",",
									"    \"userComments\",",
									"    \"userVisaStatus\",",
									"    \"userLoginEmail\"",
									"  ]",
									"}",
									"",
									"",
									"",
									"pm.test('Schema Validation', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"})",
									"",
									"pm.test('Test the data type', () => {",
									"    pm.expect(responseJson).to.be.an('object');",
									"})",
									"",
									"pm.test(\"Validating ProgramName Data Typs\", function(){",
									"     pm.expect(responseJson.userFirstName).to.be.a('string'); ",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "12fb5373-801e-41cc-af05-66dcc3683c1b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Staff\",\r\n  \"userEduPg\": \"Biochemistry\",\r\n  \"userEduUg\": \"Microbiology\",\r\n  \"userFirstName\": \"{{frst_nm}}\",\r\n  \"userId\": \"\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/api\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R02\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id}}\"\r\n  },\r\n  \"userMiddleName\": \"Tester\",\r\n  \"userPhoneNumber\": \"{{ph_nm}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R02\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"CST\",\r\n  \"userVisaStatus\": \"H4-EAD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Staff_InvalidPhNumber-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3e2e4ddc-6066-4817-a981-ca05cc271ae8",
								"exec": [
									"var firstNm =  \"APIHexa\"+ \"{{$randomFirstName}}\";\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"frst_nm\", firstNm); \r",
									"console.log(\"{{frst_nm}}\")\r",
									"\r",
									"var emailid = \"{{frst_nm}}\"+ \"@testmail.com\"\r",
									"pm.collectionVariables.set(\"email_id\", emailid); \r",
									"\r",
									" pm.environment.set(\"ph_nm\",_.random(1852372345, 9999999999));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e656cdfe-2a06-4e55-9480-839d46dded8d",
								"exec": [
									"var responseData= pm.response.json(); \r",
									"\r",
									"pm.collectionVariables.set(\"us_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"us_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"us_email\", responseData.userLoginEmail);\r",
									"\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "29a7a1fb-e27c-4f0e-aa33-281995165f28",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Staff\",\r\n  \"userEduPg\": \"Biochemistry\",\r\n  \"userEduUg\": \"Microbiology\",\r\n  \"userFirstName\": \"{{frst_nm}}\",\r\n  \"userId\": \"\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/api\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R02\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id}}\"\r\n  },\r\n  \"userMiddleName\": \"Tester\",\r\n  \"userPhoneNumber\": \"{{ph_n}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R02\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"CST\",\r\n  \"userVisaStatus\": \"H4-EAD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Staff_userFirstname-Emptystring_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3e2e4ddc-6066-4817-a981-ca05cc271ae8",
								"exec": [
									"var firstNm =  \"APIHexa\"+ \"{{$randomFirstName}}\";\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"frst_nm\", firstNm); \r",
									"console.log(\"{{frst_nm}}\")\r",
									"\r",
									"var emailid = \"{{frst_nm}}\"+ \"@testmail.com\"\r",
									"pm.collectionVariables.set(\"email_id\", emailid); \r",
									"\r",
									" pm.environment.set(\"ph_nm\",_.random(1852372345, 9999999999));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e656cdfe-2a06-4e55-9480-839d46dded8d",
								"exec": [
									"var responseData= pm.response.json(); \r",
									"\r",
									"pm.collectionVariables.set(\"us_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"us_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"us_email\", responseData.userLoginEmail);\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "411d0513-6c66-49db-832d-278d807cd976",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Staff\",\r\n  \"userEduPg\": \"Biochemistry\",\r\n  \"userEduUg\": \"Microbiology\",\r\n  \"userFirstName\": \"\",\r\n  \"userId\": \"\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/api\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R02\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"\"\r\n  },\r\n  \"userMiddleName\": \"Tester\",\r\n  \"userPhoneNumber\": \"{{ph_nm}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R02\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"CST\",\r\n  \"userVisaStatus\": \"H4-EAD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Staff_userFirstname-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3e2e4ddc-6066-4817-a981-ca05cc271ae8",
								"exec": [
									"var firstNm =  \"APIHexa\"+ \"{{$randomFirstName}}\";\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"frst_nm\", firstNm); \r",
									"console.log(\"{{frst_nm}}\")\r",
									"\r",
									"var emailid = \"{{frst_nm}}\"+ \"@testmail.com\"\r",
									"pm.collectionVariables.set(\"email_id\", emailid); \r",
									"\r",
									" pm.environment.set(\"ph_nm\",_.random(1852372345, 9999999999));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e656cdfe-2a06-4e55-9480-839d46dded8d",
								"exec": [
									"var responseData= pm.response.json(); \r",
									"\r",
									"pm.collectionVariables.set(\"us_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"us_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"us_email\", responseData.userLoginEmail);\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1d430125-51ab-4d20-995c-8216d79192b8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Staff\",\r\n  \"userEduPg\": \"Biochemistry\",\r\n  \"userEduUg\": \"Microbiology\",\r\n  \"userFirstName\": \"{{frst_}}\",\r\n  \"userId\": \"\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/api\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R02\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id}}\"\r\n  },\r\n  \"userMiddleName\": \"Tester\",\r\n  \"userPhoneNumber\": \"{{ph_nm}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R02\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"CST\",\r\n  \"userVisaStatus\": \"H4-EAD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_postive",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "40a86316-66d0-40a1-9ae6-6bf6dace02b5",
								"exec": [
									"var firstNm =  \"APIHexa\"+ \"{{$randomFirstName}}\";\r",
									"\r",
									"\r",
									"console.log(pm.collectionVariables.set(\"frst_nm_std\", firstNm)); \r",
									"\r",
									"\r",
									"var emailid = \"{{frst_nm_std}}\"+ \"@testmail.com\"\r",
									"pm.collectionVariables.set(\"email_id_std\", emailid); \r",
									"\r",
									" pm.collectionVariables.set(\"ph_nm_std\",_.random(1852372345, 9999999999));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "68b18628-4ffe-4f93-9e45-9c2c9a7d527a",
								"exec": [
									"var responseData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set('std_id', responseData.userId)\r",
									"\r",
									"pm.collectionVariables.set('std_ph', responseData.userPhoneNumber)\r",
									"\r",
									"pm.collectionVariables.set('std_email', responseData.userLoginEmail)\r",
									"\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"pm.test('Status Code', function () {\r",
									"    pm.expect(pm.response.to.have.status(201));\r",
									"})\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userFirstName\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userLastName\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userMiddleName\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userPhoneNumber\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"userLocation\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userTimeZone\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userLinkedinUrl\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userEduUg\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userEduPg\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userComments\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userVisaStatus\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"userLoginEmail\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userId\",\r",
									"    \"userFirstName\",\r",
									"    \"userLastName\",\r",
									"    \"userMiddleName\",\r",
									"    \"userPhoneNumber\",\r",
									"    \"userLocation\",\r",
									"    \"userTimeZone\",\r",
									"    \"userLinkedinUrl\",\r",
									"    \"userEduUg\",\r",
									"    \"userEduPg\",\r",
									"    \"userComments\",\r",
									"    \"userVisaStatus\",\r",
									"    \"userLoginEmail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test('Test the data type', () => {\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4ac0dd50-8cb2-460b-b27b-db7895410d04",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{frst_nm_std}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id_std}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{ph_nm_std}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"CST\",\r\n  \"userVisaStatus\": \"H4-EAD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_missing-email-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "40a86316-66d0-40a1-9ae6-6bf6dace02b5",
								"exec": [
									"var firstNm =  \"APIHexa\"+ \"{{$randomFirstName}}\";\r",
									"\r",
									"\r",
									"console.log(pm.collectionVariables.set(\"frst_nm_std\", firstNm)); \r",
									"\r",
									"\r",
									"var emailid = \r",
									"pm.collectionVariables.set(\"email_id_std\", emailid); \r",
									"\r",
									" pm.collectionVariables.set(\"ph_nm_std\",_.random(1852372345, 9999999999));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "68b18628-4ffe-4f93-9e45-9c2c9a7d527a",
								"exec": [
									"var responseData = pm.response.json(); \r",
									"pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"   \r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4b9b9ef9-3b7b-4024-9707-8c86fb9cdbee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{frst_nm_std}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id_std}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{ph_nm_std}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"CST\",\r\n  \"userVisaStatus\": \"H4-EAD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Empty-userFirstname-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "40a86316-66d0-40a1-9ae6-6bf6dace02b5",
								"exec": [
									"var firstNm =  \"\";\r",
									"console.log(pm.collectionVariables.set(\"frst_nm_std\", firstNm)); \r",
									"\r",
									"\r",
									"var emailid = \"{{frst_nm_std}}\"+ \"@testmail.com\"\r",
									"pm.collectionVariables.set(\"email_id_std\", emailid); \r",
									"\r",
									" pm.collectionVariables.set(\"ph_nm_std\",_.random(1852372345, 9999999999));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "68b18628-4ffe-4f93-9e45-9c2c9a7d527a",
								"exec": [
									"var responseData = pm.response.json(); \r",
									"pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									" pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e649eff9-1130-4f6b-9f63-20420f39e331",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": {{frst_nm_std}},\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id_std}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{ph_nm_std}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"CST\",\r\n  \"userVisaStatus\": \"H4-EAD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Student_Missingphno-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "40a86316-66d0-40a1-9ae6-6bf6dace02b5",
								"exec": [
									"var firstNm =  \"APIHexa\"+ \"{{$randomFirstName}}\";\r",
									"\r",
									"\r",
									"console.log(pm.collectionVariables.set(\"frst_nm_std\", firstNm)); \r",
									"\r",
									"\r",
									"var emailid = \"{{frst_nm_std}}\"+ \"@testmail.com\"\r",
									"pm.collectionVariables.set(\"email_id_std\", emailid); \r",
									"\r",
									"\r",
									" pm.collectionVariables.set(\"ph_nm_std\",_.random(1852372345, 9999999999));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "68b18628-4ffe-4f93-9e45-9c2c9a7d527a",
								"exec": [
									"var responseData = pm.response.json(); \r",
									"pm.collectionVariables.set(\"std_id\", responseData.userId);\r",
									"pm.collectionVariables.set(\"std_ph\", responseData.userPhoneNumber);\r",
									"pm.collectionVariables.set(\"std_email\", responseData.userLoginEmail);\r",
									"   \r",
									"pm.test(\"Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-type Header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "97525eee-7bac-4550-ac6d-6947b0aaeb07",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"student\",\r\n  \"userEduPg\": \"Geology\",\r\n  \"userEduUg\": \"Economics\",\r\n  \"userFirstName\": \"{{frst_nm_std}}\",\r\n  \"userId\": \"A001\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"www.linkedin.com/student\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"Active\",\r\n    \"password\": \"Password@123\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{email_id_std}}\"\r\n  },\r\n  \"userMiddleName\": \"Student\",\r\n  \"userPhoneNumber\": \"{{ph_nm_s}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"CST\",\r\n  \"userVisaStatus\": \"H4-EAD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "All Users _positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d91c5457-0caa-419a-9970-b9d81a80994a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b278f871-d5ec-42d3-9818-cb26a6b3ac69",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users"
					},
					"response": []
				},
				{
					"name": "All Users _With-Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d91c5457-0caa-419a-9970-b9d81a80994a",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Unauthorized\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ce809222-0ca0-4188-9838-38e9c0e9672d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users"
					},
					"response": []
				},
				{
					"name": "Get All Users Invalid Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14731647-792c-4b68-9022-a65e203a542d",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f4766a6e-7e6b-4b7e-84be-7e3b4b25190d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/user"
					},
					"response": []
				},
				{
					"name": "All User Roles_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7eccc1ff-65ff-49e6-a2a3-88ecc8156736",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"var keyCount  = Object.keys(jsonData).length;\r",
									"pm.collectionVariables.set(\"total_users\", keyCount);\r",
									"console.log(keyCount);})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "799b5eea-57e7-4dce-8a54-6055f2642782",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/roles"
					},
					"response": []
				},
				{
					"name": "All User Roles_Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7eccc1ff-65ff-49e6-a2a3-88ecc8156736",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Unauthorized\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "41b2ba71-d0f1-40b9-b27b-24327c380f52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/roles"
					},
					"response": []
				},
				{
					"name": "All User Roles_Invalid-Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7eccc1ff-65ff-49e6-a2a3-88ecc8156736",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ad54ab85-484a-4b22-9be0-7deb5f34fd8a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/role"
					},
					"response": []
				},
				{
					"name": "Get User information_ UserId_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7eda289-927f-4e06-9230-2b21b63e4f60",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"user\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userFirstName\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userLastName\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userMiddleName\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userPhoneNumber\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"userLocation\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userTimeZone\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userLinkedinUrl\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userEduUg\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userEduPg\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userComments\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userVisaStatus\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        },\r",
									"        \"userLoginEmail\": {\r",
									"          \"type\": \"string\",\r",
									"          \"minLength\": 1\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"userFirstName\",\r",
									"        \"userLastName\",\r",
									"        \"userMiddleName\",\r",
									"        \"userPhoneNumber\",\r",
									"        \"userLocation\",\r",
									"        \"userTimeZone\",\r",
									"        \"userLinkedinUrl\",\r",
									"        \"userEduUg\",\r",
									"        \"userEduPg\",\r",
									"        \"userComments\",\r",
									"        \"userVisaStatus\",\r",
									"        \"userLoginEmail\"\r",
									"      ]\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"uniqueItems\": true,\r",
									"      \"minItems\": 1,\r",
									"      \"items\": {\r",
									"        \"required\": [\r",
									"          \"roleId\",\r",
									"          \"userRoleStatus\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"          \"roleId\": {\r",
									"            \"type\": \"string\",\r",
									"            \"minLength\": 1\r",
									"          },\r",
									"          \"userRoleStatus\": {\r",
									"            \"type\": \"string\",\r",
									"            \"minLength\": 1\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"user\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a23a28c0-c270-4701-8e14-807c7bb6a098",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Get User information_ UserId_Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7eda289-927f-4e06-9230-2b21b63e4f60",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Unauthorized\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c3e7a991-23c1-4add-b3d1-cf795c145535",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Get User information_ UserId_Invalid-Userid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7eda289-927f-4e06-9230-2b21b63e4f60",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d9d4d87e-2050-49ee-b65d-43c5aba8ff64",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d7e047ca-60f0-45a3-9c99-256ec4a453a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}000"
					},
					"response": []
				},
				{
					"name": "Get all Users with roles_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "831aef59-e416-49d1-a8b6-ca141208b1f1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9956c6bf-f7fd-4733-a3b8-a05638a21b9a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/roles"
					},
					"response": []
				},
				{
					"name": "Get all Users with roles_Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "831aef59-e416-49d1-a8b6-ca141208b1f1",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Unauthorized\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "778116ca-084e-4a6f-af34-442fcb586267",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/roles"
					},
					"response": []
				},
				{
					"name": "Get all Users with roles_Invalid-Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "831aef59-e416-49d1-a8b6-ca141208b1f1",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5c5c1116-bfce-49d2-aa4c-a019e1725509",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/role"
					},
					"response": []
				},
				{
					"name": "Count_active_postive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60ab021b-0c97-4419-bace-e85e01b3430c",
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"var keyCount  = Object.keys(jsonData).length;\r",
									"console.log(keyCount);})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"});\r",
									"\r",
									"/*\r",
									"added by BK\r",
									"*/\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"var keyCount  = Object.keys(jsonData).length;\r",
									"console.log(keyCount);\r",
									"pm.collectionVariables.set(\"active_users\", keyCount)\r",
									"});\r",
									"console.log(pm.collectionVariables.get(\"total_users\"));\r",
									"console.log(pm.collectionVariables.get(\"active_users\"));\r",
									"Active_users = pm.collectionVariables.get(\"active_users\");\r",
									"var Inactive_users = pm.collectionVariables.get(\"total_users\") - pm.collectionVariables.get(\"active_users\");\r",
									"console.log(\"Number of Inactive User : \" + Inactive_users);\r",
									"console.log(\"Number of Active User : \" +  Active_users);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4fb7605a-dee4-4732-8ed2-6c939693f23f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/activeUsers"
					},
					"response": []
				},
				{
					"name": "Count_active_postive NoAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60ab021b-0c97-4419-bace-e85e01b3430c",
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"var keyCount  = Object.keys(jsonData).length;\r",
									"console.log(keyCount);})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Unauthorized\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a71ca740-7aa0-45cd-87bf-21ea7152f97c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/activeUsers"
					},
					"response": []
				},
				{
					"name": "Count_activ_-Invalid-Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60ab021b-0c97-4419-bace-e85e01b3430c",
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"var keyCount  = Object.keys(jsonData).length;\r",
									"console.log(keyCount);})\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "412daf79-b3f5-4da2-939c-8bdfcf9b9e74",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/activeUser"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_postive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59fbdf8-89df-444b-98ab-3f25c165bed6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fff87449-24e8-4e49-a174-6d33bed01741",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{prg_id}}\",\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"{{bt_id}}\",\r\n      \"userRoleProgramBatchStatus\": \"Inactive\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_Inactive_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59fbdf8-89df-444b-98ab-3f25c165bed6",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c6724826-9c82-4c82-be84-90e454a5417c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{prg_id}}\",\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"{{bt_id}}\",\r\n      \"userRoleProgramBatchStatus\": \"Inactive\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_missing-batchid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59fbdf8-89df-444b-98ab-3f25c165bed6",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a64512c0-301f-43a7-ad0d-f40aa9281d84",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{prg_id}}\",\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"\",\r\n      \"userRoleProgramBatchStatus\": \"Inactive\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_missing-prgid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59fbdf8-89df-444b-98ab-3f25c165bed6",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3047be43-fd36-49e5-8891-c884f209094c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{prgm_id}}\",\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"{{bt_id}}\",\r\n      \"userRoleProgramBatchStatus\": \"Inactive\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update_userRoleProgram_BatchStatus_Invalid-Roleid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59fbdf8-89df-444b-98ab-3f25c165bed6",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ad979b6c-94d9-4dd6-8310-638a56c18630",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"programId\": \"{{prg_id}}\",\r\n  \"roleId\": \"R0\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": \"{{bt_id}}\",\r\n      \"userRoleProgramBatchStatus\": \"Inactive\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleProgramBatchStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Gets User by Program Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d1d4990-f0c3-441f-82c7-772eba87707e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "82cc5c6a-d161-47f9-bb42-8c5247972963",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programBatch/{{bt_id}}"
					},
					"response": []
				},
				{
					"name": "Gets User by Program Batches-Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d1d4990-f0c3-441f-82c7-772eba87707e",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cffee843-4e3d-4eaf-ab53-6e5aa0d9ba2b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programBatch/{{bt_id}}"
					},
					"response": []
				},
				{
					"name": "Gets User by Program Batches-Invalid Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d1d4990-f0c3-441f-82c7-772eba87707e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bc79e3de-58bf-4f9d-b469-facccf909d0d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programBatch/{{bt_i}}"
					},
					"response": []
				},
				{
					"name": "Gets Users for Program_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2804eb9-a272-4dbf-920c-58e708d44c27",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a1316eec-43ea-415c-af9e-1c8b24540daf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programs/{{prg_id}}"
					},
					"response": []
				},
				{
					"name": "Gets Users for Program_No auth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2804eb9-a272-4dbf-920c-58e708d44c27",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"var schema  = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "740d477a-ec9d-4904-a201-499292d6d4d0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programs/{{prg_id}}"
					},
					"response": []
				},
				{
					"name": "Gets Users for Program_Invalid-endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2804eb9-a272-4dbf-920c-58e708d44c27",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b09df176-5e9c-4990-86df-c527f4a45b77",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/programs/{{prg_i}}"
					},
					"response": []
				},
				{
					"name": "Gets Users by RoleID_R03 Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b0a7e8b-fd25-475c-bf5d-d1911c12ca50",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "92015cf5-b5ab-4c2a-95e5-f4f2e4f90926",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/roles/R03"
					},
					"response": []
				},
				{
					"name": "Gets Users by RoleID_R03-Noauth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b0a7e8b-fd25-475c-bf5d-d1911c12ca50",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d630c2f8-9b06-4b0c-ac04-f691fa340b1b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/users/roles/R03"
					},
					"response": []
				},
				{
					"name": "Gets Users by roleId Invalid Endpoint-Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "75863c08-6f97-453f-a719-d983161e31db",
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f8c2473f-35d9-4b52-b33c-d85fe3d2377a",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "590b1d7d-aa04-4347-b211-d3ebb0289e3f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms/users/roleID"
					},
					"response": []
				},
				{
					"name": "Gets Users by roleId V2_postive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ad9dde9-386b-4018-8cef-77d4abdbc319",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a1aba063-becc-43a7-8daa-d1f59fa9c12b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/v2/users"
					},
					"response": []
				},
				{
					"name": "Gets Users by roleId V2_No auth-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ad9dde9-386b-4018-8cef-77d4abdbc319",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2b2e943d-ff25-4967-9d1e-8c3cd6038c98",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/v2/users"
					},
					"response": []
				},
				{
					"name": "Gets Users by roleId V2 Invalid Endpoint-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6862c351-0bec-4b57-ba46-8b2cb35eb47c",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a1fa4cd9-ab59-4b4c-b6b5-78b29fc25253",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms/v2/user"
					},
					"response": []
				},
				{
					"name": "Update User_Location_Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37a66bed-2d59-41b0-a675-03da77c95bdd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Existing Batch\");\r",
									"});\r",
									"pm.test(\"Update User Location\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.batchId).to.eql(8773);\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"March24-API HEXA-DA-SDET01-003\");\r",
									"});\r",
									"*/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7157b808-10e1-45ee-8370-9ce8497366b1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"userId\": \"{{std_id}}\",\r\n        \"userFirstName\": \"sam\",\r\n        \"userLastName\": \"Goi\",\r\n        \"userMiddleName\": \"GAh\",\r\n        \"userPhoneNumber\": 7894561233,\r\n        \"userLocation\": \"EST\",\r\n        \"userTimeZone\": \"IST\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/hopeisbest\",\r\n        \"userEduUg\": \"BBA\",\r\n        \"userEduPg\": \"MBA\",\r\n        \"userComments\": \"ok\",\r\n        \"userVisaStatus\": \"H4\",\r\n        \"userLoginEmail\": \"Bestofbest@gmail.com\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update User_user-phonenumber-missing integer-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b9e9417-e74d-499c-b409-0b1b299ff173",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f28e4415-605f-44bc-a395-9f28a41814c1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"userId\": \"{{std_id}}\",\r\n        \"userFirstName\": \"sam\",\r\n        \"userLastName\": \"goi\",\r\n        \"userMiddleName\": \"GAh\",\r\n        \"userPhoneNumber\": \"fds\",\r\n        \"userLocation\": \"EST\",\r\n        \"userTimeZone\": \"IST\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/hopeisbest\",\r\n        \"userEduUg\": \"BBA\",\r\n        \"userEduPg\": \"MBA\",\r\n        \"userComments\": \"ok\",\r\n        \"userVisaStatus\": \"H4\",\r\n        \"userLoginEmail\": \"Bestofbest@gmail.com\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update User_wrong-visa status-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d6f5900e-cdbb-49a1-ad8f-2397ecf8a63a",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema  = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "49b9b642-bcde-41b7-961b-26538180bb1f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"userId\": \"{{std_id}}\",\r\n        \"userFirstName\": \"sam\",\r\n        \"userLastName\": \"goi\",\r\n        \"userMiddleName\": \"GAh\",\r\n        \"userPhoneNumber\": 7894561233,\r\n        \"userLocation\": \"EST\",\r\n        \"userTimeZone\": \"IST\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/hopeisbest\",\r\n        \"userEduUg\": \"BBA\",\r\n        \"userEduPg\": \"MBA\",\r\n        \"userComments\": \"ok\",\r\n        \"userVisaStatus\": \"H\",\r\n        \"userLoginEmail\": \"swa@gmail.com\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update User_Location_Empty-string-userFirstName-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7260d164-c82e-451b-98ef-6518b786ed22",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "46e3a946-6853-43d7-b8fc-72dc9dd0504e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"userId\": \"{{std_id}}\",\r\n        \"userFirstName\": \"\",\r\n        \"userLastName\": \"Goi\",\r\n        \"userMiddleName\": \"GAh\",\r\n        \"userPhoneNumber\": 7894561233,\r\n        \"userLocation\": \"EST\",\r\n        \"userTimeZone\": \"IST\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/hopeisbest\",\r\n        \"userEduUg\": \"BBA\",\r\n        \"userEduPg\": \"MBA\",\r\n        \"userComments\": \"ok\",\r\n        \"userVisaStatus\": \"H4\",\r\n        \"userLoginEmail\": \"Bestofbest@gmail.com\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update User Role Status_Std_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89d6ab53-36d5-4c15-997d-3aaa5ca01d9b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3c38eeaf-c08f-40d2-b054-0fdb8fc1d269",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"R03\",\r\n  \"userRoleStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update User Role Status_Std_wrong-Roleid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f91f27d9-1edf-4d95-8ec6-a812aae6e479",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bc156b38-2e2e-4c74-b3e0-7766c69aaf4c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"R0\",\r\n  \"userRoleStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus/{{std_id}}"
					},
					"response": []
				},
				{
					"name": "Update User Role Status_Stf_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba6c9b65-c6f3-42b6-9abc-e85f788d50d6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "509c8fd2-b9ad-494f-ae27-57c462e75b5a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"R02\",\r\n  \"userRoleStatus\": \"Inactive\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus/{{us_id}}"
					},
					"response": []
				},
				{
					"name": "Update User Role Status_Stf_Invalid-roleid-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "539851cb-4a6f-4845-9bb9-a5d848ee4924",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1784109b-da27-4d9a-aaf4-8d8ca8eaa84a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"R023\",\r\n  \"userRoleStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/roleStatus/{{us_id}}"
					},
					"response": []
				},
				{
					"name": "updateUserLoginStatus_positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0663ef2-39f7-4037-8c67-120d4ff2db53",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bf24e2dc-04ef-4d1c-a6cf-e99f2f19ff56",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"Password@123\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"apihexastudent@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/userLogin/{{updateUserStatus}}"
					},
					"response": []
				},
				{
					"name": "updateUserLoginStatus_NoAuth_Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0663ef2-39f7-4037-8c67-120d4ff2db53",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1f95457c-90e7-4953-85e6-21f838c4b526",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{base_url}}/users/userLogin/{{updateUserStatus}}"
					},
					"response": []
				},
				{
					"name": "updateUserLoginStatus_Endpointmissing-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0663ef2-39f7-4037-8c67-120d4ff2db53",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"description\": \"\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation', function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1eebf15d-5f0d-4ea4-ad1b-8a8f5e1d97ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"Active\",\r\n  \"password\": \"Password@123\",\r\n  \"roleIds\": [\r\n    \"R02\"\r\n  ],\r\n  \"status\": \"Active\",\r\n  \"userLoginEmail\": \"apihexastudent@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/users/userLogin/"
					},
					"response": []
				},
				{
					"name": "Login Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "738aba45-ff60-4396-82f8-3e6600739d45",
								"exec": [
									"var responseData = pm.response.json();",
									"pm.collectionVariables.set(\"access-token_API\", responseData.token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9989191f-2cc3-4569-acc5-21780b889b60",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Password@123\",\r\n  \"userLoginEmailId\": \"apihexa@testmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms/login"
					},
					"response": []
				}
			],
			"id": "22aad0df-6516-4d57-81cd-5a9861b6fdfe"
		},
		{
			"name": "UserLogin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bfc68748-2e2a-4475-bbee-b4c637c492c9",
						"exec": [
							"var bearer_token =  pm.response.json(); \r",
							"pm.collectionVariables.set(\"access_token_RP\", bearer_token.token);\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "8ac218b1-e244-4672-a7ae-487da125b484",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"password\": \"abcdefgh@123\",\r\n  \"userLoginEmailId\": \"APIHEXA_001\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms/login"
			},
			"response": []
		},
		{
			"name": "GetAllPrograms",
			"id": "a389fdb1-45ed-4e91-b71c-393410030b8a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms/allPrograms"
			},
			"response": []
		},
		{
			"name": "UserCreation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3dfdc6ee-fe12-4fe0-aea6-fba8e9c447be",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "9efb939d-a65a-4f21-bf2e-62cd9bd4e5c4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"userComments\": \"test\",\r\n\t\"userEduPg\": \"test1\",\r\n\t\"userEduUg\": \"test2\",\r\n\t\"userFirstName\": \"test\",\r\n\t\"userId\": \"U9090\",\r\n\t\"userLastName\": \"test\",\r\n\t\"userLinkedinUrl\": \"www.linkedin.com/test\",\r\n\t\"userLocation\": \"test5\",\r\n\t\"userLogin\": {\r\n\t\t\"loginStatus\": \"Active\",\r\n\t\t\"password\": \"none\",\r\n\t\t\"roleIds\": [\r\n\t\t\t\"R02\"\r\n\t\t],\r\n\t\t\"status\": \"Active\",\r\n\t\t\"userLoginEmail\": \"abc@gmail.com\"\r\n\t},\r\n\t\"userMiddleName\": \"testabc\",\r\n\t\"userPhoneNumber\": \"012345678\",\r\n\t\"userRoleMaps\": [\r\n\t\t{\r\n\t\t\t\"roleId\": \"R02\",\r\n\t\t\t\"userRoleStatus\": \"Active\"\r\n\t\t}\r\n\t],\r\n\t\"userTimeZone\": \"pst\",\r\n\t\"userVisaStatus\": \"H1B\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms/users/roleStatus"
			},
			"response": []
		},
		{
			"name": "Logout",
			"id": "56c8c6a5-824a-42f0-8f51-c0f7067360bf",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyc0BnbWFpbC5jb20iLCJpYXQiOjE3MDk3MjExNjEsImV4cCI6MTcwOTc0OTk2MX0.AHHGAjRUqPTt3AzhbRWXakyD9tjRe8c2B8r1IJXk7woGZ6q5AqJKuMFKWybbmwLyq589shZ8OB_hJkmXQGRiGg"
					}
				},
				"method": "GET",
				"header": [],
				"url": "lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms/logoutlms"
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{access_token_MS}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3ad52c7b-8f30-44c0-8e4c-012b3d2b1a2a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7e228895-1b54-4258-abce-4a4392c0345d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "access_token_RP",
			"value": ""
		}
	]
}